<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>知北遊的博客</title>
  <subtitle>青春会老去，岁月不会停</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.rookieyang.cn/"/>
  <updated>2017-05-03T13:42:15.000Z</updated>
  <id>http://www.rookieyang.cn/</id>
  
  <author>
    <name>知北遊</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>onOptionsItemSelected() 返回值的理解</title>
    <link href="http://www.rookieyang.cn/2017/05/03/onOptionsItemSelected%E8%BF%94%E5%9B%9E%E5%80%BC%E7%9A%84%E7%90%86%E8%A7%A3/"/>
    <id>http://www.rookieyang.cn/2017/05/03/onOptionsItemSelected返回值的理解/</id>
    <published>2017-05-03T12:21:57.000Z</published>
    <updated>2017-05-03T13:42:15.000Z</updated>
    
    <content type="html"><![CDATA[<p>首先查看官方 API 的解释：</p>
<blockquote>
<p>This hook is called whenever an item in your options menu is selected. The default implementation simply returns false to have the normal processing happen (calling the item’s Runnable or sending a message to its Handler as appropriate). You can use this method for any items for which you would like to do processing without those other facilities.</p>
</blockquote>
<a id="more"></a>
<p>也就是说当点击 OptionsMenu 中的 Item 时，默认会返回 false，这个时候将会处理 item 关联的 Runnable 或发送一条 message 给它的 Handler。<br>为了弄清楚返回 false 时可能会发生什么做了如下测试：</p>
<ol>
<li><p>测试一</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onOptionsItemSelected</span><span class="params">(MenuItem item)</span> </span>&#123;</div><div class="line">    <span class="keyword">switch</span> (item.getItemId()) &#123;</div><div class="line">        <span class="keyword">case</span> R.id.add_item:</div><div class="line">            Toast.makeText(MainActivity.<span class="keyword">this</span>, <span class="string">"Add"</span>, Toast.LENGTH_LONG).show();</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> R.id.remove_item:</div><div class="line">            Toast.makeText(MainActivity.<span class="keyword">this</span>, <span class="string">"Remove"</span>, Toast.LENGTH_LONG).show();</div><div class="line">            item.setActionView(R.layout.progress);</div><div class="line">            Intent intent = <span class="keyword">new</span> Intent(MainActivity.<span class="keyword">this</span>, SecondActivity.class);</div><div class="line">            item.setIntent(intent);</div><div class="line">            Log.i(TAG, <span class="string">"onOptionsItemSelected: Remove"</span>);</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">default</span>:</div><div class="line">            Toast.makeText(MainActivity.<span class="keyword">this</span>, <span class="string">"re"</span>, Toast.LENGTH_LONG).show();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>上述代码中给 item 关联了一个 Intent 用于跳转到 SecondActivity，如果返回为 true 则点击 item 时不会跳转到 SecondActivity，如果返回 false 则会跳转到 SecondActivity。</p>
</blockquote>
</li>
<li><p>测试二</p>
<ul>
<li><p>创建一个 Fragment</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyFragment</span> <span class="keyword">extends</span> <span class="title">Fragment</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreateOptionsMenu</span><span class="params">(Menu menu, MenuInflater inflater)</span> </span>&#123;</div><div class="line">    inflater.inflate(R.menu.main, menu);</div><div class="line">    <span class="keyword">super</span>.onCreateOptionsMenu(menu, inflater);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onOptionsItemSelected</span><span class="params">(MenuItem item)</span> </span>&#123;</div><div class="line">    <span class="keyword">switch</span> (item.getItemId()) &#123;</div><div class="line">      <span class="keyword">case</span> R.id.remove_item:</div><div class="line">        Toast.makeText(getContext(), <span class="string">"Fragment Remove"</span>, Toast.LENGTH_LONG).show();</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">      <span class="keyword">default</span>:</div><div class="line">        Toast.makeText(getContext(), <span class="string">"Fragment"</span>, Toast.LENGTH_LONG).show();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="meta">@Nullable</span></div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> View <span class="title">onCreateView</span><span class="params">(LayoutInflater inflater, @Nullable ViewGroup container,</span></span></div><div class="line">      Bundle savedInstanceState) &#123;</div><div class="line">    setHasOptionsMenu(<span class="keyword">true</span>);</div><div class="line">    <span class="keyword">return</span> inflater.inflate(fragment_layout, container, <span class="keyword">false</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上述创建了一个自定义的 Fragment 类，并添加了 OptionMenu 的点击事件。</p>
</li>
<li><p>在之前的 Activity 的布局文件中添加 Fragment</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">  <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></div><div class="line">  <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">  <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">  <span class="attr">android:orientation</span>=<span class="string">"vertical"</span>&gt;</div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">fragment</span></span></div><div class="line">    <span class="attr">android:id</span>=<span class="string">"@+id/fragment"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:name</span>=<span class="string">"com.rookieyang.demo.MyFragment"</span></div><div class="line">    <span class="attr">tools:layout</span>=<span class="string">"@layout/fragment_layout"</span> /&gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<p></p></li></ul><p></p>
<blockquote>
<p>在完成上述步骤之后点击 remove 的 item，由于 Activity 中的 onOptionsItemSelected() 返回了false，导致事件没有被消费就会向下传递给 Fragment，进而执行 Fragment 中的 item 的点击事件，所以能够看到屏幕上将会显示 <code>Fragment Remove</code> 而不是 <code>Remove</code>。</p>
</blockquote>
</li>


</ol>
<p>补：OptionMenu 的 Item 自定义的点击事件优先级要高于 onOptionsItemSelected()。</p>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;首先查看官方 API 的解释：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This hook is called whenever an item in your options menu is selected. The default implementation simply returns false to have the normal processing happen (calling the item’s Runnable or sending a message to its Handler as appropriate). You can use this method for any items for which you would like to do processing without those other facilities.&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Android 学习" scheme="http://www.rookieyang.cn/categories/Android-%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Android" scheme="http://www.rookieyang.cn/tags/Android/"/>
    
      <category term="问题记录" scheme="http://www.rookieyang.cn/tags/%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>一周总结（4.24～4.30）</title>
    <link href="http://www.rookieyang.cn/2017/05/02/%E4%B8%80%E5%91%A8%E6%80%BB%E7%BB%93-4-24%EF%BD%9E4-30/"/>
    <id>http://www.rookieyang.cn/2017/05/02/一周总结-4-24～4-30/</id>
    <published>2017-05-02T11:58:36.000Z</published>
    <updated>2017-05-08T03:31:06.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Activity"><a href="#Activity" class="headerlink" title="Activity"></a>Activity</h3><p>主要内容：<br><img src="https://lh3.googleusercontent.com/-u4OYyZZzSb8/WQh2MXvWjiI/AAAAAAAAAOA/NifbHzkgMfc5NvV-goL-QS_dR3Jt2qgLACHM/I/Activity" alt="Activity导图"><a id="more"></a></p>
<h4 id="Activity-基本使用"><a href="#Activity-基本使用" class="headerlink" title="Activity 基本使用"></a>Activity 基本使用</h4><ol>
<li>创建活动</li>
<li><code>AndroidManifest.xml</code> 的 <code>application</code> 标签内进行声明</li>
<li>载入布局<br>setContentView(R.layout.second_layout)</li>
</ol>
<h4 id="Activity-跳转"><a href="#Activity-跳转" class="headerlink" title="Activity 跳转"></a>Activity 跳转</h4><ol>
<li><p>显式 Intent</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//Intent(Context packageContext, Class&lt;?&gt; cls)</span></div><div class="line">Intent intent = <span class="keyword">new</span> Intent(MainActivity.<span class="keyword">this</span>, SecondActivity.class);</div><div class="line">startActivity(intent);</div></pre></td></tr></table></figure>
<p> 这种指定上下文和目标活动类名的 Intent 称之为显式 Intent。</p>
</li>
<li><p>隐式 Intent</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">   &lt;activity android:name=&quot;.SecondActivity&quot;&gt;</div><div class="line">     &lt;intent-filter&gt;</div><div class="line">       &lt;action android:name=&quot;com.rookieyang.demo.ACTION_START&quot; /&gt;</div><div class="line">    </div><div class="line">       &lt;category android:name=&quot;android.intent.category.DEFAULT&quot; /&gt;</div><div class="line">       &lt;category android:name=&quot;com.rookieyang.demo.MY_CATEGORY&quot; /&gt;</div><div class="line">     &lt;/intent-filter&gt;</div><div class="line">&lt;/activity&gt;</div><div class="line"></div><div class="line">    Intent implieIntent = new Intent(&quot;com.rookieyang.demo.ACTION_START&quot;);</div><div class="line">    implieIntent.addCategory(&quot;com.rookieyang.demo.MY_CATEGORY&quot;);</div><div class="line">    startActivity(implieIntent);</div></pre></td></tr></table></figure>
<p> 隐式 Intent 通过指定一系列更为抽象的 action 和 category 等信息，然后交由系统去分析这个 Intent，并帮我们找出合适的活动去启动。只有活动中的 <code>&lt;action&gt;</code> 和 <code>&lt;category&gt;</code> 标签完全匹配 Intent 中的 action 和 category 时，活动才能响应 Intent。</p>
<blockquote>
<p>在调用 <code>startActivity()</code> 方法时会自动将 <code>android.intent.category.DEFAULT</code> 加入到 Intent 中，所以在给 Activity 指定 category 的时候不能够去掉默认的 category。</p>
</blockquote>
<p> 隐式 Intent 除了可以启动自己程序内的活动，还可以启动其他程序的活动：</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">btn.setOnClickListener(<span class="keyword">new</span> OnClickListener() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">        Intent intent = <span class="keyword">new</span> Intent(Intent.ACTION_VIEW);</div><div class="line">        intent.setData(Uri.parse(<span class="string">"http://www.baidu.com"</span>));</div><div class="line">        startActivity(intent);</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p> 隐式 Intent 指定了一个系统内置的 action，通过 <code>setData()</code> 设置 Intent 操作的数据用以调用系统浏览器，其中 <code>setData()</code> 对应 <code>&lt;intent-filter&gt;</code> 标签内的 <code>&lt;data&gt;</code> 标签，用于指定当前活动能够响应什么类型的数据。<code>&lt;data&gt;</code> 标签中主要可以配置以下内容：</p>
<ul>
<li><code>android:scheme</code>：用于指定数据的协议部分，如上例的 http 部分。</li>
<li><code>android:host</code>：用于指定数据的主机名部分，如上例的 www.baidu.com 部分。</li>
<li><code>android:port</code>：用于指定数据的端口部分，一般紧随主机名之后。</li>
<li><code>android:path</code>：用于指定主机名和端口之后的部分，如一段网址中跟在域名之后的内容。</li>
<li><code>android:mimeType</code>：用于指定可以处理的数据类型，允许使用通配符方式进行指定。</li>
</ul>
</li>
</ol>
<h4 id="Activity-间数据传递"><a href="#Activity-间数据传递" class="headerlink" title="Activity 间数据传递"></a>Activity 间数据传递</h4><ol>
<li><p>向下一个活动传递数据</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//MainActivity</span></div><div class="line">Intent intent = <span class="keyword">new</span> Intent(MainActivity.<span class="keyword">this</span>, SecondActivity.class);</div><div class="line">intent.putExtra(<span class="string">"data"</span>, <span class="string">"data"</span>);</div><div class="line">startActivity(intent);</div><div class="line"><span class="comment">//SecondActivity</span></div><div class="line">Intent intent = getIntent();</div><div class="line">Toast.makeText(<span class="keyword">this</span>, intent.getStringExtra(<span class="string">"data"</span>), Toast.LENGTH_LONG).show();</div></pre></td></tr></table></figure>
<p> MainActivity 中通过 Intent 的 <code>putExtra()</code> 方法将数据暂存在 Intent 中，然后在 SecondActivity 中通过 <code>getIntent()</code> 获取到启动 SecondActivity 的 Intent，之后通过 <code>getStringExtra()</code> 方法获取到传递的数据。如果传递的是整型数据则使用 <code>getIntExtra()</code> 方法。</p>
</li>
<li><p>返回数据给上一个活动</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//MainActivity</span></div><div class="line">btn.setOnClickListener(<span class="keyword">new</span> OnClickListener() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">        Intent intent = <span class="keyword">new</span> Intent(MainActivity.<span class="keyword">this</span>, SecondActivity.class);</div><div class="line">        startActivityForResult(intent, <span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onActivityResult</span><span class="params">(<span class="keyword">int</span> requestCode, <span class="keyword">int</span> resultCode, Intent data)</span> </span>&#123;</div><div class="line">    <span class="keyword">switch</span> (requestCode) &#123;</div><div class="line">        <span class="keyword">case</span> <span class="number">1</span>:</div><div class="line">            <span class="keyword">if</span> (resultCode == RESULT_OK) &#123;</div><div class="line">                Log.i(<span class="string">"onActivityResult"</span>, data.getStringExtra(<span class="string">"data"</span>));</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">default</span>:</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">//SecondActivity</span></div><div class="line">btn.setOnClickListener(<span class="keyword">new</span> OnClickListener() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">        Intent intent = <span class="keyword">new</span> Intent();</div><div class="line">        intent.putExtra(<span class="string">"data"</span>, <span class="string">"data"</span>);</div><div class="line">        setResult(RESULT_OK, intent);</div><div class="line">        finish();</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<ul>
<li><code>startActivityForResult(Intent intent, int requestCode)</code>：期望在活动销毁的时候能够返回一个结果给上一个活动。</li>
<li><code>setResult(int resultCode, Intent data)</code>：专门用于向上一个活动返回数据，第一个参数用于向上一个活动返回处理结果，一般只使用 <code>RESULT_OK</code> 和 <code>RESULT_CANCELED</code>。第二个参数则是把带有数据的 Intent 传递回去，然后调用 <code>finish()</code> 方法来销毁当前活动。</li>
<li><code>onActivityResult(int requestCode, int resultCode, Intent data)</code>：第一个参数是我们启动活动传入的请求码，第二个参数是返回数据传入的返回结果，第三个参数是返回的携带数据的 Intent，由于一个活动可能调用 <code>startActivityForResult()</code> 启动多个活动，所以首先需要检查 <code>requestCode</code> 来判断数据来源，然后在通过 <code>resultCode</code> 来判断处理结果是否成功。</li>
</ul>
</li>
</ol>
<h4 id="Activity-的生命周期"><a href="#Activity-的生命周期" class="headerlink" title="Activity 的生命周期"></a>Activity 的生命周期</h4><p><img src="http://i.imgur.com/J27l7mI.png" alt="activity_lifecycle"></p>
<ol>
<li><code>onCreate()</code>：活动第一次被创建的时候调用，一般在该方法中完成活动的初始化操作，比如加载布局、绑定事件等。</li>
<li><code>onStart()</code>：在活动由不可见变为可见的时候调用。</li>
<li><code>onResume()</code>：在活动准备好和用户进行交互的时候调用。此时活动一定位于栈顶，并且处于运行状态。</li>
<li><code>onPause()</code>：在系统准备去启动或者恢复另一个活动的时候调用。我们通常会在这个方法中将一些消耗 CPU 的资源释放掉，以及保存一些关键数据，但这个方法的执行速度一定要快，不然会影响到新的栈顶活动的使用。</li>
<li><code>onStop()</code>：在活动完全不可见的时候调用。如果启动的新活动是一个对话框式的活动，则 <code>onPause()</code> 会执行，而 <code>onStop()</code> 不会执行。</li>
<li><code>onDestroy()</code>：在活动被销毁之前调用。</li>
<li><code>onRestart()</code>：在活动由停止状态变为活动状态之前调用。<blockquote>
<p>以上七种方法中除了 onRestart( ) 方法，其他都是两两相对的，从而可以分为三种生存期：onCreate( ) 和 onDestory( ) 为<code>完整生存期</code>、onStart( ) 和 onStop( ) 为<code>可见生存期</code>、onResume( ) 和 onPause( ) 为<code>前台生存期</code>。<br>Activity 最多可能有四种状态，分别为：运行状态、暂停状态、停止状态、销毁状态。系统一般倾向于回收处于后两种状态的 Activity。</p>
</blockquote>
</li>
</ol>
<h4 id="Activity-的数据保存"><a href="#Activity-的数据保存" class="headerlink" title="Activity 的数据保存"></a>Activity 的数据保存</h4><p>由于 Activity 处于停止状态的时候可能被系统回收，那么当用户返回被回收的 Activity 之时会面对一个空数据的 Activity。为了避免这种情况的发生，我们可以利用 <code>onSaveInstanceState()</code> 进行数据的保存工作：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"> <span class="comment">//保存</span></div><div class="line"> <span class="meta">@Override</span></div><div class="line"> <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onSaveInstanceState</span><span class="params">(Bundle outState)</span> </span>&#123;</div><div class="line">   outState.putString(<span class="string">"data"</span>, <span class="string">"outState"</span>);</div><div class="line">   Log.i(TAG, <span class="string">"onSaveInstanceState: "</span>);</div><div class="line">   <span class="keyword">super</span>.onSaveInstanceState(outState);</div><div class="line"> &#125;</div><div class="line"> <span class="comment">//恢复</span></div><div class="line"> <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">   <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">   setContentView(R.layout.activity_first);</div><div class="line">   <span class="keyword">if</span> (savedInstanceState != <span class="keyword">null</span>) &#123;</div><div class="line">     Log.i(TAG, <span class="string">"onCreate: "</span> + savedInstanceState.getString(<span class="string">"data"</span>));</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>主动销毁 Acitivity 不会触发 <code>onSaveInstanceState()</code>，Bundle 也可以和 Intent 结合起来传递数据。</p>
</blockquote>
<h4 id="Activity-启动模式"><a href="#Activity-启动模式" class="headerlink" title="Activity 启动模式"></a>Activity 启动模式</h4><p>Activity 有下列四种启动模式：</p>
<table>
<thead>
<tr>
<th style="text-align:left">启动模式</th>
<th style="text-align:left">作用</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">standard</td>
<td style="text-align:left">每次启动活动都会创建一个活动的实例</td>
</tr>
<tr>
<td style="text-align:left">singleTop</td>
<td style="text-align:left">在启动活动的时候如果发现返回栈的栈顶已经是该活动，则会直接使用它，不会再创建新的活动实例</td>
</tr>
<tr>
<td style="text-align:left">singleTask</td>
<td style="text-align:left">在启动活动的时候如果发现返回栈中已经存在该活动，则直接使用它，并把该活动之上的所有活动统统出栈</td>
</tr>
<tr>
<td style="text-align:left">singleInstance</td>
<td style="text-align:left">在启动活动的时候，启动一个单独的返回栈来管理该活动</td>
</tr>
</tbody>
</table>
<ul>
<li>singleInstance 的意义：假设程序中有一个活动允许其他程序调用，如果我们想实现其他程序和我们的程序可以共享这个活动的实例，就需要使用 singleInstance 模式，因为在这种模式下会有一个单独的返回栈来管理这个活动，不管是哪个应用程序来访问这个活动，都共用同一个返回栈。</li>
</ul>
<h3 id="Intent-的-Flags-属性"><a href="#Intent-的-Flags-属性" class="headerlink" title="Intent 的 Flags 属性"></a>Intent 的 Flags 属性</h3><p>Flags 的作用有很多，有的 Flags 为可以设定 Activity 的启动模式，还有的 Flags 可以影响 Activity 的运行状态，比如 <code>FLAG_ACTIVITY_SINGLE_TOP</code> 和 <code>FLAG_ACTIVITY_CLEAR_TOP</code>。<br>常用的 Flags 如下：</p>
<table>
<thead>
<tr>
<th>Flags</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>FLAG_ACTIVITY_NEW_TASK</td>
<td>When using this flag, if a task is already running for the activity you are now starting, then a new activity will not be started; instead, the current task will simply be brought to the front of the screen with the state it was last in.</td>
</tr>
<tr>
<td>FLAG_ACTIVITY_CLEAR_TOP</td>
<td>设置该标志之后的 Activity，当启动 Activity 时，如果该 Activity 已经存在任务栈中，则不在创建新的实例，并且位于该 Activity 之上的 Activity都需要出栈<br>一般配合 FLAG_ACTIVITY_NEW_TASK 进行使用</td>
</tr>
<tr>
<td>FLAG_ACTIVITY_SINGLE_TOP</td>
<td>设置 Activity 的启动模式为 singleTop</td>
</tr>
<tr>
<td>FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS</td>
<td>具有该标志的 Activity 不会出现在历史 Activity 的列表中</td>
</tr>
<tr>
<td>FLAG_ACTIVITY_LAUNCH_ADJACENT</td>
<td>此标志仅用于分屏多窗口模式，新的活动将显示在上一个 Activity 的附近<br>需要与 FLAG_ACTIVITY_NEW_TASK 结合使用。 另外，如果要创建现有活动的新实例，则应同时设置 FLAG_ACTIVITY_MULTIPLE_TASK</td>
</tr>
<tr>
<td>FLAG_ACTIVITY_NEW_DOCUMENT</td>
<td>该标志用于在一个以目标 Activity 为栈顶的新任务栈中打开文档</td>
</tr>
</tbody>
</table>
<ul>
<li><code>FLAG_ACTIVITY_NEW_TASK</code>：设置此状态，记住以下原则，首先会查找是否存在和被启动的 Activity 具有相同的亲和性的任务栈（即 taskAffinity，注意同一个应用程序中的 activity 的亲和性在没有修改的情况下是一样的），如果有，则直接把这个栈整体移动到前台，并保持栈中的状态不变，即栈中的 activity 顺序不变，如果没有，则新建一个栈来存放被启动的 activity。</li>
<li><code>FLAG_ACTIVITY_LAUNCH_ADJACENT</code>：测试发现在分屏模式下在启动目标 Activity 时，如果没有设置 <code>FLAG_ACTIVITY_MULTIPLE_TASK</code> ，那么当目标 Activity 已经存在于任务栈中，将不会进入分屏模式。</li>
<li><code>FLAG_ACTIVITY_NEW_DOCUMENT</code>： 当单独使用时，它相当于指定 <code>documentLaunchMode =“intoExisting”</code>。当与 <code>FLAG_ACTIVITY_MULTIPLE_TASK</code> 一起使用时，它等同于指定 <code>documentLaunchMode =“always”</code>。</li>
</ul>
<h3 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h3><h4 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h4><p>Intent 的 <code>putExtra()</code> 方法中所支持的数据类型是有限的，当需要传递一些自定义对象的时候，就需要用到序列化了。</p>
<h4 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h4><p>使用 Intent 来传递对象通常有两种实现方式：</p>
<ol>
<li><p>Serializable</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</div><div class="line">    </div><div class="line"> <span class="keyword">private</span> String name;</div><div class="line"> <span class="keyword">private</span> <span class="keyword">int</span> age;</div><div class="line">    </div><div class="line"> <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line">   <span class="keyword">return</span> name;</div><div class="line"> &#125;</div><div class="line">    </div><div class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</div><div class="line">   <span class="keyword">return</span> age;</div><div class="line"> &#125;</div><div class="line">    </div><div class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">   <span class="keyword">this</span>.name = name;</div><div class="line"> &#125;</div><div class="line">    </div><div class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</div><div class="line">   <span class="keyword">this</span>.age = age;</div><div class="line"> &#125;</div><div class="line">&#125;</div><div class="line">    </div><div class="line"><span class="comment">//MainActivity 中</span></div><div class="line">Person person = <span class="keyword">new</span> Person();</div><div class="line">person.setAge(<span class="number">13</span>);</div><div class="line">person.setName(<span class="string">"data"</span>);</div><div class="line">Intent intent = <span class="keyword">new</span> Intent(MainActivity.<span class="keyword">this</span>, SecondActivity.class);</div><div class="line">intent.putExtra(<span class="string">"data_person"</span>, person);</div><div class="line">startActivity(intent);</div><div class="line"><span class="comment">//SecondActivity 中</span></div><div class="line">Person person = (Person) getIntent().getParcelableExtra(<span class="string">"data_person"</span>);</div><div class="line">Log.i(<span class="string">"SecondActivity"</span>, <span class="string">"onCreate: "</span> + person.getName());</div></pre></td></tr></table></figure>
<blockquote>
<p>首先创建了一个 Person 类去实现 Serializable 接口，这样所有的 Person 对象就都是可序列化的了，然后在 MainActivity 中创建了一个 Person 对象，然后将对象传入 SecondActivity 中去，在 SecondActivity 中用 <code>getParcelableExtra()</code> 来获取对象。</p>
</blockquote>
</li>
<li><p>Parcelable</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">implements</span> <span class="title">Parcelable</span> </span>&#123;</div><div class="line">    </div><div class="line"> ...</div><div class="line">    </div><div class="line"> <span class="meta">@Override</span></div><div class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">describeContents</span><span class="params">()</span> </span>&#123;</div><div class="line">   <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line"> &#125;</div><div class="line">    </div><div class="line"> <span class="meta">@Override</span></div><div class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">writeToParcel</span><span class="params">(Parcel dest, <span class="keyword">int</span> flags)</span> </span>&#123;</div><div class="line">     dest.writeString(name);</div><div class="line">     dest.writeInt(age);</div><div class="line"> &#125;</div><div class="line">    </div><div class="line"> <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Parcelable.Creator&lt;Person&gt; CREATOR = <span class="keyword">new</span> Creator&lt;Person&gt;() &#123;</div><div class="line">     <span class="meta">@Override</span></div><div class="line">     <span class="function"><span class="keyword">public</span> Person <span class="title">createFromParcel</span><span class="params">(Parcel source)</span> </span>&#123;</div><div class="line">         Person person = <span class="keyword">new</span> Person();</div><div class="line">         person.name = source.readString();</div><div class="line">         person.age = source.readInt();</div><div class="line">         <span class="keyword">return</span> person;</div><div class="line">     &#125;</div><div class="line">    </div><div class="line">     <span class="meta">@Override</span></div><div class="line">     <span class="keyword">public</span> Person[] newArray(<span class="keyword">int</span> size) &#123;</div><div class="line">         <span class="keyword">return</span> <span class="keyword">new</span> Person[size];</div><div class="line">     &#125;</div><div class="line"> &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>Person 类实现了 Parcelable 接口用于序列化，提供了一个名为 CREATOR 的常量用于反序列化。<code>createFromParcel()</code> 和 <code>writeToParcel()</code> 的顺序需要一致。采用 Parcelable 方式进行序列化，获取对象的方法变为 <code>getParcelableExtra()</code>。</p>
</blockquote>
</li>
</ol>
<h3 id="实用技巧"><a href="#实用技巧" class="headerlink" title="实用技巧"></a>实用技巧</h3><ol>
<li><p>知晓当前是在哪一个活动</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(@Nullable Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">    Log.d(<span class="string">"onCreate: "</span>, getClass().getSimpleName());</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>创建一个 BaseActivity，然后让其他 Activity 继承 BaseAcitivty，那么当启动活动时就会 logcat 中打印出相应的信息。</p>
</blockquote>
</li>
<li><p>随时随地退出程序</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ActivityCollector</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="keyword">private</span> <span class="keyword">static</span> List&lt;Activity&gt; activities = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">addActivity</span><span class="params">(Activity activity)</span> </span>&#123;</div><div class="line">    activities.add(activity);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">removeActivity</span><span class="params">(Activity activity)</span> </span>&#123;</div><div class="line">    activities.remove(activity);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">finishAll</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">for</span> (Activity activity : activities) &#123;</div><div class="line">      <span class="keyword">if</span> (!activity.isFinishing()) &#123;</div><div class="line">        activity.finish();</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>创建一个活动的管理类，在活动的 <code>onCreate()</code> 中调用 <code>addActivity()</code> 方法保存创建的活动，在 <code>onDestroy()</code> 中调用 <code>removeActivity()</code> 方法移除马上要销毁的活动。如果需要随时随地退出程序则只需要调用 <code>finishAll()</code>。</p>
</blockquote>
</li>
<li><p>启动活动的最佳写法</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">actionStart</span><span class="params">(Context context, String param1, String param2)</span> </span>&#123;</div><div class="line">  Intent intent = <span class="keyword">new</span> Intent(context, SecondActivity.class);</div><div class="line">  intent.putExtra(<span class="string">"param1"</span>, param1);</div><div class="line">  intent.putExtra(<span class="string">"param2"</span>, param2);</div><div class="line">  context.startActivity(intent);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>当活动中需要用到一些参数之时，可以采用如上方式去启动活动。那么当其他人来启动活动的时候将会非常方便。</p>
</blockquote>
</li>
</ol>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Activity&quot;&gt;&lt;a href=&quot;#Activity&quot; class=&quot;headerlink&quot; title=&quot;Activity&quot;&gt;&lt;/a&gt;Activity&lt;/h3&gt;&lt;p&gt;主要内容：&lt;br&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/-u4OYyZZzSb8/WQh2MXvWjiI/AAAAAAAAAOA/NifbHzkgMfc5NvV-goL-QS_dR3Jt2qgLACHM/I/Activity&quot; alt=&quot;Activity导图&quot;&gt;
    
    </summary>
    
      <category term="Android 学习" scheme="http://www.rookieyang.cn/categories/Android-%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Android" scheme="http://www.rookieyang.cn/tags/Android/"/>
    
      <category term="总结" scheme="http://www.rookieyang.cn/tags/%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>Python 下 json 模块</title>
    <link href="http://www.rookieyang.cn/2017/04/20/Python%E4%B8%8BJson%E6%A8%A1%E5%9D%97/"/>
    <id>http://www.rookieyang.cn/2017/04/20/Python下Json模块/</id>
    <published>2017-04-20T12:12:47.000Z</published>
    <updated>2017-04-20T12:28:01.000Z</updated>
    
    <content type="html"><![CDATA[<p>Python 下的 json 模块主要有 4 个函数：<a id="more"></a></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#dict 转成 str </span></div><div class="line">json.dump()</div><div class="line"><span class="comment">#将 json 数据保存到文件</span></div><div class="line">json.dumps()</div><div class="line"><span class="comment">#str 转成 dict </span></div><div class="line">json.load()</div><div class="line"><span class="comment">#从文件中读取 json 数据</span></div><div class="line">json.loads()</div></pre></td></tr></table></figure>
<p>将 Json 数据写入文件：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">try</span>:</div><div class="line">  data_result_file = <span class="string">"data_result.json"</span></div><div class="line">  <span class="keyword">with</span> open(data_result_file, <span class="string">'w'</span>) <span class="keyword">as</span> f:</div><div class="line">      data_json = json.loads(results.data)</div><div class="line">      json.dump(data_json, f, indent=<span class="number">4</span>)</div><div class="line"><span class="keyword">except</span> IOError:</div><div class="line">  print(<span class="string">"文件不存在"</span>)</div></pre></td></tr></table></figure>
<p>由于 <code>json.dump()</code> 产生的是 <code>str</code> 对象，不是 <code>bytes</code> 对象，所以写入时文件权限不能设置为 <code>wb</code>，否则会出现 <code>TypeError: a bytes-like object is required, not ‘str&#39;</code>。</p>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Python 下的 json 模块主要有 4 个函数：
    
    </summary>
    
      <category term="Python 学习" scheme="http://www.rookieyang.cn/categories/Python-%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="问题记录" scheme="http://www.rookieyang.cn/tags/%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/"/>
    
      <category term="Python" scheme="http://www.rookieyang.cn/tags/Python/"/>
    
      <category term="Json" scheme="http://www.rookieyang.cn/tags/Json/"/>
    
  </entry>
  
  <entry>
    <title>BootStrap-FileInput 的基本使用</title>
    <link href="http://www.rookieyang.cn/2017/04/20/bootstrap-fileinput%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"/>
    <id>http://www.rookieyang.cn/2017/04/20/bootstrap-fileinput的基本使用/</id>
    <published>2017-04-20T11:13:02.000Z</published>
    <updated>2017-04-20T12:11:43.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="安装与引入"><a href="#安装与引入" class="headerlink" title="安装与引入"></a>安装与引入</h4><p>在引入 File Input 之前首先需要下载下列文件：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">bootstrap-fileinput/css/fileinput.min.css</div><div class="line">bootstrap-fileinput/js/fileinput_locale_zh.js</div><div class="line">bootstrap-fileinput/js/fileinput.min.js</div></pre></td></tr></table></figure>
<p>上述文件可以在 <a href="https://github.com/kartik-v/bootstrap-fileinput" target="_blank" rel="external">File Input 的项目地址</a>找到。<a id="more"></a><br>在下载好之后就需要添加如下代码进行引入：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;link href=<span class="string">"/static/css/fileinput.min.css"</span> rel=<span class="string">"stylesheet"</span>&gt;</div><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"/static/js/fileinput.min.js"</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div><div class="line">&lt;script src=<span class="string">"/static/js/fileinput-zh.js"</span> type=<span class="string">"text/javascript"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div></pre></td></tr></table></figure>
<h4 id="File-Input-的使用"><a href="#File-Input-的使用" class="headerlink" title="File Input 的使用"></a>File Input 的使用</h4><p>首先需要在页面添加一个 File Input 控件：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"form-group"</span>&gt;</div><div class="line">    <span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"import_file"</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">multiple</span> <span class="attr">class</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"userfile"</span></span></span></div><div class="line">           <span class="attr">data-overwrite-initial</span>=<span class="string">"false"</span> <span class="attr">data-min-file-count</span>=<span class="string">"1"</span>&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li><code>data-min-file-count</code> 可以设定最少上传的文件数</li>
</ul>
<p>在添加完之后就需要对控件进行初始化：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">"#import_file"</span>).fileinput(&#123;</div><div class="line">    <span class="attr">uploadUrl</span>: <span class="string">"/upload_file"</span>, <span class="comment">//设置上传的地址</span></div><div class="line">    allowedFileExtensions: [<span class="string">'xls'</span>, <span class="string">'xlsx'</span>], <span class="comment">//设置允许上传的文件格式</span></div><div class="line">    overwriteInitial: <span class="literal">false</span>,</div><div class="line">    <span class="attr">language</span>: <span class="string">'zh'</span>, <span class="comment">//设置语言</span></div><div class="line">    maxFileSize: <span class="number">6000</span>,</div><div class="line">    <span class="attr">maxFilesNum</span>: <span class="number">10</span>, <span class="comment">//允许上传的最大文件数</span></div><div class="line">    uploadAsync: <span class="literal">true</span>, <span class="comment">//默认异步上传</span></div><div class="line">    <span class="comment">//allowedFileTypes: ['image', 'video', 'flash'],</span></div><div class="line">    allowedPreviewTypes: <span class="literal">null</span>,</div><div class="line">    <span class="attr">previewFileIconSettings</span>: &#123;</div><div class="line">        <span class="string">'xls'</span>: <span class="string">'&lt;i class="fa fa-file-excel-o text-success"&gt;&lt;/i&gt;'</span></div><div class="line">    &#125;, <span class="comment">//预览文件的图标设置</span></div><div class="line">    previewFileExtSettings: &#123;</div><div class="line">        <span class="string">'xls'</span>: <span class="function"><span class="keyword">function</span> (<span class="params">ext</span>) </span>&#123;</div><div class="line">            <span class="keyword">return</span> ext.match(<span class="regexp">/(xls|xlsx)$/i</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;, <span class="comment">//xls 和 xlsx 使用同一预览</span></div><div class="line">    slugCallback: <span class="function"><span class="keyword">function</span> (<span class="params">filename</span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> filename.replace(<span class="string">'('</span>, <span class="string">'_'</span>).replace(<span class="string">']'</span>, <span class="string">'_'</span>);</div><div class="line">    &#125; <span class="comment">//使用回调功能将文件名转换成处理之后的文件名。</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>后台处理：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@app.route('/upload_file', methods=['POST'])</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">upload_file</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        file = request.files.get(<span class="string">'userfile'</span>)</div><div class="line">        save_file_name = file.filename</div><div class="line">        file.save(save_file_name)</div><div class="line">    <span class="keyword">except</span> KeyError:</div><div class="line">        <span class="keyword">return</span> []</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">return</span> jsonify(&#123;<span class="string">'info'</span>: <span class="string">"上传成功"</span>&#125;)</div></pre></td></tr></table></figure>
<ul>
<li>这里对上传的 Excel 文件进行了保存，返回上传成功的信息。</li>
</ul>
<h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h4><ol>
<li>在对 Excel 文件进行预览图标设置之前，如果通过按钮选择文件而不是拖拽，则会出现由预览文件所导致卡顿，在将 Excel 文件的预览设置为图标之后解决。</li>
<li>从后端直接返回字符串出现错误，改为返回 Json 格式数据后解决。</li>
</ol>
<hr>
<h4 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h4><ol>
<li><a href="http://plugins.krajee.com/file-input" target="_blank" rel="external">File Input 开发文档</a></li>
<li><a href="http://plugins.krajee.com/file-basic-usage-demo" target="_blank" rel="external">File Input Demo</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;安装与引入&quot;&gt;&lt;a href=&quot;#安装与引入&quot; class=&quot;headerlink&quot; title=&quot;安装与引入&quot;&gt;&lt;/a&gt;安装与引入&lt;/h4&gt;&lt;p&gt;在引入 File Input 之前首先需要下载下列文件：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;bootstrap-fileinput/css/fileinput.min.css&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;bootstrap-fileinput/js/fileinput_locale_zh.js&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;bootstrap-fileinput/js/fileinput.min.js&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;上述文件可以在 &lt;a href=&quot;https://github.com/kartik-v/bootstrap-fileinput&quot;&gt;File Input 的项目地址&lt;/a&gt;找到。
    
    </summary>
    
      <category term="Android 学习" scheme="http://www.rookieyang.cn/categories/Android-%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="问题记录" scheme="http://www.rookieyang.cn/tags/%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/"/>
    
      <category term="BootStrap" scheme="http://www.rookieyang.cn/tags/BootStrap/"/>
    
      <category term="前端" scheme="http://www.rookieyang.cn/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>Android 自定义 View 和 ViewGroup 简要总结</title>
    <link href="http://www.rookieyang.cn/2017/04/17/Android%E8%87%AA%E5%AE%9A%E4%B9%89View%E5%92%8CViewGroup%E7%AE%80%E8%A6%81%E6%80%BB%E7%BB%93/"/>
    <id>http://www.rookieyang.cn/2017/04/17/Android自定义View和ViewGroup简要总结/</id>
    <published>2017-04-17T11:47:43.000Z</published>
    <updated>2017-04-17T13:57:32.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="主要方法及作用"><a href="#主要方法及作用" class="headerlink" title="主要方法及作用"></a>主要方法及作用</h4><ol>
<li>自定义 ViewGroup 主要涉及的方法如下：<ul>
<li><code>onMeasure()</code> 计算 childView 的测量值以及模式，以及设置自己的宽和高。</li>
<li><code>onLayout()</code> 对所有 childView 进行定位。</li>
</ul>
</li>
<li>自定义 View 主要涉及的方法如下：<ul>
<li><code>onMeasure()</code> 测量 View 的宽和高。</li>
<li><code>onDraw()</code> 将 View 绘制到屏幕上。</li>
</ul>
</li>
</ol>
<a id="more"></a>
<h4 id="测量模式"><a href="#测量模式" class="headerlink" title="测量模式"></a>测量模式</h4><p><code>onMeasure()</code> 过程和测量模式相关，而测量模式分为三种：</p>
<ol>
<li>UNSPECIFIED：父容器不对 View 有任何限制，要多大给多大。这种情况一般用于系统内部。</li>
<li>EXACTLY：父容器已经检测出 View 所需要的精确大小，这个时候 View 的最终大小就是 SpecSize 所指定的值。它对应 LayoutParams 中的 mactch_parent 和具体数值这两种模式。</li>
<li>AT_MOST 父容器指定了一个可用大小即 SpecSize，View 的大小不能大于这个值，具体值看不同 View 的具体实现。它对应于 LayoutParams 中的 wrap_content。</li>
</ol>
<h4 id="LayoutParams-和-generateLayoutParams"><a href="#LayoutParams-和-generateLayoutParams" class="headerlink" title="LayoutParams 和 generateLayoutParams"></a>LayoutParams 和 generateLayoutParams</h4><p>LayoutParams的官方文档解释如下：</p>
<blockquote>
<p>1.LayoutParams are used by views to tell their parents how they want to be laid out.<br>– LayoutParams 是 View 用来告诉它的父控件如何放置自己的。</p>
<p>2.The base LayoutParams class just describes how big the view wants to be for both width and height.<br>– 基类 LayoutParams（也就是 ViewGroup.LayoutParams）仅仅描述了这个 View 想要的宽度和高度。</p>
<p>3.There are subclasses of LayoutParams for different subclasses of ViewGroup.<br>– 不同 ViewGroup 的继承类对应着不同的 ViewGroup.LayoutParams 的子类。</p>
</blockquote>
<p>generateLayoutParams官方文档解释如下：</p>
<blockquote>
<p>Returns a new set of layout parameters based on the supplied attributes set.<br>– 根据提供的属性集返回一组新的布局参数。</p>
</blockquote>
<p>在 <code>addView()</code> 执行的过程中，如果 <code>checkLayoutParams()</code> 检测到传递过来的 <code>LayoutParams</code> 不是对应布局的 LayoutParam，则会通过 <code>generateLayoutParams()</code> 根据你传递的 LayoutParams 的属性构造一个对应布局的 LayoutParams。</p>
<hr>
<h4 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h4><ol>
<li><a href="http://blog.csdn.net/lmj623565791/article/details/38339817/" target="_blank" rel="external"> Android 手把手教您自定义ViewGroup（一）</a></li>
<li><a href="http://www.jianshu.com/p/2a938e598ec8" target="_blank" rel="external">自定义控件知识储备-LayoutParams的那些事</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;主要方法及作用&quot;&gt;&lt;a href=&quot;#主要方法及作用&quot; class=&quot;headerlink&quot; title=&quot;主要方法及作用&quot;&gt;&lt;/a&gt;主要方法及作用&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;自定义 ViewGroup 主要涉及的方法如下：&lt;ul&gt;
&lt;li&gt;&lt;code&gt;onMeasure()&lt;/code&gt; 计算 childView 的测量值以及模式，以及设置自己的宽和高。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;onLayout()&lt;/code&gt; 对所有 childView 进行定位。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;自定义 View 主要涉及的方法如下：&lt;ul&gt;
&lt;li&gt;&lt;code&gt;onMeasure()&lt;/code&gt; 测量 View 的宽和高。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;onDraw()&lt;/code&gt; 将 View 绘制到屏幕上。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="Android 学习" scheme="http://www.rookieyang.cn/categories/Android-%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Android" scheme="http://www.rookieyang.cn/tags/Android/"/>
    
      <category term="问题记录" scheme="http://www.rookieyang.cn/tags/%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>Android 中 View 的构造函数浅解</title>
    <link href="http://www.rookieyang.cn/2017/04/17/Android%E4%B8%ADView%E7%9A%84%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E6%B5%85%E8%A7%A3/"/>
    <id>http://www.rookieyang.cn/2017/04/17/Android中View的构造函数浅解/</id>
    <published>2017-04-17T02:51:23.000Z</published>
    <updated>2017-04-17T11:45:08.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="构造函数的调用时机"><a href="#构造函数的调用时机" class="headerlink" title="构造函数的调用时机"></a>构造函数的调用时机</h4><p>在自定义 View 的过程当中，不可避免的需要接触到 View 的构造函数，目前 View 具有四个构造函数，分别如下：<a id="more"></a></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">View</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">      /...../</div><div class="line">    &#125;</div><div class="line">    </div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">View</span><span class="params">(Context context, @Nullable AttributeSet attrs)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>(context, attrs, <span class="number">0</span>);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">View</span><span class="params">(Context context, @Nullable AttributeSet attrs, <span class="keyword">int</span> defStyleAttr)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>(context, attrs, defStyleAttr, <span class="number">0</span>);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">View</span><span class="params">(Context context, @Nullable AttributeSet attrs, <span class="keyword">int</span> defStyleAttr, <span class="keyword">int</span> defStyleRes)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>(context);</div><div class="line">        /...../</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<ul>
<li><code>defStyleAttr</code> 当前主题中的一个属性，其中包含对为视图提供默认值的样式资源的引用。 可以为0，不寻找默认值。</li>
<li><code>defStyleRes</code> 为视图提供默认值的样式资源的资源标识符，仅在 <code>defStyleAttr</code> 为0或在主题中找不到时使用。可以为0，不寻找默认值。</li>
</ul>
<p>第一个构造函数源码的解释如下：</p>
<blockquote>
<p>Simple constructor to use when creating a view from code.</p>
</blockquote>
<p>也就是说当在代码中创建 View 的时候会调用第一个构造函数。</p>
<p>第二个构造函数的源码解释如下：</p>
<blockquote>
<p>Constructor that is called when inflating a view from XML. This is called when a view is being constructed from an XML file, supplying attributes that were specified in the XML file. This version uses a default style of 0, so the only attribute values applied are those in the Context’s Theme and the given AttributeSet.</p>
</blockquote>
<p>也就是说当在 XML 文件中插入 View 的时候会调用第二个构造函数，并且会应用 Context 的主题以及在 XML 中给定的属性值。</p>
<p>第三个和第四个构造函数的源码解释分别如下：</p>
<blockquote>
<p>Perform inflation from XML and apply a class-specific base style from a theme attribute.</p>
<blockquote>
<p>This constructor of View allows subclasses to use their own base style when they are inflating.</p>
</blockquote>
<p>For example, a Button class’s constructor would call this version of the super class constructor and supply <code>R.attr.buttonStyle</code> for <var>defStyleAttr</var>; this (in particular its background) as well as the Button class’s attributes.</p>
</blockquote>
<hr>
<blockquote>
<p>Perform inflation from XML and apply a class-specific base style from a theme attribute or style resource. </p>
<blockquote>
<p>This constructor of View allows subclasses to use their own base style when they are inflating.</p>
</blockquote>
</blockquote>
<p>也就是说两个构造函数共同的作用是允许 View 应用自己的基础 style，那么当我们需要为 View 设置 style 的时候就可以选择去调用这两个构造函数当中的一个，调用方式一般如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">Button</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</div><div class="line">   <span class="keyword">this</span>(context, attrs, com.android.internal.R.attr.buttonStyle);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">Button</span><span class="params">(Context context, AttributeSet attrs, <span class="keyword">int</span> defStyleAttr)</span> </span>&#123;</div><div class="line">   <span class="keyword">this</span>(context, attrs, defStyleAttr, <span class="number">0</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="defStyleAttr-和-defStyleRes-的联系"><a href="#defStyleAttr-和-defStyleRes-的联系" class="headerlink" title="defStyleAttr 和 defStyleRes 的联系"></a>defStyleAttr 和 defStyleRes 的联系</h4><p>接下来的问题是这两者的区别在哪里？由于这两者都用于设置 style，而 style 里面是属性的集合，所以这里需要先了解 View 设置属性的方式，一般来说有如下五种方式：</p>
<ol>
<li>XML 中直接声明相关属性值</li>
<li>XML 中 引入 style</li>
<li>defStyleAttr</li>
<li>defStyleRes</li>
<li>theme中直接指定</li>
</ol>
<p>既然有五种方式，那么当同时应用的时候就涉及到了优先级的问题。为了了解优先级的问题，首先我们需要在 <code>attrs.xml</code> 文件中写入如下代码：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">declare-styleable</span> <span class="attr">name</span>=<span class="string">"DefAttrs"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"attr_1"</span> <span class="attr">format</span>=<span class="string">"string"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"attr_2"</span> <span class="attr">format</span>=<span class="string">"string"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"attr_3"</span> <span class="attr">format</span>=<span class="string">"string"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"attr_4"</span> <span class="attr">format</span>=<span class="string">"string"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">declare-styleable</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"defStyleAttr"</span> <span class="attr">format</span>=<span class="string">"reference"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>这里定义了四个格式为 string 的属性用于测试，定义了一个名为 <code>defStyleAttr</code> 引用。</li>
<li><p>通过 <code>declare-styleable</code> 可以为每个属性在 <code>R</code> 文件里自动生成一个 int[]，这样就可以很方便的用 <code>R.styleable.*</code> 来进行使用，当然定义的属性也可以不放在 <code>declare-styleable</code> 中，但是使用的时候就需要通过如下代码：</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span>[] attrs = &#123;R.attr.attr_1,R.attr_2&#125;;</div><div class="line">TypedArray typedArray = context.obtainStyledAttributes(set,attrs);</div></pre></td></tr></table></figure>
</li>
</ul>
<p>在创建了自定义的属性之后，还需要创建一些 style，在 <code>style.xml</code> 文件中写入如下代码：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="comment">&lt;!-- Base application theme. --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"AppTheme"</span> <span class="attr">parent</span>=<span class="string">"Theme.AppCompat.Light.DarkActionBar"</span>&gt;</span><span class="xml"></span></div><div class="line">    <span class="comment">&lt;!-- Customize your theme here. --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"colorPrimary"</span>&gt;</span>@color/colorPrimary<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"colorPrimaryDark"</span>&gt;</span>@color/colorPrimaryDark<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"colorAccent"</span>&gt;</span>@color/colorAccent<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!--Theme 直接指定--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"attr_1"</span>&gt;</span>theme_one<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"attr_2"</span>&gt;</span>theme_two<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"attr_3"</span>&gt;</span>theme_three<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"attr_4"</span>&gt;</span>theme_four<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!--defStyleAttr--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"defStyleAttr"</span>&gt;</span>@style/def_style_attr<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="comment">&lt;!--xml 中引入的 style --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"xml_style"</span>&gt;</span><span class="xml"></span></div><div class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"attr_1"</span>&gt;</span>xml_style_one<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"attr_2"</span>&gt;</span>xml_style_two<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="comment">&lt;!--defStyleAttr 引用的 style--&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"def_style_attr"</span>&gt;</span><span class="xml"></span></div><div class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"attr_1"</span>&gt;</span>def_style_one<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"attr_2"</span>&gt;</span>def_style_two<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"attr_3"</span>&gt;</span>def_style_three<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="comment">&lt;!--defStyleRes--&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"def_style_res"</span>&gt;</span><span class="xml"></span></div><div class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"attr_1"</span>&gt;</span>def_style_res_one<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"attr_2"</span>&gt;</span>def_style_res_two<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"attr_3"</span>&gt;</span>def_style_res_three<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"attr_4"</span>&gt;</span>def_style_res_four<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></div></pre></td></tr></table></figure>
<p>上述代码添加了四种 style，对应为 View 设置属性的方式中的后四种，在添加了 style 之后，我们还需要应用 style，所以需要先创建一个如下的自定义 View：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyView</span> <span class="keyword">extends</span> <span class="title">TextView</span></span>&#123;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="title">MyView</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>(context);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="title">MyView</span><span class="params">(Context context, @Nullable AttributeSet attrs)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>(context, attrs, R.attr.defStyleAttr);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="title">MyView</span><span class="params">(Context context, @Nullable AttributeSet attrs, <span class="keyword">int</span> defStyleAttr)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>(context, attrs, defStyleAttr,R.attr.defStyleAttr);</div><div class="line">    parse(context, attrs, defStyleAttr);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="meta">@TargetApi</span>(VERSION_CODES.LOLLIPOP)</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="title">MyView</span><span class="params">(Context context, @Nullable AttributeSet attrs, <span class="keyword">int</span> defStyleAttr, <span class="keyword">int</span> defStyleRes)</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>(context, attrs, defStyleAttr, defStyleRes);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">parse</span><span class="params">(Context context, AttributeSet attrs, <span class="keyword">int</span> defStyleAttr)</span> </span>&#123;</div><div class="line">    TypedArray typedArray = context.obtainStyledAttributes(attrs, R.styleable.DefAttrs, defStyleAttr, R.style.def_style_res);</div><div class="line">    String one = typedArray.getString(R.styleable.DefAttrs_attr_1);</div><div class="line">    String two = typedArray.getString(R.styleable.DefAttrs_attr_2);</div><div class="line">    String three = typedArray.getString(R.styleable.DefAttrs_attr_3);</div><div class="line">    String four = typedArray.getString(R.styleable.DefAttrs_attr_4);</div><div class="line"></div><div class="line">    log(<span class="string">"one = "</span> + one);</div><div class="line">    log(<span class="string">"two = "</span> + two);</div><div class="line">    log(<span class="string">"three = "</span> + three);</div><div class="line">    log(<span class="string">"four = "</span> + four);</div><div class="line"></div><div class="line">    typedArray.recycle();</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">log</span><span class="params">(String msg)</span> </span>&#123;</div><div class="line">    Log.i(<span class="string">"MyView"</span>, msg);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>第二个构造函数中显式调用了第三个构造函数，并设置 defStyleAttr 参数值为 <code>R.attr.defStyleAttr</code>。</li>
<li><code>parse()</code> 获取四个属性值并进行打印。</li>
</ul>
<p>创建完自定义 View 之后，现在需要在 XML 文件中添加自定义的View：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">android.support.constraint.ConstraintLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">  <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></div><div class="line">  <span class="attr">xmlns:test</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></div><div class="line">  <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">  <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">  <span class="attr">tools:context</span>=<span class="string">"com.rookieyang.test.MainActivity"</span>&gt;</div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">com.rookieyang.test.MyView</span></span></div><div class="line">    <span class="attr">test:attr_1</span>=<span class="string">"xml_attr_attr1"</span></div><div class="line">    <span class="attr">style</span>=<span class="string">"@style/xml_style"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span> /&gt;</div><div class="line"></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">android.support.constraint.ConstraintLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li><code>test:attr_1=&quot;xml_attr_attr1&quot;</code> XML 中直接指定 attr_1 属性值。</li>
<li><code>style=&quot;@style/xml_style&quot;</code> XML 中引入 style。</li>
</ul>
<h4 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h4><p>在完成上述步骤之后就可以运行，运行之后的输出如下：<br><img src="http://i.imgur.com/WqaWtza.png" alt="运行结果一"><br>上述代码中，XML 中直接声明 <code>attr_1</code> 属性值为 xml_attr_attr1，XML 中 引入的 style  中给  <code>attr_1，attr_2</code> 赋值为 xml_style_one，xml_style_two，defStyleAttr 给 <code>attr_1，attr_2，attr_3</code> 赋值为 <code>def_style_one，def_style_two，def_style_three</code>，defStyleRes 和 Theme 也分别为四个属性进行了赋值，而根据输出的结果在优先级上我们很容易得到以下结论：</p>
<blockquote>
<p>XML 中直接声明相关属性值 &gt; XML 中 引入 style &gt; defStyleAttr &gt; theme中直接指定</p>
<p>defStyleAttr &gt; defStyleRes</p>
</blockquote>
<p>从第一部分可以知道由于 defStyleAttr 的存在，defStyleRes 没有生效，所以 defStyleRes 和 theme中直接指定的优先级还不能进行判断，这个时候需要将 <code>style.xml</code> 文件中的下列代码进行注释：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;item name="defStyleAttr"&gt;@style/def_style_attr&lt;/item&gt;</div></pre></td></tr></table></figure>
<p>或者将自定义 View 中调用第三个构造函数的代码做如下修改：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//将第三个参数更改为 0</span></div><div class="line"><span class="keyword">this</span>(context, attrs, defStyleAttr,<span class="number">0</span>);</div></pre></td></tr></table></figure>
<p>修改之后运行能得到如下输出：<br><img src="http://i.imgur.com/Gp9V1qi.png" alt="运行结果二"><br>可以看到当 defStyleAttr 不存在后 defStyleRes 开始生效，并且优先级要高于theme中直接指定。<br>所以最终结论如下：</p>
<blockquote>
<p>XML 中直接声明相关属性值 &gt; XML 中 引入 style &gt; defStyleAttr &gt; defStyleRes &gt; theme中直接指定<br>仅在 <code>defStyleAttr</code> 为0或在主题中找不到时，<code>defStyleRes</code> 生效。</p>
</blockquote>
<hr>
<h4 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h4><ol>
<li><a href="http://www.jianshu.com/p/08be3c08c576" target="_blank" rel="external">深度解析View构造函数中的参数defStyleAttr</a></li>
<li><a href="http://blog.csdn.net/zhao123h/article/details/52210732" target="_blank" rel="external">Android View 四个构造函数详解</a></li>
<li><a href="http://www.jianshu.com/p/61b79e7f88fc" target="_blank" rel="external">深入理解Android 自定义attr Style styleable以及其应用</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;构造函数的调用时机&quot;&gt;&lt;a href=&quot;#构造函数的调用时机&quot; class=&quot;headerlink&quot; title=&quot;构造函数的调用时机&quot;&gt;&lt;/a&gt;构造函数的调用时机&lt;/h4&gt;&lt;p&gt;在自定义 View 的过程当中，不可避免的需要接触到 View 的构造函数，目前 View 具有四个构造函数，分别如下：
    
    </summary>
    
      <category term="Android 学习" scheme="http://www.rookieyang.cn/categories/Android-%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Android" scheme="http://www.rookieyang.cn/tags/Android/"/>
    
      <category term="问题记录" scheme="http://www.rookieyang.cn/tags/%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>getWidth() 方法和 getMeasureWidth() 方法的区别</title>
    <link href="http://www.rookieyang.cn/2017/04/16/getWidth()%E6%96%B9%E6%B3%95%E5%92%8CgetMeasureWidth()%E6%96%B9%E6%B3%95%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>http://www.rookieyang.cn/2017/04/16/getWidth()方法和getMeasureWidth()方法的区别/</id>
    <published>2017-04-16T02:05:07.000Z</published>
    <updated>2017-04-16T02:20:20.000Z</updated>
    
    <content type="html"><![CDATA[<p>首先 <code>getMeasureWidth()</code> 方法在 <code>measure()</code> 过程结束后就可以获取到了，而 <code>getWidth()</code> 方法要在 <code>layout()</code> 过程结束后才能获取到。另外  <code>getMeasureWidth()</code> 方法中的值是通过 <code>setMeasuredDimension()</code> 方法来进行设置的，而 <code>getWidth()</code> 方法中的值则是通过视图右边的坐标减去左边的坐标计算出来的。<a id="more"></a></p>
<p>观察 SimpleLayout 中 <code>onLayout()</code> 方法的代码，这里给子视图的 <code>layout()</code> 方法传入的四个参数分别是 0，0，childView.getMeasuredWidth() 和 childView.getMeasuredHeight() ，因此 <code>getWidth()</code> 方法得到的值就是 childView.getMeasuredWidth() - 0 = childView.getMeasuredWidth()，所以此时 <code>getWidth()</code> 方法和 <code>getMeasuredWidth()</code> 得到的值就是相同的。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span>  </div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onLayout</span><span class="params">(<span class="keyword">boolean</span> changed, <span class="keyword">int</span> l, <span class="keyword">int</span> t, <span class="keyword">int</span> r, <span class="keyword">int</span> b)</span> </span>&#123;  </div><div class="line">   <span class="keyword">if</span> (getChildCount() &gt; <span class="number">0</span>) &#123;  </div><div class="line">       View childView = getChildAt(<span class="number">0</span>);  </div><div class="line">       childView.layout(<span class="number">0</span>, <span class="number">0</span>, childView.getMeasuredWidth(), childView.getMeasuredHeight());  </div><div class="line">   &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>但如果你将 <code>onLayout()</code> 方法中的代码进行如下修改：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span>  </div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onLayout</span><span class="params">(<span class="keyword">boolean</span> changed, <span class="keyword">int</span> l, <span class="keyword">int</span> t, <span class="keyword">int</span> r, <span class="keyword">int</span> b)</span> </span>&#123;  </div><div class="line">    <span class="keyword">if</span> (getChildCount() &gt; <span class="number">0</span>) &#123;  </div><div class="line">        View childView = getChildAt(<span class="number">0</span>);  </div><div class="line">        childView.layout(<span class="number">0</span>, <span class="number">0</span>, <span class="number">200</span>, <span class="number">200</span>);  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这样 <code>getWidth()</code> 方法得到的值就是 200 - 0 = 200，不会再和 <code>getMeasuredWidth()</code> 的值相同了。当然这种做法充分不尊重 <code>measure()</code> 过程计算出的结果，通常情况下是不推荐这么写的。 <code>getHeight()</code> 与 <code>getMeasureHeight()</code> 方法之间的关系同上，就不再重复分析了。</p>
<hr>
<h4 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h4><p><a href="http://blog.csdn.net/guolin_blog/article/details/16330267" target="_blank" rel="external">Android视图绘制流程完全解析，带你一步步深入了解View(二)</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;首先 &lt;code&gt;getMeasureWidth()&lt;/code&gt; 方法在 &lt;code&gt;measure()&lt;/code&gt; 过程结束后就可以获取到了，而 &lt;code&gt;getWidth()&lt;/code&gt; 方法要在 &lt;code&gt;layout()&lt;/code&gt; 过程结束后才能获取到。另外  &lt;code&gt;getMeasureWidth()&lt;/code&gt; 方法中的值是通过 &lt;code&gt;setMeasuredDimension()&lt;/code&gt; 方法来进行设置的，而 &lt;code&gt;getWidth()&lt;/code&gt; 方法中的值则是通过视图右边的坐标减去左边的坐标计算出来的。
    
    </summary>
    
      <category term="Android 学习" scheme="http://www.rookieyang.cn/categories/Android-%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Android" scheme="http://www.rookieyang.cn/tags/Android/"/>
    
      <category term="问题记录" scheme="http://www.rookieyang.cn/tags/%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>d3.js 绘制柱形图</title>
    <link href="http://www.rookieyang.cn/2017/04/14/d3-js%E7%BB%98%E5%88%B6%E6%9F%B1%E5%BD%A2%E5%9B%BE/"/>
    <id>http://www.rookieyang.cn/2017/04/14/d3-js绘制柱形图/</id>
    <published>2017-04-14T15:35:28.000Z</published>
    <updated>2017-04-15T07:13:38.000Z</updated>
    
    <content type="html"><![CDATA[<p>在<a href="/2017/04/13/d3-js绘制力导向图/" title="d3.js 绘制力导向图">d3.js 绘制力导向图</a>中已经说明了如何绘制力导向图以及数据更新。本次将说明如何绘制带坐标轴的柱形图。<a id="more"></a></p>
<h4 id="确定初始数据"><a href="#确定初始数据" class="headerlink" title="确定初始数据"></a>确定初始数据</h4><p>初始数据如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> nodes = [&#123;<span class="string">'label'</span>: <span class="string">'Sort'</span>, <span class="string">'title'</span>: <span class="string">'lslamic'</span>&#125;, &#123;</div><div class="line">        <span class="string">'label'</span>: <span class="string">'GOODS'</span>,</div><div class="line">        <span class="string">'title'</span>: <span class="string">'VINTAGE OLD HAND MADE BEAUTY SILVER BROOCH PIN RED ENAMEL LEAF SIAM STERLING'</span></div><div class="line">    &#125;, &#123;<span class="string">'label'</span>: <span class="string">'Website'</span>, <span class="string">'title'</span>: <span class="string">'ebay'</span>&#125;, &#123;<span class="string">'label'</span>: <span class="string">'Sort'</span>, <span class="string">'title'</span>: <span class="string">'Antiques'</span>&#125;, &#123;</div><div class="line">        <span class="string">'label'</span>: <span class="string">'Sort'</span>,</div><div class="line">        <span class="string">'title'</span>: <span class="string">'Baby'</span></div><div class="line">    &#125;, &#123;<span class="string">'label'</span>: <span class="string">'Sort'</span>, <span class="string">'title'</span>: <span class="string">'Books'</span>&#125;, &#123;<span class="string">'label'</span>: <span class="string">'Sort'</span>, <span class="string">'title'</span>: <span class="string">'Business &amp; Industrial'</span>&#125;, &#123;</div><div class="line">        <span class="string">'label'</span>: <span class="string">'Sort'</span>,</div><div class="line">        <span class="string">'title'</span>: <span class="string">'Cameras &amp; Photo'</span></div><div class="line">    &#125;, &#123;<span class="string">'label'</span>: <span class="string">'Sort'</span>, <span class="string">'title'</span>: <span class="string">'Cell Phones &amp; Accessories'</span>&#125;, &#123;</div><div class="line">        <span class="string">'label'</span>: <span class="string">'Sort'</span>,</div><div class="line">        <span class="string">'title'</span>: <span class="string">'Clothing, Shoes &amp; Accessories'</span></div><div class="line">    &#125;, &#123;<span class="string">'label'</span>: <span class="string">'Sort'</span>, <span class="string">'title'</span>: <span class="string">'Coins &amp; Paper Money'</span>&#125;, &#123;<span class="string">'label'</span>: <span class="string">'Sort'</span>, <span class="string">'title'</span>: <span class="string">'Collectibles'</span>&#125;, &#123;</div><div class="line">        <span class="string">'label'</span>: <span class="string">'Sort'</span>,</div><div class="line">        <span class="string">'title'</span>: <span class="string">'Computers Tablets &amp; Networking'</span></div><div class="line">    &#125;, &#123;<span class="string">'label'</span>: <span class="string">'Sort'</span>, <span class="string">'title'</span>: <span class="string">'Consumer Electronics'</span>&#125;, &#123;<span class="string">'label'</span>: <span class="string">'Sort'</span>, <span class="string">'title'</span>: <span class="string">'Crafts'</span>&#125;, &#123;</div><div class="line">        <span class="string">'label'</span>: <span class="string">'Sort'</span>,</div><div class="line">        <span class="string">'title'</span>: <span class="string">'eBay Motors'</span></div><div class="line">    &#125;, &#123;<span class="string">'label'</span>: <span class="string">'Sort'</span>, <span class="string">'title'</span>: <span class="string">'Everything Else'</span>&#125;, &#123;<span class="string">'label'</span>: <span class="string">'Sort'</span>, <span class="string">'title'</span>: <span class="string">'Health &amp; Beauty'</span>&#125;, &#123;</div><div class="line">        <span class="string">'label'</span>: <span class="string">'Sort'</span>,</div><div class="line">        <span class="string">'title'</span>: <span class="string">'Home &amp; Garden'</span></div><div class="line">    &#125;, &#123;<span class="string">'label'</span>: <span class="string">'Sort'</span>, <span class="string">'title'</span>: <span class="string">'Jewelry &amp; Watches'</span>&#125;, &#123;</div><div class="line">        <span class="string">'label'</span>: <span class="string">'Sort'</span>,</div><div class="line">        <span class="string">'title'</span>: <span class="string">'Musical Instruments &amp; Gear'</span></div><div class="line">    &#125;, &#123;<span class="string">'label'</span>: <span class="string">'Sort'</span>, <span class="string">'title'</span>: <span class="string">'Sporting Goods'</span>&#125;, &#123;<span class="string">'label'</span>: <span class="string">'Sort'</span>, <span class="string">'title'</span>: <span class="string">'Antiquities'</span>&#125;, &#123;</div><div class="line">        <span class="string">'label'</span>: <span class="string">'Sort'</span>,</div><div class="line">        <span class="string">'title'</span>: <span class="string">'Architectural &amp; Garden'</span></div><div class="line">    &#125;, &#123;<span class="string">'label'</span>: <span class="string">'Sort'</span>, <span class="string">'title'</span>: <span class="string">'Asian Antiques'</span>&#125;, &#123;<span class="string">'label'</span>: <span class="string">'Sort'</span>, <span class="string">'title'</span>: <span class="string">'Decorative Arts'</span>&#125;, &#123;</div><div class="line">        <span class="string">'label'</span>: <span class="string">'Sort'</span>,</div><div class="line">        <span class="string">'title'</span>: <span class="string">'Linens &amp; Textiles (Pre-1930)'</span></div><div class="line">    &#125;, &#123;<span class="string">'label'</span>: <span class="string">'Sort'</span>, <span class="string">'title'</span>: <span class="string">'Maritime'</span>&#125;, &#123;<span class="string">'label'</span>: <span class="string">'Sort'</span>, <span class="string">'title'</span>: <span class="string">'Periods &amp; Styles'</span>&#125;, &#123;</div><div class="line">        <span class="string">'label'</span>: <span class="string">'Sort'</span>,</div><div class="line">        <span class="string">'title'</span>: <span class="string">'Primitives'</span></div><div class="line">    &#125;, &#123;<span class="string">'label'</span>: <span class="string">'Sort'</span>, <span class="string">'title'</span>: <span class="string">'Science &amp; Medicine (Pre-1930)'</span>&#125;, &#123;<span class="string">'label'</span>: <span class="string">'Sort'</span>, <span class="string">'title'</span>: <span class="string">'Silver'</span>&#125;];</div></pre></td></tr></table></figure>
<p>初始数据中每个数据具有不同的类别，本次的目的是统计不同类别的数据出现次数并进行绘制，数据处理代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> dataset = &#123;&#125;;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; nodes.length; i++) &#123;</div><div class="line">  <span class="keyword">var</span> node = nodes[i];</div><div class="line">  dataset[node[<span class="string">'label'</span>]] = <span class="number">0</span>;</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; nodes.length; j++) &#123;</div><div class="line">      <span class="keyword">if</span> (nodes[j][<span class="string">'label'</span>] == node[<span class="string">'label'</span>])</div><div class="line">          dataset[node[<span class="string">'label'</span>]] += <span class="number">1</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> data = [];</div><div class="line"><span class="keyword">var</span> labels = [];</div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> dataset) &#123;</div><div class="line">  data.push(dataset[key]);</div><div class="line">  labels.push(key);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><code>dataset</code> 用于将数据进行分类统计。</li>
<li><code>data</code> 保存每个分类出现次数。</li>
<li><code>labels</code> 保存分类名称，作为 x 轴的刻度。</li>
</ul>
<h4 id="创建-SVG"><a href="#创建-SVG" class="headerlink" title="创建 SVG"></a>创建 SVG</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> width = <span class="number">420</span>, height = <span class="number">420</span>;</div><div class="line"><span class="keyword">var</span> svg = d3.select(<span class="string">"#graph"</span>).append(<span class="string">"svg"</span>)</div><div class="line">        .attr(<span class="string">"width"</span>, width)</div><div class="line">        .attr(<span class="string">"height"</span>, height);</div></pre></td></tr></table></figure>
<h4 id="绘制坐标轴"><a href="#绘制坐标轴" class="headerlink" title="绘制坐标轴"></a>绘制坐标轴</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> padding = &#123;<span class="attr">top</span>: <span class="number">20</span>, <span class="attr">right</span>: <span class="number">20</span>, <span class="attr">bottom</span>: <span class="number">20</span>, <span class="attr">left</span>: <span class="number">30</span>&#125;;</div><div class="line"><span class="keyword">var</span> xAxisWidth = width - <span class="number">2</span> * padding.left;</div><div class="line"><span class="keyword">var</span> yAxiWidth = height - <span class="number">2</span> * padding.bottom;</div><div class="line"><span class="keyword">var</span> xAxisScale = d3.scale.ordinal()</div><div class="line">            .domain(d3.range(labels.length))</div><div class="line">            .rangeRoundBands([<span class="number">0</span>, xAxisWidth]);</div><div class="line"></div><div class="line"><span class="keyword">var</span> yAxisScale = d3.scale.linear()</div><div class="line">    .domain([<span class="number">0</span>, d3.max(data)])</div><div class="line">    .range([yAxiWidth, <span class="number">0</span>]);</div><div class="line"></div><div class="line"><span class="keyword">var</span> xAxis = d3.svg.axis()</div><div class="line">    .scale(xAxisScale)</div><div class="line">    .orient(<span class="string">"bottom"</span>)</div><div class="line">    .tickFormat(<span class="function"><span class="keyword">function</span> (<span class="params">d</span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> labels[d];</div><div class="line">    &#125;);</div><div class="line"></div><div class="line"><span class="keyword">var</span> yAxis = d3.svg.axis()</div><div class="line">    .scale(yAxisScale)</div><div class="line">    .orient(<span class="string">"left"</span>);</div><div class="line"></div><div class="line">svg.append(<span class="string">"g"</span>)</div><div class="line">    .attr(<span class="string">"class"</span>, <span class="string">"axis"</span>)</div><div class="line">    .attr(<span class="string">"transform"</span>, <span class="string">"translate("</span> + padding.left + <span class="string">","</span> +</div><div class="line">        (height - padding.bottom) + <span class="string">")"</span>)</div><div class="line">    .call(xAxis);</div><div class="line"></div><div class="line">svg.append(<span class="string">"g"</span>)</div><div class="line">    .attr(<span class="string">"class"</span>, <span class="string">"axis"</span>)</div><div class="line">    .attr(<span class="string">"transform"</span>, <span class="string">"translate("</span> + padding.left + <span class="string">","</span> +</div><div class="line">        (height - yAxiWidth - padding.bottom) + <span class="string">")"</span>)</div><div class="line">    .call(yAxis);</div></pre></td></tr></table></figure>
<ul>
<li><code>xAxisWidth，yAxiWidth</code> 代表 x 轴和 y 轴的长度。</li>
<li><code>padding</code> x 轴和 y 轴的外边距。</li>
<li><code>xAxisScale，yAxisScale</code> x 轴和 y 轴的比例尺。</li>
<li><code>ordinal().domain()</code> 设定或获取定义域。</li>
<li><code>ordinal.rangeRoundBands(interval[, padding[, outerPadding]])</code> 接收一个连续的区间，然后根据定义域中离散值的数量将其分段，分段结果会取整。</li>
<li><code>tickFormat()</code> 用于设定文字格式的刻度。</li>
</ul>
<p>这样添加之后的坐标轴，样式会比较丑，所以还需要给坐标轴增加如下样式：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&lt;style&gt;</div><div class="line">    .axis path,</div><div class="line">    .axis line &#123;</div><div class="line">        fill: none;</div><div class="line">        stroke: black;</div><div class="line">        shape-rendering: crispEdges;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    .axis text &#123;</div><div class="line">        font-family: sans-serif;</div><div class="line">        font-size: 11px;</div><div class="line">    &#125;</div><div class="line">&lt;/style&gt;</div></pre></td></tr></table></figure>
<h4 id="绘制矩形"><a href="#绘制矩形" class="headerlink" title="绘制矩形"></a>绘制矩形</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//0.05 用于设置矩形之间的间隔，由于 rangeRoundBands 选取的范围远小于 xAxisWidth，所以矩形之间的间隔远大于 0.05，该参数未起作用。</span></div><div class="line"><span class="keyword">var</span> xScale = d3.scale.ordinal()</div><div class="line">            .domain(d3.range(labels.length))</div><div class="line">            .rangeRoundBands([<span class="number">0</span>, <span class="number">100</span>], <span class="number">0.05</span>);</div><div class="line"></div><div class="line"><span class="keyword">var</span> yScale = d3.scale.linear()</div><div class="line">    .domain([<span class="number">0</span>, d3.max(data)])</div><div class="line">    .range([<span class="number">0</span>, yAxiWidth]);</div><div class="line"></div><div class="line"><span class="keyword">var</span> rect = svg.selectAll(<span class="string">"rect"</span>)</div><div class="line">    .data(data);</div><div class="line"></div><div class="line">rect.enter()</div><div class="line">    .append(<span class="string">"rect"</span>)</div><div class="line">    .attr(<span class="string">"x"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">d, i</span>) </span>&#123;</div><div class="line">        x = xAxisWidth / (<span class="number">2</span> * labels.length) * (<span class="number">2</span> * i + <span class="number">1</span>)</div><div class="line">            - xScale.rangeBand() / <span class="number">2</span> + padding.left;</div><div class="line">        <span class="keyword">return</span> x;</div><div class="line">    &#125;)</div><div class="line">    .attr(<span class="string">"y"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">d, i</span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> height - padding.bottom - yScale(d);</div><div class="line">    &#125;)</div><div class="line">    .attr(<span class="string">"width"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">d, i</span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> xScale.rangeBand();</div><div class="line">    &#125;)</div><div class="line">    .attr(<span class="string">"height"</span>, yScale)</div><div class="line">    .attr(<span class="string">"fill"</span>, <span class="string">"steelblue"</span>);</div></pre></td></tr></table></figure>
<ul>
<li><code>xScale</code> 用于控制矩形宽度， <code>yScale</code> 用于控制矩形高度。这样做可以使得矩形的宽度和高度自由伸缩。</li>
</ul>
<h4 id="给矩形增加文字描述"><a href="#给矩形增加文字描述" class="headerlink" title="给矩形增加文字描述"></a>给矩形增加文字描述</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> text = svg.selectAll(<span class="string">"text"</span>)</div><div class="line">            .data(data);</div><div class="line">text.enter().append(<span class="string">"text"</span>)</div><div class="line">            .attr(<span class="string">"x"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">d, i</span>) </span>&#123;</div><div class="line">                x = xAxisWidth / (<span class="number">2</span> * labels.length) * (<span class="number">2</span> * i + <span class="number">1</span>)</div><div class="line">                    - xScale.rangeBand() / <span class="number">2</span> + padding.left;</div><div class="line">                <span class="keyword">return</span> x;</div><div class="line">            &#125;)</div><div class="line">            .attr(<span class="string">"y"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">d, i</span>) </span>&#123;</div><div class="line">                <span class="keyword">return</span> height - padding.bottom - yScale(d);</div><div class="line">            &#125;)</div><div class="line">            .attr(<span class="string">"dx"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">d, i</span>) </span>&#123;</div><div class="line">                <span class="keyword">return</span> xScale.rangeBand() / <span class="number">4</span>;</div><div class="line">            &#125;)</div><div class="line">            .attr(<span class="string">"dy"</span>, <span class="number">-2</span>)</div><div class="line">            .attr(<span class="string">"text-anchor"</span>, <span class="string">"begin"</span>)</div><div class="line">            .attr(<span class="string">"font-size"</span>, <span class="number">14</span>)</div><div class="line">            .attr(<span class="string">"fill"</span>, <span class="string">"#000000"</span>)</div><div class="line">            .text(<span class="function"><span class="keyword">function</span> (<span class="params">d, i</span>) </span>&#123;</div><div class="line">                <span class="keyword">return</span> d;</div><div class="line">            &#125;);</div></pre></td></tr></table></figure>
<ul>
<li><code>text</code> 元素的坐标是矩形的坐标，<code>dx，dy</code> 设定了方向上的偏移量。所以最终文字位于矩形正上方。</li>
</ul>
<h4 id="柱形图动画"><a href="#柱形图动画" class="headerlink" title="柱形图动画"></a>柱形图动画</h4><p>给柱形图增加动画，需要将代码修改为：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> rect = svg.selectAll(<span class="string">"rect"</span>)</div><div class="line">    .data(data);</div><div class="line">rect.enter()</div><div class="line">    .append(<span class="string">"rect"</span>)</div><div class="line">    .attr(<span class="string">"y"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">d, i</span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> height - padding.bottom;</div><div class="line">    &#125;)</div><div class="line">    .attr(<span class="string">"height"</span>, <span class="number">0</span>)</div><div class="line">    .attr(<span class="string">"fill"</span>, <span class="string">"red"</span>)</div><div class="line">    .transition()</div><div class="line">    .duration(<span class="number">3000</span>)</div><div class="line">    .ease(<span class="string">"bounce"</span>)</div><div class="line">    .delay(<span class="function"><span class="keyword">function</span> (<span class="params">d, i</span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">200</span> * i;</div><div class="line">    &#125;)</div><div class="line">    .attr(<span class="string">"x"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">d, i</span>) </span>&#123;</div><div class="line">        x = xAxisWidth / (<span class="number">2</span> * labels.length) * (<span class="number">2</span> * i + <span class="number">1</span>)</div><div class="line">            - xScale.rangeBand() / <span class="number">2</span> + padding.left;</div><div class="line">        <span class="keyword">return</span> x;</div><div class="line">    &#125;)</div><div class="line">    .attr(<span class="string">"y"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">d, i</span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> height - padding.bottom - yScale(d);</div><div class="line">    &#125;)</div><div class="line">    .attr(<span class="string">"width"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">d, i</span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> xScale.rangeBand();</div><div class="line">    &#125;)</div><div class="line">    .attr(<span class="string">"height"</span>, yScale)</div><div class="line">    .attr(<span class="string">"fill"</span>, <span class="string">"steelblue"</span>);</div></pre></td></tr></table></figure>
<ul>
<li>上述代码设置了两个 <code>fill</code> 属性，在添加了 <code>transition()</code> 之后，D3 会自动对颜色之间的值进行线性插值，最终在动画中会看到平滑的颜色变化。</li>
<li><code>duration()</code> 动画持续时间。</li>
<li><code>ease()</code> 指定转变方式，常用的转变方式有：<ul>
<li>linear  普通的线性变化。</li>
<li>circle  慢慢地到达变换的最终状态。  </li>
<li>elastic  带有弹跳的到达最终状态。</li>
<li>bounce  在最终状态处弹跳几次。</li>
</ul>
</li>
<li><code>delay()</code> 指定延时。</li>
</ul>
<h4 id="最终效果"><a href="#最终效果" class="headerlink" title="最终效果"></a>最终效果</h4><p><img src="http://i.imgur.com/4WazYv3.png" alt="柱形图效果"><br><img src="http://i.imgur.com/7fT9upS.png" alt="坐标轴"></p>
<hr>
<h4 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h4><p><a href="http://blog.csdn.net/lzhlzz/article/details/35985907" target="_blank" rel="external">如何让图表动起来</a><br><a href="https://github.com/d3/d3-3.x-api-reference/blob/master/Ordinal-Scales.md" target="_blank" rel="external">d3-3.x-api-reference</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在&lt;a href=&quot;/2017/04/13/d3-js绘制力导向图/&quot; title=&quot;d3.js 绘制力导向图&quot;&gt;d3.js 绘制力导向图&lt;/a&gt;中已经说明了如何绘制力导向图以及数据更新。本次将说明如何绘制带坐标轴的柱形图。
    
    </summary>
    
      <category term="前端" scheme="http://www.rookieyang.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="d3.js" scheme="http://www.rookieyang.cn/tags/d3-js/"/>
    
  </entry>
  
  <entry>
    <title>d3.js 绘制力导向图</title>
    <link href="http://www.rookieyang.cn/2017/04/13/d3-js%E7%BB%98%E5%88%B6%E5%8A%9B%E5%AF%BC%E5%90%91%E5%9B%BE/"/>
    <id>http://www.rookieyang.cn/2017/04/13/d3-js绘制力导向图/</id>
    <published>2017-04-13T08:41:47.000Z</published>
    <updated>2017-04-15T07:14:20.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><blockquote>
<p>D3.js是一个JavaScript库，它可以通过数据来操作文档。D3可以通过使用HTML、SVG和CSS把数据鲜活形象地展现出来。D3严格遵循Web标准，因而可以让你的程序轻松兼容现代主流浏览器并避免对特定框架的依赖。同时，它提供了强大的可视化组件，可以让使用者以数据驱动的方式去操作DOM。</p>
</blockquote>
<a id="more"></a>
<h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><p>在 HTML 文件中引入：<br><code>&lt;script src=&quot;http://d3js.org/d3.v3.min.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;</code></p>
<h4 id="确定初始数据"><a href="#确定初始数据" class="headerlink" title="确定初始数据"></a>确定初始数据</h4><p>初始数据为节点数据 nodes 和 连线数组 links，如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">var nodes = [&#123;&apos;label&apos;: &apos;Website&apos;, &apos;title&apos;: &apos;ebay&apos;&#125;, &#123;&apos;label&apos;: &apos;Sort&apos;, &apos;title&apos;: &apos;Antiques&apos;&#125;, &#123;</div><div class="line">        &apos;label&apos;: &apos;Sort&apos;,</div><div class="line">        &apos;title&apos;: &apos;Baby&apos;</div><div class="line">    &#125;, &#123;&apos;label&apos;: &apos;Sort&apos;, &apos;title&apos;: &apos;Books&apos;&#125;, &#123;&apos;label&apos;: &apos;Sort&apos;, &apos;title&apos;: &apos;Business &amp; Industrial&apos;&#125;, &#123;</div><div class="line">        &apos;label&apos;: &apos;Sort&apos;,</div><div class="line">        &apos;title&apos;: &apos;Cameras &amp; Photo&apos;</div><div class="line">    &#125;, &#123;&apos;label&apos;: &apos;Sort&apos;, &apos;title&apos;: &apos;Cell Phones &amp; Accessories&apos;&#125;, &#123;</div><div class="line">        &apos;label&apos;: &apos;Sort&apos;,</div><div class="line">        &apos;title&apos;: &apos;Clothing, Shoes &amp; Accessories&apos;</div><div class="line">    &#125;, &#123;&apos;label&apos;: &apos;Sort&apos;, &apos;title&apos;: &apos;Coins &amp; Paper Money&apos;&#125;, &#123;&apos;label&apos;: &apos;Sort&apos;, &apos;title&apos;: &apos;Collectibles&apos;&#125;, &#123;</div><div class="line">        &apos;label&apos;: &apos;Sort&apos;,</div><div class="line">        &apos;title&apos;: &apos;Computers Tablets &amp; Networking&apos;</div><div class="line">    &#125;, &#123;&apos;label&apos;: &apos;Sort&apos;, &apos;title&apos;: &apos;Consumer Electronics&apos;&#125;, &#123;&apos;label&apos;: &apos;Sort&apos;, &apos;title&apos;: &apos;Crafts&apos;&#125;, &#123;</div><div class="line">        &apos;label&apos;: &apos;Sort&apos;,</div><div class="line">        &apos;title&apos;: &apos;eBay Motors&apos;</div><div class="line">    &#125;, &#123;&apos;label&apos;: &apos;Sort&apos;, &apos;title&apos;: &apos;Everything Else&apos;&#125;, &#123;&apos;label&apos;: &apos;Sort&apos;, &apos;title&apos;: &apos;Health &amp; Beauty&apos;&#125;, &#123;</div><div class="line">        &apos;label&apos;: &apos;Sort&apos;,</div><div class="line">        &apos;title&apos;: &apos;Home &amp; Garden&apos;</div><div class="line">    &#125;, &#123;&apos;label&apos;: &apos;Sort&apos;, &apos;title&apos;: &apos;Jewelry &amp; Watches&apos;&#125;, &#123;</div><div class="line">        &apos;label&apos;: &apos;Sort&apos;,</div><div class="line">        &apos;title&apos;: &apos;Musical Instruments &amp; Gear&apos;</div><div class="line">    &#125;, &#123;&apos;label&apos;: &apos;Sort&apos;, &apos;title&apos;: &apos;Sporting Goods&apos;&#125;];</div><div class="line">    var links = [&#123;&apos;source&apos;: 1, &apos;target&apos;: 0&#125;, &#123;&apos;source&apos;: 2, &apos;target&apos;: 0&#125;, &#123;&apos;source&apos;: 3, &apos;target&apos;: 0&#125;, &#123;</div><div class="line">        &apos;source&apos;: 4,</div><div class="line">        &apos;target&apos;: 0</div><div class="line">    &#125;, &#123;&apos;source&apos;: 5, &apos;target&apos;: 0&#125;, &#123;&apos;source&apos;: 6, &apos;target&apos;: 0&#125;, &#123;&apos;source&apos;: 7, &apos;target&apos;: 0&#125;, &#123;</div><div class="line">        &apos;source&apos;: 8,</div><div class="line">        &apos;target&apos;: 0</div><div class="line">    &#125;, &#123;&apos;source&apos;: 9, &apos;target&apos;: 0&#125;, &#123;&apos;source&apos;: 10, &apos;target&apos;: 0&#125;, &#123;&apos;source&apos;: 11, &apos;target&apos;: 0&#125;, &#123;</div><div class="line">        &apos;source&apos;: 12,</div><div class="line">        &apos;target&apos;: 0</div><div class="line">    &#125;, &#123;&apos;source&apos;: 13, &apos;target&apos;: 0&#125;, &#123;&apos;source&apos;: 14, &apos;target&apos;: 0&#125;, &#123;&apos;source&apos;: 15, &apos;target&apos;: 0&#125;, &#123;</div><div class="line">        &apos;source&apos;: 16,</div><div class="line">        &apos;target&apos;: 0</div><div class="line">    &#125;, &#123;&apos;source&apos;: 17, &apos;target&apos;: 0&#125;, &#123;&apos;source&apos;: 18, &apos;target&apos;: 0&#125;, &#123;&apos;source&apos;: 19, &apos;target&apos;: 0&#125;];</div></pre></td></tr></table></figure>
<h4 id="创建布局"><a href="#创建布局" class="headerlink" title="创建布局"></a>创建布局</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> force = d3.layout.force()</div><div class="line">   .charge(<span class="number">-300</span>).linkDistance(<span class="number">130</span>).size([width, height]);</div></pre></td></tr></table></figure>
<ul>
<li><code>d3.layout.force()</code> 创建一个力导向图布局。</li>
<li><code>charge()</code> 设定节点的电荷数，负数则排斥，正数则吸引。</li>
<li><code>linkDistance()</code> 设置连线的距离。</li>
<li><code>size([x, y])</code> 设置力导向图的作用范围，用于指定重力中心为（x/2，y/2），所有节点的初始位置限定为 [0,x] 和 [0,y] 之间。</li>
</ul>
<h4 id="创建-SVG"><a href="#创建-SVG" class="headerlink" title="创建 SVG"></a>创建 SVG</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> svg = d3.select(<span class="string">"#graph"</span>).append(<span class="string">"svg"</span>)</div><div class="line">        .attr(<span class="string">"width"</span>, <span class="string">"100%"</span>).attr(<span class="string">"height"</span>, <span class="string">"380px"</span>);</div></pre></td></tr></table></figure>
<ul>
<li><code>append()</code> 用于添加元素</li>
<li>设置 <code>svg</code> 的长宽</li>
</ul>
<h4 id="转换数据和绘制"><a href="#转换数据和绘制" class="headerlink" title="转换数据和绘制"></a>转换数据和绘制</h4><ul>
<li><p>设定节点数组和连线数组之后开启布局计算</p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">force.nodes(nodes).links(links).start();</div></pre></td></tr></table></figure>
</li>
<li><p>绘制<br>  绑定数组 nodes 和 links，分别添加节点的元素 <circle></circle> 和连线的元素 <line></line>。另外，还要添加文字元素 <text>。各元素的 CSS 样式分别为：node，link，nodeText。代码如下：</text></p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> link = svg.selectAll(<span class="string">".link"</span>)</div><div class="line">            .data(links);</div><div class="line">link.enter()</div><div class="line">            .insert(<span class="string">"line"</span>, <span class="string">".link"</span>)</div><div class="line">            .attr(<span class="string">"class"</span>, <span class="string">"link"</span>);</div><div class="line"><span class="keyword">var</span> node = svg.selectAll(<span class="string">".node"</span>)</div><div class="line">            .data(nodes);</div><div class="line">node.enter()</div><div class="line">            .append(<span class="string">"circle"</span>)</div><div class="line">            .attr(<span class="string">"class"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">d</span>) </span>&#123;</div><div class="line">                <span class="keyword">return</span> <span class="string">"node "</span> + d.label</div><div class="line">            &#125;)</div><div class="line">            .attr(<span class="string">"r"</span>, <span class="number">25</span>)</div><div class="line">            .call(force.drag);</div><div class="line"><span class="keyword">var</span> text = svg.selectAll(<span class="string">".nodeText"</span>)</div><div class="line">.data(nodes);</div><div class="line">text.enter()</div><div class="line">    .append(<span class="string">"text"</span>)</div><div class="line">    .attr(<span class="string">"class"</span>, <span class="string">"nodeText"</span>)</div><div class="line">    .attr(<span class="string">"x"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">d</span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> d.x;</div><div class="line">    &#125;)</div><div class="line">    .attr(<span class="string">"font-size"</span>, <span class="string">"10px"</span>)</div><div class="line">    .attr(<span class="string">"text-anchor"</span>, <span class="string">"middle"</span>)</div><div class="line">    .attr(<span class="string">"dy"</span>, <span class="string">".3em"</span>)</div><div class="line">    .attr(<span class="string">"y"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">d</span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> d.y;</div><div class="line">    &#125;).text(<span class="function"><span class="keyword">function</span> (<span class="params">d</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> act_title;</div><div class="line">    <span class="keyword">if</span> (d.title.length &gt; <span class="number">8</span>) &#123;</div><div class="line">        act_title = d.title.substring(<span class="number">0</span>, <span class="number">8</span>) + <span class="string">"..."</span>;</div><div class="line">        <span class="keyword">return</span> act_title;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">return</span> d.title;</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<ul>
<li>节点的选择集调用了 <code>call(force.drag)</code>，可以让节点支持鼠标拖拽。</li>
<li><p>连线的选择集调用了 <code>insert(&quot;line&quot;, &quot;.link&quot;)</code>，可以确保力导向图进行更新（移除节点后增加节点）之后连线不会覆盖在节点上。</p></li></ul><p></p>
<p>在拖动节点之后，图形元素的坐标会发生变化，所以需要设置一个监听器进行更新，代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">force.on(<span class="string">"tick"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">            link.attr(<span class="string">"x1"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">d</span>) </span>&#123;</div><div class="line">                <span class="keyword">return</span> d.source.x;</div><div class="line">            &#125;)</div><div class="line">                .attr(<span class="string">"y1"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">d</span>) </span>&#123;</div><div class="line">                    <span class="keyword">return</span> d.source.y;</div><div class="line">                &#125;)</div><div class="line">                .attr(<span class="string">"x2"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">d</span>) </span>&#123;</div><div class="line">                    <span class="keyword">return</span> d.target.x;</div><div class="line">                &#125;)</div><div class="line">                .attr(<span class="string">"y2"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">d</span>) </span>&#123;</div><div class="line">                    <span class="keyword">return</span> d.target.y;</div><div class="line">                &#125;);</div><div class="line"></div><div class="line">            node.attr(<span class="string">"transform"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">d</span>) </span>&#123;</div><div class="line">                <span class="keyword">return</span> <span class="string">"translate("</span> + d.x + <span class="string">","</span> + d.y + <span class="string">")"</span>;</div><div class="line">            &#125;);</div><div class="line"></div><div class="line"></div><div class="line">            text.attr(<span class="string">"x"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">d</span>) </span>&#123;</div><div class="line">                <span class="keyword">return</span> d.x;</div><div class="line">            &#125;)</div><div class="line">                .attr(<span class="string">"y"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">d</span>) </span>&#123;</div><div class="line">                    <span class="keyword">return</span> d.y;</div><div class="line">                &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<ul>
<li><code>force.on()</code> 可为三种事件设定监听器，start，tick，end。其中，start 是刚开始运动，end 是运动停止，tick 是表示运动的每一步。</li>
<li><p>选择集 node，link，text 上都绑定了数据，当每一次 tick 事件发生时，被绑定的数据被更新，<code>function(d)</code> 中的 d 也都更新了。</p></li></ul><br>增加样式：<p></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">&lt;style type=&quot;text/css&quot;&gt;</div><div class="line">    .node &#123;</div><div class="line">        stroke: #222;</div><div class="line">        stroke-width: 1.5px;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    .link &#123;</div><div class="line">        stroke: #707071;</div><div class="line">        stroke-opacity: .6;</div><div class="line">        stroke-width: 1px;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    .node.Website &#123;</div><div class="line">        fill: #ff756e;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    .node.Sort &#123;</div><div class="line">        fill: #de9bf9;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    .nodeText &#123;</div><div class="line">        fill: #ffffff</div><div class="line">    &#125;</div><div class="line">&lt;/style&gt;</div></pre></td></tr></table></figure>
<p>效果：<br><img src="https://lh3.googleusercontent.com/-A6JxI-hyuww/WPCrNFzHKfI/AAAAAAAAANM/g8eygh02iYo/I/%25255BUNSET%25255D.png" alt="效果"></p>
</li>
</ul>




<h4 id="绘制箭头和添加文字"><a href="#绘制箭头和添加文字" class="headerlink" title="绘制箭头和添加文字"></a>绘制箭头和添加文字</h4><ul>
<li><p>绘制箭头需要用到 SVG 中的标记（marker）。标记 <marker> 写在 <defs></defs> 中，defs 用于定义可重复利用的元素。定义箭头代码如下：</marker></p>
 <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> defs = svg.append(<span class="string">"defs"</span>);</div><div class="line"><span class="keyword">var</span> arrowMarker = defs.append(<span class="string">"marker"</span>)</div><div class="line">  .attr(<span class="string">"id"</span>, <span class="string">"arrow"</span>)</div><div class="line">  .attr(<span class="string">"markerUnits"</span>, <span class="string">"strokeWidth"</span>)</div><div class="line">  .attr(<span class="string">"markerWidth"</span>, <span class="string">"10"</span>)</div><div class="line">  .attr(<span class="string">"markerHeight"</span>, <span class="string">"10"</span>)</div><div class="line">  .attr(<span class="string">"viewBox"</span>, <span class="string">"-0 -5 10 10"</span>)</div><div class="line">  .attr(<span class="string">"refX"</span>, <span class="string">"35"</span>)</div><div class="line">  .attr(<span class="string">"refY"</span>, <span class="string">"0"</span>)</div><div class="line">  .attr(<span class="string">"orient"</span>, <span class="string">"auto"</span>);</div><div class="line"></div><div class="line"><span class="keyword">var</span> arrow_path = <span class="string">'M 0,-5 L 10 ,0 L 0,5 L5,0 L0,-5'</span>;</div><div class="line"></div><div class="line">arrowMarker.append(<span class="string">"path"</span>)</div><div class="line">  .attr(<span class="string">"d"</span>, arrow_path)</div><div class="line">  .attr(<span class="string">"fill"</span>, <span class="string">"#a6a6a6"</span>);</div></pre></td></tr></table></figure>
<ul>
<li><code>refX, refY</code> 指的是图形元素和 <code>marker</code> 连接的位置坐标，这里圆的半径设置为 25，箭头的顶点到底部垂直距离为 10，所以设置为（35，0）则箭头的顶端刚好在圆上。</li>
<li><code>markerUnits</code> 标记大小的基准，有两个值，即 strokeWidth（线的宽度）和 userSpaceOnUse（线前端的大小）。</li>
<li><code>markerWidth，markerHeight</code> 标识的大小。</li>
<li><code>orient</code> 绘制方向，可设定为 auto（自动确认方向和角度值）。</li>
<li><code>id</code> 标识的 id 号。</li>
<li>粉红色框是 viewBox 范围，黑色为 arrow_path 的轨迹：<br><img src="http://i.imgur.com/eqY9I4G.png" alt="arro"></li>
<li><code>link.attr(&#39;marker-end&#39;, &#39;url(#arrow)&#39;);</code>可以为连接线添加箭头。</li>
</ul>
</li>
<li><p>为连接线增加文字，首先需要定义 <path></path> 确定文字放在连接线路径上，再定义 <text>，之后在 <text> 添加 <textpath> 引用路径，代码如下：</textpath></text></text></p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//定义文字路径</span></div><div class="line"><span class="keyword">var</span> linkpaths = svg.selectAll(<span class="string">".linkpath"</span>)</div><div class="line">            .data(links_data);</div><div class="line">linkpaths.enter()</div><div class="line">            .append(<span class="string">'path'</span>)</div><div class="line">            .attr(<span class="string">'d'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">d</span>) </span>&#123;</div><div class="line">                <span class="keyword">return</span> <span class="string">'M '</span> + d.source.x + <span class="string">' '</span> + d.source.y + <span class="string">' L '</span> + d.target.x + <span class="string">' '</span> + d.target.y</div><div class="line">            &#125;)</div><div class="line">            .attr(<span class="string">'class'</span>, <span class="string">'linkpath'</span>)</div><div class="line">            .attr(<span class="string">'fill-opacity'</span>, <span class="number">0</span>)</div><div class="line">            .attr(<span class="string">'stroke-opacity'</span>, <span class="number">0</span>)</div><div class="line">            .attr(<span class="string">'fill'</span>, <span class="string">'#ffffff'</span>)</div><div class="line">            .attr(<span class="string">'stroke'</span>, <span class="string">'red'</span>)</div><div class="line">            .attr(<span class="string">'id'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">d, i</span>) </span>&#123;</div><div class="line">                <span class="keyword">return</span> <span class="string">'linkpath'</span> + i;</div><div class="line">            &#125;)</div><div class="line">            .style(<span class="string">"pointer-events"</span>, <span class="string">"none"</span>);</div><div class="line"></div><div class="line"><span class="comment">//定义 &lt;text&gt;            </span></div><div class="line"><span class="keyword">var</span> linklabels = svg.selectAll(<span class="string">".linklabel"</span>)</div><div class="line">        .data(links_data);</div><div class="line">linklabels.enter()</div><div class="line">        .append(<span class="string">'text'</span>)</div><div class="line">        .style(<span class="string">"pointer-events"</span>, <span class="string">"none"</span>)</div><div class="line">        .attr(<span class="string">'class'</span>, <span class="string">'linklabel'</span>)</div><div class="line">        .attr(<span class="string">'id'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">d, i</span>) </span>&#123;</div><div class="line">            <span class="keyword">return</span> <span class="string">'linklabel'</span> + i;</div><div class="line">        &#125;)</div><div class="line">        .attr(<span class="string">'dx'</span>, <span class="number">50</span>)</div><div class="line">        .attr(<span class="string">'dy'</span>, <span class="number">0</span>)</div><div class="line">        .attr(<span class="string">'font-size'</span>, <span class="number">5</span>)</div><div class="line">        .attr(<span class="string">'fill'</span>, <span class="string">'#aaa'</span>);</div><div class="line"><span class="comment">//增加 &lt;textPath&gt; 引用 path</span></div><div class="line">linklabels.append(<span class="string">'textPath'</span>)</div><div class="line">        .attr(<span class="string">'xlink:href'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">d, i</span>) </span>&#123;</div><div class="line">            <span class="keyword">return</span> <span class="string">'#linkpath'</span> + i</div><div class="line">        &#125;)</div><div class="line">        .style(<span class="string">"pointer-events"</span>, <span class="string">"none"</span>)</div><div class="line">        .text(<span class="function"><span class="keyword">function</span> (<span class="params">d, i</span>) </span>&#123;</div><div class="line">            <span class="keyword">return</span> <span class="string">'BELONG'</span>;</div><div class="line">        &#125;);</div></pre></td></tr></table></figure>
<ul>
<li><code>pointer-events</code> 设置为 none 则不在接收鼠标事件，设置为 all 则在指针在元素中或边缘时接收鼠标事件。</li>
<li><p>上述代码只是确保了初始时文字在连接线路径上，所以还需要设置对上述元素的坐标更新。在 <code>force.on()</code> 中增加如下代码：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">linkpaths.attr(<span class="string">'d'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">d</span>) </span>&#123;</div><div class="line">                <span class="keyword">var</span> path = <span class="string">'M '</span> + d.source.x + <span class="string">' '</span> + d.source.y + <span class="string">' L '</span> + d.target.x + <span class="string">' '</span> + d.target.y;</div><div class="line">                <span class="keyword">return</span> path</div><div class="line">            &#125;);</div><div class="line"></div><div class="line">linklabels.attr(<span class="string">'transform'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">d, i</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (d.target.x &lt; d.source.x) &#123;</div><div class="line">        bbox = <span class="keyword">this</span>.getBBox();</div><div class="line">        <span class="comment">//确保文字不会倒置</span></div><div class="line">        rx = bbox.x + bbox.width / <span class="number">2</span>;</div><div class="line">        ry = bbox.y + bbox.height / <span class="number">2</span>;</div><div class="line">        <span class="keyword">return</span> <span class="string">'rotate(180 '</span> + rx + <span class="string">' '</span> + ry + <span class="string">')'</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">'rotate(0)'</span>;</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<h4 id="缩放和拖动"><a href="#缩放和拖动" class="headerlink" title="缩放和拖动"></a>缩放和拖动</h4><p>要同时支持鼠标缩放以及拖动，必须处理这两者的事件冲突，代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> zoom = d3.behavior.zoom()</div><div class="line">        .scaleExtent([<span class="number">1</span>, <span class="number">10</span>])</div><div class="line">        .on(<span class="string">"zoom"</span>, <span class="function"><span class="keyword">function</span> <span class="title">zoomed</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            d3.select(<span class="keyword">this</span>).attr(<span class="string">"transform"</span>,</div><div class="line">                <span class="string">"translate("</span> + d3.event.translate + <span class="string">")scale("</span> + d3.event.scale + <span class="string">")"</span>);</div><div class="line">        &#125;);</div><div class="line">svg.call(d3.behavior.zoom().on(<span class="string">"zoom"</span>, redraw))</div><div class="line">        .append(<span class="string">'g'</span>);</div><div class="line">force.drag()</div><div class="line">        .on(<span class="string">"dragstart"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">d</span>) </span>&#123;</div><div class="line">            <span class="comment">//在拖动节点的时候阻止事件冒泡</span></div><div class="line">            d3.event.sourceEvent.stopPropagation();</div><div class="line">        &#125;);</div><div class="line"><span class="comment">// 缩放之后重绘</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">redraw</span>(<span class="params"></span>) </span>&#123;</div><div class="line">   svg.attr(<span class="string">"transform"</span>, <span class="string">"translate("</span> + d3.event.translate + <span class="string">")"</span> + <span class="string">" scale("</span> + d3.event.scale + <span class="string">")"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">dragstart</span>(<span class="params">d</span>) </span>&#123;</div><div class="line">   d3.select(<span class="keyword">this</span>).classed(<span class="string">"fixed"</span>, d.fixed = <span class="literal">true</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><code>g 元素</code> 是用来分组用的，它能把多个元素放在一组里，对 <g> 标记实施的样式和渲染会作用到这个分组内的所有元素上。组内的所有元素都会继承 <g> 标记上的所有属性。</g></g></li>
<li><code>fixed</code> 设置为 true 时，顶点固定不动。</li>
</ul>
<h4 id="更新数据"><a href="#更新数据" class="headerlink" title="更新数据"></a>更新数据</h4><p>有时候需要更新数据，更新后力导向图也会跟着变化。由于上述的选择集通过 <code>data()</code> 将数据与元素进行绑定，而绑定的情况分为以下三种：</p>
<ul>
<li>update：数组长度 = 元素数量</li>
<li>enter：数组长度 &gt; 元素数量</li>
<li>exit：数组长度 &lt; 元素数量<br>所以在更新数据的时候需要分别对这三种情况进行处理，对于 enter 这种没有足够的元素的处理办法是添加元素，对于 exit 这种存在多余元素的处理办法是删除元素，而对于 update 则是进行内容修改。<br>以节点的更新数据为例：</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> node = svg.selectAll(<span class="string">".node"</span>)</div><div class="line">    .data(nodes_data);</div><div class="line"><span class="comment">//节点数据内容修改</span></div><div class="line">node.attr(<span class="string">"class"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">d</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="string">"node "</span> + d.label</div><div class="line">&#125;)</div><div class="line">    .on(<span class="string">"dblclick"</span>, dblclick)</div><div class="line">    .attr(<span class="string">"r"</span>, <span class="number">25</span>)</div><div class="line">    .call(force.drag)</div><div class="line">    .on(<span class="string">"click"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">d</span>) </span>&#123;</div><div class="line">        keys = d3.keys(d);</div><div class="line">        delete_key = [<span class="string">"x"</span>, <span class="string">"y"</span>, <span class="string">"index"</span>, <span class="string">"weight"</span>, <span class="string">"px"</span>, <span class="string">"py"</span>, <span class="string">"fixed"</span>];</div><div class="line">        info = [];</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; delete_key.length; i++) &#123;</div><div class="line">            keys.removeByValue(delete_key[i]);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; keys.length; j++) &#123;</div><div class="line">            info.push(d[keys[j]])</div><div class="line">        &#125;</div><div class="line">        showinfo(d.label, keys, info);</div><div class="line">    &#125;);</div><div class="line"><span class="comment">//增加不足的元素</span></div><div class="line">node.enter()</div><div class="line">    .append(<span class="string">"circle"</span>)</div><div class="line">    .attr(<span class="string">"class"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">d</span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"node "</span> + d.label</div><div class="line">    &#125;)</div><div class="line">    .on(<span class="string">"dblclick"</span>, dblclick)</div><div class="line">    .attr(<span class="string">"r"</span>, <span class="number">25</span>)</div><div class="line">    .call(force.drag)</div><div class="line">    .on(<span class="string">"click"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">d</span>) </span>&#123;</div><div class="line">        keys = d3.keys(d);</div><div class="line">        delete_key = [<span class="string">"x"</span>, <span class="string">"y"</span>, <span class="string">"index"</span>, <span class="string">"weight"</span>, <span class="string">"px"</span>, <span class="string">"py"</span>, <span class="string">"fixed"</span>];</div><div class="line">        info = [];</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; delete_key.length; i++) &#123;</div><div class="line">            keys.removeByValue(delete_key[i]);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; keys.length; j++) &#123;</div><div class="line">            info.push(d[keys[j]])</div><div class="line">        &#125;</div><div class="line">        showinfo(d.label, keys, info);</div><div class="line">    &#125;);</div><div class="line"><span class="comment">//删除多余元素</span></div><div class="line">node.exit().remove();</div></pre></td></tr></table></figure>
<hr>
<h4 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h4><p><a href="http://blog.csdn.net/lzhlzz/article/details/36869567" target="_blank" rel="external">理解 update, enter, exit 的使用</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;D3.js是一个JavaScript库，它可以通过数据来操作文档。D3可以通过使用HTML、SVG和CSS把数据鲜活形象地展现出来。D3严格遵循Web标准，因而可以让你的程序轻松兼容现代主流浏览器并避免对特定框架的依赖。同时，它提供了强大的可视化组件，可以让使用者以数据驱动的方式去操作DOM。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="前端" scheme="http://www.rookieyang.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="d3.js" scheme="http://www.rookieyang.cn/tags/d3-js/"/>
    
  </entry>
  
  <entry>
    <title>Python 下 Flask 结合 Neo4j 构建管理系统（四）</title>
    <link href="http://www.rookieyang.cn/2017/04/13/Python%E4%B8%8BFlask%E7%BB%93%E5%90%88Neo4j%E6%9E%84%E5%BB%BA%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%EF%BC%88%E5%9B%9B%EF%BC%89/"/>
    <id>http://www.rookieyang.cn/2017/04/13/Python下Flask结合Neo4j构建管理系统（四）/</id>
    <published>2017-04-13T07:30:43.000Z</published>
    <updated>2017-04-14T08:05:12.000Z</updated>
    
    <content type="html"><![CDATA[<p>数据的增删改功能引入了 bootstrap table 插件进行操作。</p>
<h4 id="bootstrap-table-使用"><a href="#bootstrap-table-使用" class="headerlink" title="bootstrap table 使用"></a>bootstrap table 使用</h4><p>引入 Bootstrap 库（假如你的项目还没有使用）和 bootstrap-table.css 到 head 标签下。<a id="more"></a></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"bootstrap.min.css"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"bootstrap-table.css"</span>&gt;</span></div></pre></td></tr></table></figure>
<p>引入 jQuery 库，bootstrap 库（假如你的项目还没有使用）和 bootstrap-table.js 到 head 标签下或者在 body 标签关闭之前（一般建议这么做）。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"jquery.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"bootstrap.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"bootstrap-table.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">--</span> <span class="attr">put</span> <span class="attr">your</span> <span class="attr">locale</span> <span class="attr">files</span> <span class="attr">after</span> <span class="attr">bootstrap-table.js</span> <span class="attr">--</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"bootstrap-table-zh-CN.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="表格初始化"><a href="#表格初始化" class="headerlink" title="表格初始化"></a>表格初始化</h4><p>代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> TableInit = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> oTableInit = <span class="keyword">new</span> <span class="built_in">Object</span>();</div><div class="line">    <span class="comment">//初始化Table</span></div><div class="line"></div><div class="line">    oTableInit.Init = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        $(<span class="string">'#ta_info'</span>).bootstrapTable(&#123;</div><div class="line">            <span class="attr">url</span>: $SCRIPT_ROOT + <span class="string">"/search_table"</span>,         <span class="comment">//请求后台的URL（*）</span></div><div class="line">            method: <span class="string">'get'</span>,                      <span class="comment">//请求方式（*）</span></div><div class="line">            toolbar: <span class="string">'#toolbar'</span>,                <span class="comment">//工具按钮用哪个容器</span></div><div class="line">            striped: <span class="literal">true</span>,                      <span class="comment">//是否显示行间隔色</span></div><div class="line">            cache: <span class="literal">false</span>,                       <span class="comment">//是否使用缓存，默认为true，所以一般情况下需要设置一下这个属性（*）</span></div><div class="line">            pagination: <span class="literal">true</span>,                   <span class="comment">//是否显示分页（*）</span></div><div class="line">            sortable: <span class="literal">false</span>,                     <span class="comment">//是否启用排序</span></div><div class="line">            sortOrder: <span class="string">"asc"</span>,                   <span class="comment">//排序方式</span></div><div class="line">            queryParams: oTableInit.queryParams,<span class="comment">//传递参数（*）</span></div><div class="line">            sidePagination: <span class="string">"server"</span>,           <span class="comment">//分页方式：client客户端分页，server服务端分页（*）</span></div><div class="line">            pageNumber: <span class="number">1</span>,                       <span class="comment">//初始化加载第一页，默认第一页</span></div><div class="line">            pageSize: <span class="number">10</span>,                       <span class="comment">//每页的记录行数（*）</span></div><div class="line">            pageList: [<span class="number">10</span>, <span class="number">25</span>, <span class="number">50</span>, <span class="number">100</span>],        <span class="comment">//可供选择的每页的行数（*）</span></div><div class="line">            search: <span class="literal">false</span>,                       <span class="comment">//是否显示表格搜索，此搜索是客户端搜索，不会进服务端，所以，个人感觉意义不大</span></div><div class="line">            strictSearch: <span class="literal">false</span>,</div><div class="line">            <span class="attr">showColumns</span>: <span class="literal">true</span>,                  <span class="comment">//是否显示所有的列</span></div><div class="line">            showRefresh: <span class="literal">true</span>,                  <span class="comment">//是否显示刷新按钮</span></div><div class="line">            minimumCountColumns: <span class="number">2</span>,             <span class="comment">//最少允许的列数</span></div><div class="line">            clickToSelect: <span class="literal">true</span>,                <span class="comment">//是否启用点击选中行</span></div><div class="line">            height: <span class="number">500</span>,                        <span class="comment">//行高，如果没有设置height属性，表格自动根据记录条数觉得表格高度</span></div><div class="line">            uniqueId: <span class="string">"ID"</span>,                     <span class="comment">//每一行的唯一标识，一般为主键列</span></div><div class="line">            showToggle: <span class="literal">true</span>,                    <span class="comment">//是否显示详细视图和列表视图的切换按钮</span></div><div class="line">            cardView: <span class="literal">false</span>,                    <span class="comment">//是否显示详细视图</span></div><div class="line">            detailView: <span class="literal">false</span>,                   <span class="comment">//是否显示父子表</span></div><div class="line">            columns: [&#123;</div><div class="line">                <span class="attr">checkbox</span>: <span class="literal">true</span></div><div class="line">            &#125;, &#123;</div><div class="line">                <span class="attr">field</span>: <span class="string">'name'</span>,</div><div class="line">                <span class="attr">title</span>: <span class="string">'信息名'</span></div><div class="line">            &#125;, &#123;</div><div class="line">                <span class="attr">field</span>: <span class="string">'label'</span>,</div><div class="line">                <span class="attr">title</span>: <span class="string">'类别'</span></div><div class="line">            &#125;]</div><div class="line">        &#125;);</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="comment">//得到查询的参数</span></div><div class="line">    oTableInit.queryParams = <span class="function"><span class="keyword">function</span> (<span class="params">params</span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> temp = &#123;   <span class="comment">//这里的键的名字和控制器的变量名必须一直，这边改动，控制器也需要改成一样的</span></div><div class="line">            limit: params.limit,   <span class="comment">//页面大小</span></div><div class="line">            offset: params.offset,  <span class="comment">//页码</span></div><div class="line">            q: $(<span class="string">"#search_table"</span>).find(<span class="string">"input[name=condition]"</span>).val()</div><div class="line">        &#125;;</div><div class="line">        <span class="keyword">return</span> temp;</div><div class="line">    &#125;;</div><div class="line">    <span class="keyword">return</span> oTableInit;</div><div class="line"></div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h4 id="服务器分页"><a href="#服务器分页" class="headerlink" title="服务器分页"></a>服务器分页</h4><p>后端代码：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@app.route('/search_table')</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">search_table</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        q = request.args.get(<span class="string">'q'</span>, <span class="number">0</span>)</div><div class="line">        limit = request.args.get(<span class="string">'limit'</span>, <span class="number">1</span>)</div><div class="line">        offset = request.args.get(<span class="string">'offset'</span>, <span class="number">2</span>)</div><div class="line">    <span class="keyword">except</span> KeyError:</div><div class="line">        <span class="keyword">return</span> []</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        user = User(session.get(<span class="string">"username"</span>))</div><div class="line">        results = user.search_table(q, limit, offset)</div><div class="line">        <span class="keyword">return</span> results</div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">search_table</span><span class="params">(self, condition, limit, offset)</span>:</span></div><div class="line">    nodes = []</div><div class="line">    act_nodes = []</div><div class="line">    query = <span class="string">"MATCH (m) WHERE m.name CONTAINS \'"</span> + condition + \</div><div class="line">            <span class="string">"\' and (labels(m)='Sort' or labels(m)='GOODS' or labels(m)='Website') RETURN m, labels(m)"</span></div><div class="line">    results = graph.run(query)</div><div class="line">    <span class="keyword">for</span> result, label <span class="keyword">in</span> results:</div><div class="line">        node = &#123;&#125;</div><div class="line">        node[<span class="string">"name"</span>] = result.get(<span class="string">"name"</span>)</div><div class="line">        node[<span class="string">"label"</span>] = label[<span class="number">0</span>]</div><div class="line">        nodes.append(node)</div><div class="line">    total = len(nodes)</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(int(offset), int(offset) + int(limit)):</div><div class="line">        <span class="keyword">if</span> i &gt;= len(nodes):</div><div class="line">            <span class="keyword">break</span></div><div class="line">        act_nodes.append(nodes[i])</div><div class="line">    <span class="keyword">return</span> jsonify(&#123;<span class="string">'total'</span>: total, <span class="string">'rows'</span>: act_nodes&#125;)</div></pre></td></tr></table></figure>
<ul>
<li>服务器分页必须返回 <code>total</code> 和 <code>rows</code> 两个参数，前者代表查询数据的总长度，后者返回该页应该显示的数据。</li>
</ul>
<h4 id="增删改"><a href="#增删改" class="headerlink" title="增删改"></a>增删改</h4><p>以增加数据为例：<br><img src="http://i.imgur.com/wBAu1Ti.png" alt="增加数据"><br>由于 Neo4j 中的数据不是结构性数据，所以增加数据的基本思路是由用户选择父节点，然后向父节点增加子节点，增加子节点的过程中必须填入子节点的 <code>名字</code>，<code>类别</code>以及和父节点的<code>关系</code>属性，如果子节点还有其它属性，则可以点击增加行进行额外属性的增加。<br>前端代码：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">'#btn_add'</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> father_node = $(<span class="string">"#ta_info"</span>).bootstrapTable(<span class="string">'getSelections'</span>);</div><div class="line">    <span class="keyword">if</span> (father_node == <span class="string">""</span>) &#123;</div><div class="line">        alert(<span class="string">"请选择插入元素的父节点"</span>)</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (father_node.length &gt; <span class="number">1</span>) &#123;</div><div class="line">        alert(<span class="string">"父节点只允许一个"</span>)</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">if</span> ($(<span class="string">'.added-row'</span>).length &gt; <span class="number">0</span>)</div><div class="line">            $(<span class="string">'.added-row'</span>).remove();</div><div class="line">        $(<span class="string">'#insertModal_body'</span>).find(<span class="string">"input[name=name]"</span>).val(<span class="string">""</span>);</div><div class="line">        $(<span class="string">'#insertModal_body'</span>).find(<span class="string">"input[name=label]"</span>).val(<span class="string">""</span>);</div><div class="line">        $(<span class="string">'#insertModal_body'</span>).find(<span class="string">"input[name=relation]"</span>).val(<span class="string">""</span>);</div><div class="line">        $(<span class="string">'#insertModal'</span>).modal()</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="literal">false</span></div><div class="line">&#125;);</div><div class="line"></div><div class="line">$(<span class="string">'#add_row'</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> modal_body = <span class="built_in">document</span>.getElementById(<span class="string">"insertModal_body"</span>);</div><div class="line">    <span class="keyword">var</span> row_div = <span class="built_in">document</span>.createElement(<span class="string">"div"</span>);</div><div class="line">    <span class="keyword">var</span> row_label = <span class="built_in">document</span>.createElement(<span class="string">"input"</span>);</div><div class="line">    <span class="keyword">var</span> row_text = <span class="built_in">document</span>.createElement(<span class="string">"input"</span>);</div><div class="line">    row_div.setAttribute(<span class="string">"class"</span>, <span class="string">"input-data form-inline added-row"</span>);</div><div class="line">    row_label.setAttribute(<span class="string">"class"</span>, <span class="string">"extra-label form-control"</span>);</div><div class="line">    row_label.setAttribute(<span class="string">"type"</span>, <span class="string">"text"</span>);</div><div class="line">    row_label.setAttribute(<span class="string">"placeholder"</span>, <span class="string">"属性名"</span>);</div><div class="line">    row_label.setAttribute(<span class="string">"name"</span>, <span class="string">"attr"</span>);</div><div class="line">    row_text.setAttribute(<span class="string">"class"</span>, <span class="string">"extra-text form-control"</span>);</div><div class="line">    row_text.setAttribute(<span class="string">"placeholder"</span>, <span class="string">"属性"</span>);</div><div class="line">    row_text.setAttribute(<span class="string">"type"</span>, <span class="string">"text"</span>);</div><div class="line">    row_div.appendChild(row_label);</div><div class="line">    row_div.appendChild(row_text);</div><div class="line">    modal_body.appendChild(row_div);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">$(<span class="string">'#insert_btn'</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> data = &#123;&#125;;</div><div class="line">    <span class="keyword">var</span> father_node = $(<span class="string">"#ta_info"</span>).bootstrapTable(<span class="string">'getSelections'</span>);</div><div class="line">    <span class="keyword">var</span> insertModal = $(<span class="string">'#insertModal_body'</span>);</div><div class="line">    <span class="keyword">var</span> fa_name = father_node[<span class="number">0</span>][<span class="string">"name"</span>];</div><div class="line">    <span class="keyword">var</span> fa_label = father_node[<span class="number">0</span>][<span class="string">'label'</span>];</div><div class="line">    <span class="keyword">var</span> child_name = insertModal.find(<span class="string">"input[name=name]"</span>).val();</div><div class="line">    <span class="keyword">var</span> child_label = insertModal.find(<span class="string">"input[name=label]"</span>).val();</div><div class="line">    <span class="keyword">var</span> relation = insertModal.find(<span class="string">"input[name=relation]"</span>).val();</div><div class="line">    <span class="keyword">var</span> child_attrs_label = $(<span class="string">'.extra-label'</span>);</div><div class="line">    <span class="keyword">var</span> child_attrs = $(<span class="string">'.extra-text'</span>);</div><div class="line">    data[<span class="string">'fa_name'</span>] = fa_name;</div><div class="line">    data[<span class="string">'fa_label'</span>] = fa_label;</div><div class="line">    data[<span class="string">'name'</span>] = child_name;</div><div class="line">    data[<span class="string">'label'</span>] = child_label;</div><div class="line">    data[<span class="string">'relation'</span>] = relation;</div><div class="line">    <span class="keyword">if</span> (child_name == <span class="string">""</span> || child_label == <span class="string">""</span> || relation == <span class="string">""</span>) &#123;</div><div class="line">        alert(<span class="string">"请填写必要信息"</span>);</div><div class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (fa_name == child_name) &#123;</div><div class="line">        alert(<span class="string">"不可与父节点名称相同"</span>);</div><div class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (child_attrs.length &gt; <span class="number">0</span>) &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="number">1</span>);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; child_attrs.length; i++) &#123;</div><div class="line">            data[child_attrs_label[i].value] = child_attrs[i].value;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    data = <span class="built_in">JSON</span>.stringify(data);</div><div class="line">    $.ajax(&#123;</div><div class="line">        <span class="attr">url</span>: <span class="string">"/insert"</span>,</div><div class="line">        <span class="attr">type</span>: <span class="string">'POST'</span>,</div><div class="line">        <span class="attr">data</span>: data,</div><div class="line">        <span class="attr">contentType</span>: <span class="string">'application/json; charset=UTF-8'</span>,</div><div class="line">        <span class="attr">success</span>: <span class="function"><span class="keyword">function</span> (<span class="params">msg</span>) </span>&#123;</div><div class="line">            <span class="keyword">if</span> (msg == <span class="string">"插入成功"</span>) &#123;</div><div class="line">                $(<span class="string">'#insertModal'</span>).modal(<span class="string">'hide'</span>);</div><div class="line">                $(<span class="string">"#ta_info"</span>).bootstrapTable(<span class="string">'refresh'</span>);</div><div class="line">            &#125;</div><div class="line">            alert(msg);</div><div class="line">        &#125;</div><div class="line">    &#125;)</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>后端代码：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@app.route('/insert', methods=['POST'])</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_insert</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        data = request.get_json()</div><div class="line">    <span class="keyword">except</span> KeyError:</div><div class="line">        <span class="keyword">return</span> []</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        user = User(session.get(<span class="string">"username"</span>))</div><div class="line">        start_node = &#123;&#125;</div><div class="line">        end_node = &#123;&#125;</div><div class="line">        start_node[<span class="string">'name'</span>] = data[<span class="string">'fa_name'</span>]</div><div class="line">        start_node[<span class="string">'label'</span>] = data[<span class="string">'fa_label'</span>]</div><div class="line">        relation = data[<span class="string">'relation'</span>]</div><div class="line">        data.pop(<span class="string">'fa_name'</span>)</div><div class="line">        data.pop(<span class="string">'fa_label'</span>)</div><div class="line">        data.pop(<span class="string">'relation'</span>)</div><div class="line">        <span class="keyword">for</span> key <span class="keyword">in</span> data.keys():</div><div class="line">            end_node[key] = data[key]</div><div class="line">        results = user.insert_table(start_node, relation, end_node)</div><div class="line">        <span class="keyword">return</span> results</div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">insert_table</span><span class="params">(self, start_node, relation, end_node)</span>:</span></div><div class="line">    end_node_label = end_node[<span class="string">'label'</span>]</div><div class="line">    end_node.pop(<span class="string">"label"</span>)</div><div class="line">    data = <span class="string">""</span></div><div class="line">    <span class="keyword">for</span> key <span class="keyword">in</span> end_node.keys():</div><div class="line">        data += key + <span class="string">":"</span> + <span class="string">"\'"</span> + end_node[key] + <span class="string">"\'"</span> + <span class="string">","</span></div><div class="line">    data = data.strip(<span class="string">","</span>)</div><div class="line">    check_query = <span class="string">"MATCH (m) WHERE m.username=\'"</span> + end_node[<span class="string">'name'</span>] \</div><div class="line">                  + <span class="string">"\' and labels(m)=\'"</span> + end_node_label + <span class="string">"\' RETURN m"</span></div><div class="line">    insert_query = <span class="string">"MATCH (m) WHERE m.name=\'"</span> + start_node[<span class="string">'name'</span>] \</div><div class="line">                   + <span class="string">"\' and labels(m)=\'"</span> + start_node[<span class="string">'label'</span>] + \</div><div class="line">                   <span class="string">"\' CREATE (n:"</span> + end_node_label + <span class="string">""</span> + <span class="string">"&#123;"</span> + data + <span class="string">"&#125;)&lt;-"</span> + \</div><div class="line">                   <span class="string">"[:"</span> + relation + <span class="string">"]-(m) RETURN n"</span></div><div class="line">    check_result = graph.run(check_query)</div><div class="line">    <span class="keyword">if</span> check_result.forward():</div><div class="line">        <span class="keyword">return</span> <span class="string">"已经存在此节点"</span></div><div class="line">    print(insert_query)</div><div class="line">    insert_result = graph.run(insert_query)</div><div class="line">    <span class="keyword">if</span> insert_result.forward():</div><div class="line">        <span class="keyword">return</span> <span class="string">"插入成功"</span></div><div class="line">    <span class="keyword">return</span> <span class="string">"插入失败"</span></div></pre></td></tr></table></figure>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>利用 Neo4j 结合 Flask 构建 Web 应用的关键在于如何前端和后端如何进行数据交互，Flask 可以很方便的通过 <code>jsonify()</code> 方法返回 Json 数据，所以在构建应用的过程中可以尽可能使用 <code>ajax</code> 向后端发送 Json格式数据。 </p>
<hr>
<h4 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h4><p><a href="http://bootstrap-table.wenzhixin.net.cn/zh-cn/" target="_blank" rel="external">Bootstrap Table</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;数据的增删改功能引入了 bootstrap table 插件进行操作。&lt;/p&gt;
&lt;h4 id=&quot;bootstrap-table-使用&quot;&gt;&lt;a href=&quot;#bootstrap-table-使用&quot; class=&quot;headerlink&quot; title=&quot;bootstrap table 使用&quot;&gt;&lt;/a&gt;bootstrap table 使用&lt;/h4&gt;&lt;p&gt;引入 Bootstrap 库（假如你的项目还没有使用）和 bootstrap-table.css 到 head 标签下。
    
    </summary>
    
      <category term="Python 学习" scheme="http://www.rookieyang.cn/categories/Python-%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Python" scheme="http://www.rookieyang.cn/tags/Python/"/>
    
      <category term="Flask" scheme="http://www.rookieyang.cn/tags/Flask/"/>
    
      <category term="Neo4j" scheme="http://www.rookieyang.cn/tags/Neo4j/"/>
    
  </entry>
  
  <entry>
    <title>Python 下 Flask 结合 Neo4j 构建管理系统（三）</title>
    <link href="http://www.rookieyang.cn/2017/04/13/Python%E4%B8%8BFlask%E7%BB%93%E5%90%88Neo4j%E6%9E%84%E5%BB%BA%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%EF%BC%88%E4%B8%89%EF%BC%89/"/>
    <id>http://www.rookieyang.cn/2017/04/13/Python下Flask结合Neo4j构建管理系统（三）/</id>
    <published>2017-04-13T01:04:34.000Z</published>
    <updated>2017-04-14T08:04:57.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h4><p>核心需求如下：</p>
<ul>
<li>管理系统登录</li>
<li>从 Neo4j 中获取数据信息图形化显示出来</li>
<li>节点的关系查询及溯源查询</li>
<li>对 Neo4j 进行节点的增删改<a id="more"></a>
</li>
</ul>
<h4 id="管理系统登录"><a href="#管理系统登录" class="headerlink" title="管理系统登录"></a>管理系统登录</h4><p>首先需要在工程目录下创建 <code>login.html</code> 和 <code>models.py</code>，前者为登录界面用于测试与 Neo4j 的连接，后者是一个用户类用于处理用户的各项操作。<br><img src="media/http://i.imgur.com/yJzMEx8.png" alt="结构"></p>
<p>本次连接采用了 Py2neo v3 库，安装可以通过 pip 安装：<br><code>pip install py2neo</code><br>安装成功之后在 <code>models.py</code> 文件输入如下代码：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> passlib.handlers <span class="keyword">import</span> bcrypt</div><div class="line"><span class="keyword">from</span> py2neo <span class="keyword">import</span> authenticate, Graph, Node</div><div class="line"></div><div class="line">authenticate(<span class="string">"localhost:7474"</span>, <span class="string">"neo4j"</span>, <span class="string">"yy0758jyl"</span>)</div><div class="line">graph = Graph()</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, username)</span>:</span></div><div class="line">        self.username = username</div><div class="line">        user_data = self.find()</div><div class="line">        <span class="comment">#获取登录用户标签</span></div><div class="line">        <span class="keyword">if</span> user_data:</div><div class="line">            self.label = user_data[<span class="string">'label'</span>]</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            self.label = <span class="string">"User"</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">find</span><span class="params">(self)</span>:</span></div><div class="line">        user = &#123;&#125;</div><div class="line">        data_user = graph.find_one(<span class="string">"User"</span>, <span class="string">"username"</span>, self.username)</div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> data_user:</div><div class="line">            data_admin = graph.find_one(<span class="string">"Admin"</span>, <span class="string">"username"</span>, self.username)</div><div class="line">            <span class="keyword">if</span> <span class="keyword">not</span> data_admin:</div><div class="line">                <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                print(user)</div><div class="line">                user[<span class="string">'username'</span>] = data_admin[<span class="string">'username'</span>]</div><div class="line">                user[<span class="string">'password'</span>] = data_admin[<span class="string">'password'</span>]</div><div class="line">                user[<span class="string">'label'</span>] = <span class="string">'Admin'</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            user[<span class="string">'username'</span>] = data_user[<span class="string">'username'</span>]</div><div class="line">            user[<span class="string">'password'</span>] = data_user[<span class="string">'password'</span>]</div><div class="line">            user[<span class="string">'label'</span>] = <span class="string">'User'</span></div><div class="line">        <span class="keyword">return</span> user</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">register</span><span class="params">(self, password)</span>:</span></div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.find():</div><div class="line">            user = Node(<span class="string">"User"</span>, username=self.username, password=bcrypt.encrypt(password))</div><div class="line">            graph.create(user)</div><div class="line">            cypher = <span class="string">'MATCH (admin:Admin) MATCH(user:User &#123;username:\''</span> + self.username + <span class="string">'\'&#125;) CREATE (admin)-[manage:Manage]-&gt;(user)'</span></div><div class="line">            graph.run(</div><div class="line">                <span class="string">'MATCH (admin:Admin) MATCH(user:User &#123;username:\''</span> + self.username + <span class="string">'\'&#125;) CREATE (admin)-[manage:Manage]-&gt;(user)'</span>)</div><div class="line">            <span class="keyword">return</span> <span class="keyword">True</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">verify_pass</span><span class="params">(self, password)</span>:</span></div><div class="line">        user = self.find()</div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> user:</div><div class="line">            <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">return</span> bcrypt.verify(password, user[<span class="string">"password"</span>])</div></pre></td></tr></table></figure>
<ul>
<li><code>authenticate()</code> 用于连接 Neo4j 数据库，三个参数依次是地址，用户名，密码。</li>
<li><code>find(self)</code> 用户查找用户。</li>
<li><code>register(self, password)</code> 注册用户。</li>
<li><code>verify_pass(self, password)</code> 登录验证。</li>
</ul>
<p><code>app.py</code> 代码：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">app = Flask(__name__)</div><div class="line">app.secret_key = <span class="string">'sugarsugar'</span></div><div class="line"></div><div class="line"><span class="meta">@app.route('/', methods=["GET", "POST"])</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">if</span> request.method == <span class="string">"POST"</span>:</div><div class="line">        <span class="keyword">if</span> <span class="string">"registeruser"</span> <span class="keyword">in</span> request.form:</div><div class="line">            username = request.form[<span class="string">'registeruser'</span>]</div><div class="line">            password = request.form[<span class="string">'password'</span>]</div><div class="line">            <span class="keyword">if</span> <span class="keyword">not</span> username <span class="keyword">or</span> <span class="keyword">not</span> password:</div><div class="line">                flash(<span class="string">'请输入用户名和密码'</span>)</div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                user = User(username)</div><div class="line">                print(user)</div><div class="line">                <span class="keyword">if</span> <span class="keyword">not</span> user.register(password):</div><div class="line">                    flash(<span class="string">'一个用户已经存在'</span>)</div><div class="line">                <span class="keyword">else</span>:</div><div class="line">                    flash(<span class="string">'注册成功'</span>)</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            username = request.form[<span class="string">'username'</span>]</div><div class="line">            password = request.form[<span class="string">'password'</span>]</div><div class="line"></div><div class="line">            user = User(username)</div><div class="line">            <span class="keyword">if</span> <span class="keyword">not</span> username <span class="keyword">or</span> <span class="keyword">not</span> password:</div><div class="line">                flash(<span class="string">'请输入用户名和密码'</span>)</div><div class="line">            <span class="keyword">elif</span> <span class="keyword">not</span> user.verify_pass(password):</div><div class="line">                flash(<span class="string">'无效登录'</span>)</div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                session[<span class="string">"username"</span>] = user.username</div><div class="line">                session[<span class="string">'label'</span>] = user.label</div><div class="line">                <span class="keyword">return</span> redirect(url_for(<span class="string">"main_view"</span>))</div><div class="line">    <span class="keyword">return</span> render_template(<span class="string">'login.html'</span>)</div></pre></td></tr></table></figure>
<ul>
<li><code>app.secret_key</code> 由于使用了 Session 所以必须要设置该项值。</li>
<li><code>flash()</code> 用于向网页发送信息。</li>
</ul>
<h4 id="数据查询"><a href="#数据查询" class="headerlink" title="数据查询"></a>数据查询</h4><p>在测试完登录功能之后，首先在 <code>templates</code> 文件夹下创建 <code>view.html</code> 文件，作为登录后跳转的页面：<br><img src="http://i.imgur.com/nzrPu1G.png" alt="主页面"><br>执行查询后相应的前端代码：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">search</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> query = $(<span class="string">"#search"</span>).find(<span class="string">"input[name=condition]"</span>).val();</div><div class="line">        <span class="keyword">var</span> flag = $(<span class="string">"#search"</span>).find(<span class="string">"input[name=trace]"</span>).prop(<span class="string">'checked'</span>);</div><div class="line">        <span class="keyword">if</span>(flag == <span class="literal">true</span> &amp;&amp; query == <span class="string">"ebay"</span>) &#123;</div><div class="line">            alert(<span class="string">"不可为根节点"</span>);</div><div class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">        &#125;</div><div class="line">        $.get(<span class="string">"/search"</span> , &#123;<span class="attr">q</span>: query, <span class="attr">f</span> : flag&#125;,</div><div class="line">            <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</div><div class="line">                <span class="keyword">if</span>(data.nodes.length &gt; <span class="number">0</span>)&#123;</div><div class="line">                    update(data.nodes, data.links);</div><div class="line">                    update_static(data.nodes);</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span></div><div class="line">                    alert(<span class="string">"查询结果为空"</span>);</div><div class="line">            &#125;, <span class="string">"json"</span>);</div><div class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    $(<span class="string">"#search"</span>).submit(search);</div><div class="line">    search();</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>后台处理代码：</p>
<ul>
<li><p><code>app.py</code> 代码：</p>
  <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@app.route('/search')</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_search</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        q = request.args.get(<span class="string">'q'</span>, <span class="number">0</span>)</div><div class="line">        f = request.args.get(<span class="string">'f'</span>, <span class="number">1</span>)</div><div class="line">    <span class="keyword">except</span> KeyError:</div><div class="line">        <span class="keyword">return</span> []</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        user = User(session.get(<span class="string">"username"</span>))</div><div class="line">        results = user.search_graph(q, f)</div><div class="line">        <span class="keyword">return</span> results</div></pre></td></tr></table></figure>
</li>
<li><p><code>models.py</code> 代码：</p>
  <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">search_graph</span><span class="params">(self, condition, flag=False)</span>:</span></div><div class="line">    nodes = []</div><div class="line">    rels = []</div><div class="line">    i = <span class="number">0</span></div><div class="line">    <span class="comment">#关系查询</span></div><div class="line">    query = <span class="string">"MATCH (m)&lt;-[:BELONG]-(a) WHERE m.name CONTAINS \'"</span> + condition + <span class="string">"\' or a.name CONTAINS \'"</span> + condition + \</div><div class="line">            <span class="string">"\' RETURN properties(m) as start_node, labels(m) as labels, "</span> \</div><div class="line">            <span class="string">"collect(properties(a)) as cast,collect(labels(a)) as cast_labels"</span></div><div class="line">    <span class="comment">#溯源查询</span></div><div class="line">    query_trace = <span class="string">"Match (n) WHERE n.name contains \'"</span> + condition + \</div><div class="line">                  <span class="string">"\' MATCH path = shortestPath( (m:Website)-[:BELONG*..5]-(n) )"</span> \</div><div class="line">                  <span class="string">" where labels(n)='Sort' or labels(n)='GOODS'"</span> \</div><div class="line">                  <span class="string">" RETURN nodes(path) AS nodes, EXTRACT(node IN nodes(path) | ID(node)) AS ids "</span> \</div><div class="line">                  <span class="string">",EXTRACT(node IN nodes(path) | labels(node)) AS labels"</span></div><div class="line">    results = graph.run(query)</div><div class="line">    <span class="keyword">if</span> flag == <span class="string">"true"</span> <span class="keyword">and</span> condition:</div><div class="line">        nodes_act = []</div><div class="line">        rels_act = []</div><div class="line">        <span class="keyword">for</span> node_trace, id_trace, label_trace <span class="keyword">in</span> graph.run(query_trace):</div><div class="line">            j = <span class="number">0</span></div><div class="line">            <span class="keyword">for</span> node_ori <span class="keyword">in</span> node_trace:</div><div class="line">                node_act = &#123;&#125;</div><div class="line">                node_keys = list(node_ori.keys())</div><div class="line">                <span class="keyword">for</span> key <span class="keyword">in</span> node_keys:</div><div class="line">                    node_act[key] = node_ori.get(key)</div><div class="line">                node_act[<span class="string">'label'</span>] = label_trace[j][<span class="number">0</span>]</div><div class="line">                <span class="keyword">try</span>:</div><div class="line">                    target_act = nodes_act.index(node_act)</div><div class="line">                    j += <span class="number">1</span></div><div class="line">                <span class="keyword">except</span> ValueError:</div><div class="line">                    target_act = len(nodes_act)</div><div class="line">                    nodes_act.append(node_act)</div><div class="line">                    j += <span class="number">1</span></div><div class="line">                <span class="keyword">if</span> j &lt; len(node_trace):</div><div class="line">                    <span class="keyword">try</span>:</div><div class="line">                        source_act = nodes_act.index(self.get_node(node_trace[j], label_trace[j]))</div><div class="line">                    <span class="keyword">except</span> ValueError:</div><div class="line">                        source_act = len(nodes_act)</div><div class="line">                    rels_act.append(&#123;<span class="string">"source"</span>: source_act, <span class="string">"target"</span>: target_act&#125;)</div><div class="line">        <span class="keyword">return</span> jsonify(&#123;<span class="string">"nodes"</span>: nodes_act, <span class="string">"links"</span>: rels_act&#125;)</div><div class="line"></div><div class="line">    <span class="keyword">for</span> start_nodes, start_labels, end_nodes, end_labels <span class="keyword">in</span> results:</div><div class="line">        keys = list(start_nodes.keys())</div><div class="line">        node = &#123;&#125;</div><div class="line">        <span class="keyword">for</span> key <span class="keyword">in</span> keys:</div><div class="line">            node[key] = start_nodes.get(key)</div><div class="line">        node[<span class="string">'label'</span>] = start_labels[<span class="number">0</span>]</div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            target = nodes.index(node)</div><div class="line">        <span class="keyword">except</span> ValueError:</div><div class="line">            nodes.append(node)</div><div class="line">            target = i</div><div class="line">            i += <span class="number">1</span></div><div class="line">        <span class="keyword">for</span> end_node, label <span class="keyword">in</span> zip(end_nodes, end_labels):</div><div class="line">            end_keys = list(end_node.keys())</div><div class="line">            end = &#123;&#125;</div><div class="line">            <span class="keyword">for</span> key <span class="keyword">in</span> end_keys:</div><div class="line">                end[key] = end_node.get(key)</div><div class="line">            end[<span class="string">'label'</span>] = label[<span class="number">0</span>]</div><div class="line">            <span class="keyword">try</span>:</div><div class="line">                source = nodes.index(end)</div><div class="line">            <span class="keyword">except</span> ValueError:</div><div class="line">                nodes.append(end)</div><div class="line">                source = i</div><div class="line">                i += <span class="number">1</span></div><div class="line">            rels.append(&#123;<span class="string">"source"</span>: source, <span class="string">"target"</span>: target&#125;)</div><div class="line">    <span class="keyword">return</span> jsonify(&#123;<span class="string">"nodes"</span>: nodes, <span class="string">"links"</span>: rels&#125;)</div></pre></td></tr></table></figure>
<ul>
<li><p>数据的可视化采用 d3.js，具体过程参考<a href="/2017/04/13/d3-js绘制力导向图/" title="d3.js 绘制力导向图">d3.js 绘制力导向图</a>，返回的数据格式限定为 Json 格式，nodes 保存节点信息，links 保存节点关系：</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&#123;&quot;nodes&quot;: [&#123;&apos;label&apos;: &apos;Website&apos;, &apos;name&apos;: &apos;ebay&apos;&#125;, &#123;&apos;label&apos;: &apos;Sort&apos;, &apos;name&apos;: &apos;Health &amp; Beauty&apos;&#125;, &#123;&apos;label&apos;: &apos;Sort&apos;, &apos;name&apos;: &apos;Musical Instruments &amp; Gear&apos;&#125;],</div><div class="line"> &quot;links&quot;:[&#123;&apos;target&apos;: 0, &apos;source&apos;: 1&#125;, &#123;&apos;target&apos;: 0, &apos;source&apos;: 2&#125;]&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<p>查询效果：<br><img src="http://i.imgur.com/sg9rkGt.png" alt="查询效果"></p>
<hr>
<h4 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h4><p><a href="http://py2neo.org/v3/index.html#" target="_blank" rel="external">Py2neo v3 Handbook</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;需求&quot;&gt;&lt;a href=&quot;#需求&quot; class=&quot;headerlink&quot; title=&quot;需求&quot;&gt;&lt;/a&gt;需求&lt;/h4&gt;&lt;p&gt;核心需求如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;管理系统登录&lt;/li&gt;
&lt;li&gt;从 Neo4j 中获取数据信息图形化显示出来&lt;/li&gt;
&lt;li&gt;节点的关系查询及溯源查询&lt;/li&gt;
&lt;li&gt;对 Neo4j 进行节点的增删改
    
    </summary>
    
      <category term="Python 学习" scheme="http://www.rookieyang.cn/categories/Python-%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Python" scheme="http://www.rookieyang.cn/tags/Python/"/>
    
      <category term="Flask" scheme="http://www.rookieyang.cn/tags/Flask/"/>
    
      <category term="Neo4j" scheme="http://www.rookieyang.cn/tags/Neo4j/"/>
    
  </entry>
  
  <entry>
    <title>Python 下 Flask 结合 Neo4j 构建管理系统（二）</title>
    <link href="http://www.rookieyang.cn/2017/04/12/Python%E4%B8%8BFlask%E7%BB%93%E5%90%88Neo4j%E6%9E%84%E5%BB%BA%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <id>http://www.rookieyang.cn/2017/04/12/Python下Flask结合Neo4j构建管理系统（二）/</id>
    <published>2017-04-12T06:34:52.000Z</published>
    <updated>2017-04-12T12:44:05.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Neo4j-简介"><a href="#Neo4j-简介" class="headerlink" title="Neo4j 简介"></a>Neo4j 简介</h4><blockquote>
<p>Neo4j 是一个高性能的，NOSQL 图形数据库，它将结构化数据存储在网络上而不是表中。它是一个嵌入式的、基于磁盘的、具备完全的事务特性的 Java 持久化引擎，但是它将结构化数据存储在网络(从数学角度叫做图)上而不是表中。</p>
</blockquote>
<a id="more"></a>
<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>进入<a href="https://neo4j.com/download/" target="_blank" rel="external"> Neo4j 下载地址</a>选择社区版进行下载安装。</p>
<h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><p>Neo4j 提供了 Cypher 查询语言对数据库数据进行操作，在使用 Neo4j 之前必须先了解 Cypher，可以参考官方提供了一些例程和开发文档：<br><a href="https://neo4j.com/developer/cypher-query-language/" target="_blank" rel="external">Intro to Cypher</a><br><a href="https://neo4j.com/docs/developer-manual/3.1/" target="_blank" rel="external">The Neo4j Developer Manual v3.1</a><br>第一个介绍了 Cypher 的一些基本概念方便去理解 Cypher 语言，第二个则是一份开发者文档，详细介绍了各操作的含义以及一些示例语句。<br>在了解 Cypher 后，就可以利用 Neo4j 控制台做一些基本的查询测试：</p>
<ul>
<li>首先需要开启服务器：<br>  <img src="https://lh3.googleusercontent.com/-so2pSsowOT0/WO3po5DA8aI/AAAAAAAAAL0/L7VMQY4n1co/I/%25255BUNSET%25255D.png" alt="开启服务器"></li>
<li>在开启服务器后进入 <code>http://localhost:7474</code> 第一次进入需要设置密码</li>
<li><p>在主界面中选择 <code>Jump into code</code>，之后选择 <code>Movie Graph</code> 中的 Create a graph，则可以看到一个 Neo4j 官方提供的构造数据图的代码，点击之后运行即可。<br><img src="https://lh3.googleusercontent.com/-dXvr4E1z9oc/WO3tVuy8EpI/AAAAAAAAAMI/ssK8RCaVfvw/I/Neo4j.png" alt="Neo4j界面"><br><img src="https://lh3.googleusercontent.com/-fwxoipgtmSk/WO3tWGAMtEI/AAAAAAAAAMM/8robCpSMV3s/I/%25255BUNSET%25255D.png" alt="代码"><br><img src="https://lh3.googleusercontent.com/-WTQX3ubZ_ck/WO3wlZltR8I/AAAAAAAAAMY/jCkGXWHrdEg/I/%25255BUNSET%25255D.png" alt="创建结果"></p>
</li>
<li><p>在创建了数据图之后，点击左侧的第一个导航栏，可以看见数据图的各项信息。<br><img src="https://lh3.googleusercontent.com/-WMpmBZB9Te8/WO3wloFpI1I/AAAAAAAAAMc/vdEu688RneM/I/%25255BUNSET%25255D.png" alt="信息"></p>
</li>
<li><p>查询<br>  这里以查询节点 <code>name</code> 属性为 Audrey Tautou 到节点 <code>title</code> 属性为 As Good as It Gets 且节点关系为 <code>ACTED_IN</code> 间隔不超过 5 的最短路径为例，在输入框中输入如下代码：</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">MATCH (you &#123;name:&quot;Audrey Tautou&quot;&#125;)</div><div class="line">MATCH (expert &#123;title:&quot;As Good as It Gets&quot;&#125;)</div><div class="line">MATCH path = shortestPath( (you)-[:ACTED_IN*..5]-(expert) )</div><div class="line">RETURN path</div></pre></td></tr></table></figure>
<p>  运行之后结果如下：<br>  <img src="https://lh3.googleusercontent.com/-3k-Bn2cKTWE/WO3zAkAsEzI/AAAAAAAAAMw/ZtGQhPDzj_Q/I/%25255BUNSET%25255D.png" alt="最短路径"></p>
</li>
</ul>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;Neo4j-简介&quot;&gt;&lt;a href=&quot;#Neo4j-简介&quot; class=&quot;headerlink&quot; title=&quot;Neo4j 简介&quot;&gt;&lt;/a&gt;Neo4j 简介&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;Neo4j 是一个高性能的，NOSQL 图形数据库，它将结构化数据存储在网络上而不是表中。它是一个嵌入式的、基于磁盘的、具备完全的事务特性的 Java 持久化引擎，但是它将结构化数据存储在网络(从数学角度叫做图)上而不是表中。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Python 学习" scheme="http://www.rookieyang.cn/categories/Python-%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Python" scheme="http://www.rookieyang.cn/tags/Python/"/>
    
      <category term="Neo4j" scheme="http://www.rookieyang.cn/tags/Neo4j/"/>
    
  </entry>
  
  <entry>
    <title>Python 下 Flask 结合 Neo4j 构建管理系统（一）</title>
    <link href="http://www.rookieyang.cn/2017/04/09/Python%E4%B8%8BFlask%E7%BB%93%E5%90%88Neo4j%E6%9E%84%E5%BB%BA%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>http://www.rookieyang.cn/2017/04/09/Python下Flask结合Neo4j构建管理系统（一）/</id>
    <published>2017-04-09T03:09:28.000Z</published>
    <updated>2017-04-13T02:56:07.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><blockquote>
<p>Flask 是一个使用 Python 编写的轻量级 Web 应用框架。其 WSGI 工具箱采用 Werkzeug ，模板引擎则使用 Jinja2 。</p>
</blockquote>
<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>在终端中输入 <code>sudo pip install Flask</code> 即可进行安装（如果不想进行全局安装，请参考官方文档）。<a id="more"></a></p>
<h4 id="创建文件夹"><a href="#创建文件夹" class="headerlink" title="创建文件夹"></a>创建文件夹</h4><p>首先需要创建如下结构的文件夹：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">/flaskr</div><div class="line">    /static</div><div class="line">    /templates</div></pre></td></tr></table></figure>
<ul>
<li>flaskr 是工程文件夹名</li>
<li>static 是用于放置 css 和 javascript 文件的文件夹</li>
<li>templates 是放置网页模板的文件夹</li>
<li>如果用 PyCharm 开发，在创建 templates 文件夹后需要按住快捷键 <code>Command + ,</code> 在 Project→Project Structure，选择 templates 文件夹后点击 <code>Mark as</code> 中的 <code>Templates</code></li>
</ul>
<h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><p>在 flaskr 目录下创建 <code>app.py</code> 的文件，输入如下代码：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</div><div class="line">app = Flask(__name__)</div><div class="line"></div><div class="line"><span class="meta">@app.route('/')</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello_world</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">return</span> <span class="string">'Hello World!'</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    app.run()</div></pre></td></tr></table></figure>
<ul>
<li><code>app = Flask(__name__)</code> 创建一个该类的实例，第一个参数是应用模块或者包的名称。 如果你使用单一的模块（如本例），你应该使用 <strong>name</strong> ，因为模块的名称将会因其作为单独应用启动还是作为模块导入而有不同（ 也即是 ‘<strong>main</strong>‘ 或实际的导入名）。这是必须的，这样 Flask 才知道到哪去找模板、静态文件等等。</li>
<li><code>__name__</code> 指当前的模块名，当模块直接运行时，<code>__name__</code> 为 <code>__main__</code>，当模块被导入运行时，<code>__name__</code> 为模块名字。</li>
<li>route() 装饰器告诉 Flask 什么样的URL 能触发我们的函数，函数的名字也在生成 URL 时被特定的函数采用，这个函数返回我们想要显示在用户浏览器中的信息。</li>
</ul>
<h4 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h4><p>运行之后进入 <code>http://localhost:5000</code> 可以看到如下结果：<br><img src="https://lh3.googleusercontent.com/-_sGJoF6cnik/WO2ey0xoCLI/AAAAAAAAALY/t1d9E__vrXE/I/%25255BUNSET%25255D.png" alt="结果"></p>
<hr>
<h4 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h4><p><a href="http://docs.jinkan.org/docs/flask/index.html" target="_blank" rel="external">Flask 文档</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;Flask 是一个使用 Python 编写的轻量级 Web 应用框架。其 WSGI 工具箱采用 Werkzeug ，模板引擎则使用 Jinja2 。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h4&gt;&lt;p&gt;在终端中输入 &lt;code&gt;sudo pip install Flask&lt;/code&gt; 即可进行安装（如果不想进行全局安装，请参考官方文档）。
    
    </summary>
    
      <category term="Python 学习" scheme="http://www.rookieyang.cn/categories/Python-%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Python" scheme="http://www.rookieyang.cn/tags/Python/"/>
    
      <category term="Flask" scheme="http://www.rookieyang.cn/tags/Flask/"/>
    
  </entry>
  
  <entry>
    <title>Python 下用 Scrapy 采集知网期刊数据（四）</title>
    <link href="http://www.rookieyang.cn/2017/04/08/Python%E4%B8%8B%E7%94%A8Scrapy%E9%87%87%E9%9B%86%E7%9F%A5%E7%BD%91%E6%9C%9F%E5%88%8A%E6%95%B0%E6%8D%AE%EF%BC%88%E5%9B%9B%EF%BC%89/"/>
    <id>http://www.rookieyang.cn/2017/04/08/Python下用Scrapy采集知网期刊数据（四）/</id>
    <published>2017-04-08T08:56:50.000Z</published>
    <updated>2017-04-08T10:43:23.000Z</updated>
    
    <content type="html"><![CDATA[<p>在<a href="/2017/04/08/Python下用Scrapy采集知网期刊数据（三）/" title="Python 下用 Scrapy 采集知网期刊数据（三）">Python 下用 Scrapy 采集知网期刊数据（三）</a>中采集了所需数据，接下来该进行的就是数据的存储和导出。</p>
<h4 id="数据存储"><a href="#数据存储" class="headerlink" title="数据存储"></a>数据存储</h4><ol>
<li>创建 MySql 表    <a id="more"></a><br> <img src="http://i.imgur.com/OJF8SjS.png" alt="表格"><br> <img src="http://i.imgur.com/WpN2v4x.png" alt="表格"></li>
<li>导入 pymysql 库<br> <code>import pymysql</code></li>
<li><p>配置 MySql<br> 在 <code>setting.py</code> 文件中写入下列配置代码： </p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"># start MySQL database configure setting</div><div class="line">MYSQL_HOST = &apos;localhost&apos;</div><div class="line">MYSQL_DBNAME = &apos;数据库名&apos;</div><div class="line">MYSQL_USER = &apos;登录名&apos;</div><div class="line">MYSQL_PASSWD = &apos;密码&apos;</div><div class="line"># end of MySQL database configure setting</div></pre></td></tr></table></figure>
</li>
<li><p>编写 item pipeline</p>
<blockquote>
<p>每个 item pipeline 组件(有时称之为 “Item Pipeline” )是实现了简单方法的Python类。他们接收到Item并通过它执行一些行为，同时也决定此Item是否继续通过pipeline，或是被丢弃而不再进行处理。</p>
</blockquote>
<p> 以采集引证文献的 item pipeline 为例：</p>
 <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">CnkiPipeline</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        self.connect = pymysql.connect(</div><div class="line">            host=settings.MYSQL_HOST,</div><div class="line">            db=settings.MYSQL_DBNAME,</div><div class="line">            user=settings.MYSQL_USER,</div><div class="line">            passwd=settings.MYSQL_PASSWD,</div><div class="line">            charset=<span class="string">'utf8'</span>,</div><div class="line">            use_unicode=<span class="keyword">True</span>)</div><div class="line">        self.cursor = self.connect.cursor()</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_item</span><span class="params">(self, item, spider)</span>:</span></div><div class="line">        <span class="keyword">if</span> item.__class__ == Quote:</div><div class="line">            <span class="keyword">try</span>:</div><div class="line">                self.cursor.execute(<span class="string">"""select * from reference where literature_title = %s and quote_title = %s AND literature_author = %s</span></div><div class="line">                                      AND literature_journalName = %s AND literature_time = %s""",</div><div class="line">                                    (item[<span class="string">"paper_title"</span>], str(item[<span class="string">'quote_title'</span>]), item[<span class="string">'paper_author'</span>],</div><div class="line">                                    item[<span class="string">'paper_journalName'</span>], item[<span class="string">'paper_time'</span>]))</div><div class="line">                ret = self.cursor.fetchone()</div><div class="line">                <span class="keyword">if</span> ret:</div><div class="line">                    self.cursor.execute(</div><div class="line">                        <span class="string">"""update reference set literature_title = %s,literature_author = %s, literature_journalName = %s,</span></div><div class="line">                          literature_time = %s,quote_title = %s</div><div class="line">                          where literature_title = %s and quote_title = %s AND literature_author = %s""",</div><div class="line">                        (str(item[<span class="string">'paper_title'</span>]),</div><div class="line">                         str(item[<span class="string">'paper_author'</span>]),</div><div class="line">                         str(item[<span class="string">'paper_journalName'</span>]),</div><div class="line">                         str(item[<span class="string">'paper_time'</span>]),</div><div class="line">                         str(item[<span class="string">'quote_title'</span>]),</div><div class="line">                         str(item[<span class="string">'paper_title'</span>]),</div><div class="line">                         str(item[<span class="string">'quote_title'</span>]),</div><div class="line">                         str(item[<span class="string">'paper_author'</span>])))</div><div class="line">                <span class="keyword">else</span>:</div><div class="line">                    self.cursor.execute(</div><div class="line">                        <span class="string">"""insert into reference(literature_title,literature_author,literature_journalName,</span></div><div class="line">                          literature_time,quote_title)</div><div class="line">                          value (%s,%s,%s,%s,%s)""",</div><div class="line">                        (str(item[<span class="string">'paper_title'</span>]),</div><div class="line">                         str(item[<span class="string">'paper_author'</span>]),</div><div class="line">                         str(item[<span class="string">'paper_journalName'</span>]),</div><div class="line">                         str(item[<span class="string">'paper_time'</span>]),</div><div class="line">                         str(item[<span class="string">'quote_title'</span>])))</div><div class="line">                self.connect.commit()</div><div class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> error:</div><div class="line">                log(error)</div><div class="line">            <span class="keyword">return</span> item</div></pre></td></tr></table></figure>
<p> item pipeline 中需要判断 item 的类型是否是需要被处理的类型，进而进行查询判断该条记录是否在数据库中存在，如果存在则进行更新，否则进行插入。</p>
</li>
<li>爬取结果<br> <img src="http://i.imgur.com/Vp6bpYh.png" alt="文献"><br> <img src="http://i.imgur.com/uG7AP2Z.png" alt="引证文献"></li>
</ol>
<h4 id="数据导出"><a href="#数据导出" class="headerlink" title="数据导出"></a>数据导出</h4><p>为了将数据导出为 Excel 格式，利用到了<code>xlrd</code>，<code>xlsxwriter</code>，<code>xlutils</code> 库，导出代码如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">try</span>:</div><div class="line">    <span class="keyword">with</span> connect.cursor() <span class="keyword">as</span> cursor:</div><div class="line">        <span class="comment"># Create a new record</span></div><div class="line">        sql_quote = <span class="string">"select * from periodical_data where journalName = %s and publicationDate = %s ORDER BY referenceNum DESC"</span></div><div class="line">        sql_reference = <span class="string">"select * from reference where quote_title = %s"</span></div><div class="line">        cursor.execute(sql_quote, (title, publicationDate))</div><div class="line">        results = cursor.fetchall()</div><div class="line">        <span class="comment">#oneup 用于记录引用数在每年一次以上的文献数，onelow 用于记录引用数在每年一次以下的文献数，noone 用于记录没有被引用的文献数</span></div><div class="line">        oneup=<span class="number">0</span></div><div class="line">        onelow=<span class="number">0</span></div><div class="line">        noone=<span class="number">0</span></div><div class="line">        endrows=<span class="number">0</span></div><div class="line">        <span class="keyword">for</span> result <span class="keyword">in</span> results:</div><div class="line">            reference=<span class="string">""</span></div><div class="line">            years=[]</div><div class="line">            resultwork = xlrd.open_workbook(year + title + <span class="string">".xls"</span>)</div><div class="line">            sheet1 = resultwork.sheet_by_index(<span class="number">0</span>)</div><div class="line">            old_excel = copy.copy(resultwork)</div><div class="line">            sheet_write = old_excel.get_sheet(<span class="number">0</span>)</div><div class="line">            rows = sheet1.nrows</div><div class="line">            cols = sheet1.ncols</div><div class="line">            quote_title = result[<span class="string">'title'</span>]</div><div class="line">            <span class="keyword">if</span> result[<span class="string">'referenceNum'</span>] != <span class="string">"0"</span>:</div><div class="line">                cursor.execute(sql_reference, quote_title)</div><div class="line">                reference = cursor.fetchall()</div><div class="line">            <span class="keyword">if</span> result[<span class="string">'referenceNum'</span>]:</div><div class="line">                <span class="keyword">if</span> result[<span class="string">'referenceNum'</span>] &gt; (<span class="number">2016</span>-int(year)):</div><div class="line">                    <span class="keyword">if</span> oneup == <span class="number">0</span>:</div><div class="line">                        sheet_write.write(rows, <span class="number">0</span>, <span class="string">"引用每年一次以上"</span>)</div><div class="line">                        rows = rows + <span class="number">1</span></div><div class="line">                    oneup = oneup + <span class="number">1</span></div><div class="line">                    sheet_write.write(rows, <span class="number">0</span>, <span class="string">"1"</span>)</div><div class="line">                    sheet_write.write(rows, <span class="number">1</span>, result[<span class="string">'title'</span>])</div><div class="line">                    sheet_write.write(rows, <span class="number">2</span>, result[<span class="string">'author'</span>])</div><div class="line">                    sheet_write.write(rows, <span class="number">3</span>, result[<span class="string">'journalName'</span>])</div><div class="line">                    sheet_write.write(rows, <span class="number">4</span>, result[<span class="string">'publicationDate'</span>])</div><div class="line">                    sheet_write.write(rows, <span class="number">5</span>, result[<span class="string">'referenceNum'</span>])</div><div class="line">                    sheet_write.write(rows, <span class="number">6</span>, result[<span class="string">'downloadNum'</span>])</div><div class="line">                <span class="keyword">else</span>:</div><div class="line">                    <span class="keyword">if</span> onelow == <span class="number">0</span>:</div><div class="line">                        sheet_write.write(rows, <span class="number">0</span>, <span class="string">"引用每年一次以下"</span>)</div><div class="line">                        rows = rows + <span class="number">1</span></div><div class="line">                    onelow = onelow + <span class="number">1</span></div><div class="line">                    sheet_write.write(rows, <span class="number">0</span>, <span class="string">"1"</span>)</div><div class="line">                    sheet_write.write(rows, <span class="number">1</span>, result[<span class="string">'title'</span>])</div><div class="line">                    sheet_write.write(rows, <span class="number">2</span>, result[<span class="string">'author'</span>])</div><div class="line">                    sheet_write.write(rows, <span class="number">3</span>, result[<span class="string">'journalName'</span>])</div><div class="line">                    sheet_write.write(rows, <span class="number">4</span>, result[<span class="string">'publicationDate'</span>])</div><div class="line">                    sheet_write.write(rows, <span class="number">5</span>, result[<span class="string">'referenceNum'</span>])</div><div class="line">                    sheet_write.write(rows, <span class="number">6</span>, result[<span class="string">'downloadNum'</span>])</div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                <span class="keyword">if</span> noone == <span class="number">0</span>:</div><div class="line">                    sheet_write.write(rows, <span class="number">0</span>, <span class="string">"没有引用"</span>)</div><div class="line">                    rows = rows + <span class="number">1</span></div><div class="line">                noone = noone + <span class="number">1</span></div><div class="line">                sheet_write.write(rows, <span class="number">0</span>, <span class="string">"1"</span>)</div><div class="line">                sheet_write.write(rows, <span class="number">1</span>, result[<span class="string">'title'</span>])</div><div class="line">                sheet_write.write(rows, <span class="number">2</span>, result[<span class="string">'author'</span>])</div><div class="line">                sheet_write.write(rows, <span class="number">3</span>, result[<span class="string">'journalName'</span>])</div><div class="line">                sheet_write.write(rows, <span class="number">4</span>, result[<span class="string">'publicationDate'</span>])</div><div class="line">                sheet_write.write(rows, <span class="number">5</span>, result[<span class="string">'referenceNum'</span>])</div><div class="line">                sheet_write.write(rows, <span class="number">6</span>, result[<span class="string">'downloadNum'</span>])</div><div class="line"></div><div class="line">            <span class="keyword">for</span> row <span class="keyword">in</span> range(len(reference)):</div><div class="line">                sheet_write.write(rows + row + <span class="number">1</span>, <span class="number">0</span>, <span class="string">"0"</span>)</div><div class="line">                sheet_write.write(rows+row+<span class="number">1</span>, <span class="number">1</span>, reference[row][<span class="string">'literature_title'</span>])</div><div class="line">                sheet_write.write(rows+row+<span class="number">1</span>, <span class="number">2</span>, reference[row][<span class="string">'literature_author'</span>])</div><div class="line">                sheet_write.write(rows+row+<span class="number">1</span>, <span class="number">3</span>, reference[row][<span class="string">'literature_journalName'</span>])</div><div class="line">                sheet_write.write(rows+row+<span class="number">1</span>, <span class="number">4</span>, reference[row][<span class="string">'literature_time'</span>])</div><div class="line">                years.append(reference[row][<span class="string">'literature_time'</span>])</div><div class="line">            c = Counter(years)</div><div class="line">            print(c.most_common(<span class="number">1</span>))</div><div class="line">            print(result[<span class="string">'title'</span>])</div><div class="line">            <span class="keyword">if</span> result[<span class="string">'referenceNum'</span>]:</div><div class="line">                <span class="keyword">if</span> result[<span class="string">'referenceNum'</span>] &gt; (<span class="number">2016</span>-int(year)):</div><div class="line">                    <span class="keyword">if</span> c.most_common(<span class="number">1</span>):</div><div class="line">                        <span class="keyword">for</span> most <span class="keyword">in</span> c.most_common(<span class="number">1</span>):</div><div class="line">                            most_year = str(most).split(<span class="string">","</span>)[<span class="number">0</span>].split(<span class="string">"("</span>)[<span class="number">1</span>]</div><div class="line">                            most_time = str(most).split(<span class="string">","</span>)[<span class="number">1</span>].split(<span class="string">")"</span>)[<span class="number">0</span>]</div><div class="line">                            sheet_write.write(rows, <span class="number">7</span>, most_year)</div><div class="line">                            sheet_write.write(rows, <span class="number">8</span>, most_time)</div><div class="line">            old_excel.save(year + title + <span class="string">".xls"</span>)</div><div class="line">            endrows = rows + len(reference) + <span class="number">2</span></div><div class="line">        resultwork = xlrd.open_workbook(year + title + <span class="string">".xls"</span>)</div><div class="line">        sheet1 = resultwork.sheet_by_index(<span class="number">0</span>)</div><div class="line">        old_excel = copy.copy(resultwork)</div><div class="line">        sheet_write = old_excel.get_sheet(<span class="number">0</span>)</div><div class="line">        sheet_write.write(endrows, <span class="number">0</span>, <span class="string">"每年引用次数一次以上百分比："</span> + str(float(oneup)/len(results)))</div><div class="line">        sheet_write.write(endrows+<span class="number">1</span>, <span class="number">0</span>, <span class="string">"每年引用次数一次以下百分比："</span> + str(float(onelow) / len(results)))</div><div class="line">        sheet_write.write(endrows+<span class="number">2</span>, <span class="number">0</span>, <span class="string">"每年没有引用百分比："</span> + str(float(noone) / len(results)))</div><div class="line">        old_excel.save(year + title + <span class="string">".xls"</span>)</div><div class="line"><span class="keyword">finally</span>:</div><div class="line">    connect.close()</div></pre></td></tr></table></figure>
<p>导出效果：<br><img src="http://i.imgur.com/sugoyV6.png" alt="excel"></p>
<hr>
<h4 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h4><p><a href="https://doc.scrapy.org/en/master/intro/tutorial.html" target="_blank" rel="external">Scrapy 文档</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在&lt;a href=&quot;/2017/04/08/Python下用Scrapy采集知网期刊数据（三）/&quot; title=&quot;Python 下用 Scrapy 采集知网期刊数据（三）&quot;&gt;Python 下用 Scrapy 采集知网期刊数据（三）&lt;/a&gt;中采集了所需数据，接下来该进行的就是数据的存储和导出。&lt;/p&gt;
&lt;h4 id=&quot;数据存储&quot;&gt;&lt;a href=&quot;#数据存储&quot; class=&quot;headerlink&quot; title=&quot;数据存储&quot;&gt;&lt;/a&gt;数据存储&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;创建 MySql 表
    
    </summary>
    
      <category term="Python 学习" scheme="http://www.rookieyang.cn/categories/Python-%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Python" scheme="http://www.rookieyang.cn/tags/Python/"/>
    
      <category term="Scrapy" scheme="http://www.rookieyang.cn/tags/Scrapy/"/>
    
  </entry>
  
  <entry>
    <title>Python 下用 Scrapy 采集知网期刊数据（三）</title>
    <link href="http://www.rookieyang.cn/2017/04/08/Python%E4%B8%8B%E7%94%A8Scrapy%E9%87%87%E9%9B%86%E7%9F%A5%E7%BD%91%E6%9C%9F%E5%88%8A%E6%95%B0%E6%8D%AE%EF%BC%88%E4%B8%89%EF%BC%89/"/>
    <id>http://www.rookieyang.cn/2017/04/08/Python下用Scrapy采集知网期刊数据（三）/</id>
    <published>2017-04-08T02:29:56.000Z</published>
    <updated>2017-04-14T08:05:17.000Z</updated>
    
    <content type="html"><![CDATA[<p>在<a href="/2017/04/06/Python下用Scrapy采集知网期刊数据（二）/" title="Python 下用 Scrapy 采集知网期刊数据（二）">Python 下用 Scrapy 采集知网期刊数据（二）</a>中已经获取了期刊的搜索结果，接下来就可以开始采集文献数据了。</p>
<h4 id="采集期刊文献数据"><a href="#采集期刊文献数据" class="headerlink" title="采集期刊文献数据"></a>采集期刊文献数据</h4><ol>
<li><p>定义 Items</p>
<blockquote>
<p>为了定义常用的输出数据，Scrapy提供了 Item 类。 Item 对象是种简单的容器，保存了爬取到得数据。 其提供了 类似于词典(dictionary-like) 的API以及用于声明可用字段的简单语法。</p>
</blockquote>
 <a id="more"></a>
<p> 在 <code>items.py</code> 文件中增加如下代码：</p>
 <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">PaperItem</span><span class="params">(scrapy.Item)</span>:</span></div><div class="line">    title = scrapy.Field()</div><div class="line">    author = scrapy.Field()</div><div class="line">    journalName = scrapy.Field()</div><div class="line">    publicationDate = scrapy.Field()</div><div class="line">    referenceNum = scrapy.Field()</div><div class="line">    downloadNum = scrapy.Field()</div></pre></td></tr></table></figure>
</li>
<li><p>提取数据</p>
 <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(self, response)</span>:</span></div><div class="line">    <span class="keyword">if</span> <span class="string">"rurl"</span> <span class="keyword">in</span> str(requests_url):</div><div class="line">        iden_code_url = str(requests_url).split(<span class="string">"GET"</span>)[<span class="number">1</span>].split(<span class="string">"&gt;"</span>)[<span class="number">0</span>].strip()</div><div class="line">        <span class="keyword">yield</span> scrapy.Request(iden_code_url, meta=&#123;<span class="string">'cookiejar'</span>: response.meta[<span class="string">'cookiejar'</span>]&#125;, callback=self.handleCode, dont_filter=<span class="keyword">True</span>)</div><div class="line"></div><div class="line">    items = PaperItem()</div><div class="line">    <span class="keyword">for</span> result <span class="keyword">in</span> response.css(<span class="string">'tr[bgcolor]'</span>):</div><div class="line">        items[<span class="string">'title'</span>] = result.css(<span class="string">"td &gt; a[class=fz14]"</span>).xpath(<span class="string">"string(.)"</span>).extract_first()</div><div class="line">        items[<span class="string">'author'</span>] = result.css(<span class="string">"td[class=author_flag] &gt; a[class=KnowledgeNetLink]::text"</span>).extract()</div><div class="line">        items[<span class="string">'journalName'</span>] = result.css(<span class="string">"td[class=cjfdyxyz]"</span>).xpath(<span class="string">"string(a)"</span>).extract_first()</div><div class="line">        items[<span class="string">'publicationDate'</span>] = result.css(<span class="string">"td[align] &gt; a[target=_blank]::text"</span>).extract_first().split(<span class="string">"/"</span>)[<span class="number">0</span>]</div><div class="line">        items[<span class="string">'referenceNum'</span>] = result.css(<span class="string">"span[class=KnowledgeNetcont] &gt; a::text"</span>).extract_first()</div><div class="line">        items[<span class="string">'downloadNum'</span>] = result.css(<span class="string">"span[class=downloadCount] &gt; a::text"</span>).extract_first()</div><div class="line">        <span class="keyword">yield</span> items</div><div class="line">    next_page = response.xpath(<span class="string">"//div/a[text()='下一页']/@href"</span>).extract()</div><div class="line">    <span class="keyword">if</span> next_page:</div><div class="line">        next_page = response.urljoin(next_page[<span class="number">0</span>])</div><div class="line">        <span class="keyword">yield</span> scrapy.Request(next_page, meta=&#123;<span class="string">'cookiejar'</span>: response.meta[<span class="string">'cookiejar'</span>]&#125;, callback=self.parse,</div><div class="line">                         dont_filter=<span class="keyword">True</span>)</div></pre></td></tr></table></figure>
<ul>
<li><code>if &quot;rurl&quot; in str(requests_url)</code> 用于判断当前请求是否是请求验证码的请求，如果是则回调 <code>handleCode(self, response)</code> 进行验证码的处理，由于验证码的请求链接大多相同所以必须设置 <code>dont_filter=True</code>。</li>
<li>for 循环用于提取文献的各项数据，<code>next_page</code> 是下一页的链接，<code>response.urljoin()</code> 方法构造一个绝对路径的 URL (页面上的链接都是相对路径的)，发送下一页的请求也需要设置 <code>dont_filter=True</code>。</li>
</ul>
</li>
<li><p>验证码处理<br> 验证码的处理主要和这两个请求相关：<br> <img src="http://i.imgur.com/Ey0ij42.png" alt="验证码处理"><br> 第一个请求用于显示输入验证码页面和提交验证码，主要和两个参数相关：<br> <img src="http://i.imgur.com/vyN5yYF.png" alt="验证码"><br> 第二个请求则主要用于获取验证码：<br> <code>http://kns.cnki.net/kns/checkcode.aspx?t=%27+Math.random()</code><br> 处理验证码的代码如下：</p>
 <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">handleCode</span><span class="params">(self, response)</span>:</span></div><div class="line">    sid_kns = <span class="string">""</span></div><div class="line">    sessionId = <span class="string">""</span></div><div class="line">    ori_cookie = response.request.headers.getlist(<span class="string">'Cookie'</span>)</div><div class="line">    response_url = str(response.request.headers.getlist(<span class="string">'Referer'</span>)).split(<span class="string">"'"</span>)[<span class="number">1</span>].split(<span class="string">"rurl="</span>)[<span class="number">1</span>]</div><div class="line">    <span class="keyword">if</span> <span class="string">"vericode="</span> <span class="keyword">in</span> response_url:</div><div class="line">        response_url = re.sub(<span class="string">r"&amp;vericode.*"</span>, <span class="string">""</span>, response_url)</div><div class="line">    <span class="keyword">for</span> cookie_parameter <span class="keyword">in</span> str(ori_cookie).split(<span class="string">";"</span>):</div><div class="line">        <span class="keyword">if</span> <span class="string">"SID_kns"</span> <span class="keyword">in</span> cookie_parameter:</div><div class="line">            sid_kns = cookie_parameter.split(<span class="string">"="</span>)[<span class="number">1</span>]</div><div class="line">        <span class="keyword">if</span> <span class="string">"ASP.NET_SessionId"</span> <span class="keyword">in</span> cookie_parameter:</div><div class="line">            sessionId = cookie_parameter.split(<span class="string">"="</span>)[<span class="number">1</span>]</div><div class="line">    act_cookie = &#123;<span class="string">"ASP.NET_SessionId"</span>: sessionId, <span class="string">"SID_kns"</span>: sid_kns&#125;</div><div class="line">    url = <span class="string">"http://kns.cnki.net/kns/checkcode.aspx?t='+Math.random()"</span></div><div class="line">    result_file = self.downloadCodeImg(url, act_cookie)</div><div class="line">    code_img = Image.open(result_file)</div><div class="line">    code_img.show()</div><div class="line">    ver_code = input(<span class="string">"输入验证码:"</span>)</div><div class="line">    print(<span class="string">"已输入验证码:"</span>, ver_code)</div><div class="line">    return_url = <span class="string">"http://kns.cnki.net/kns/brief/vericode.aspx?rurl="</span> + response_url + <span class="string">"&amp;vericode="</span> + ver_code</div><div class="line">    <span class="keyword">yield</span> scrapy.Request(return_url, meta=&#123;<span class="string">'cookiejar'</span>: response.meta[<span class="string">'cookiejar'</span>]&#125;, callback=self.parse, dont_filter=<span class="keyword">True</span>)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">downloadCodeImg</span><span class="params">(self, getCodeUrl, cookie)</span>:</span></div><div class="line">    iden_code_img = <span class="string">"ver_code"</span> + time.strftime(<span class="string">'%Y-%m-%d'</span>, time.localtime(time.time())) + <span class="string">".jpg"</span></div><div class="line">    response = requests.get(getCodeUrl, stream=<span class="keyword">True</span>, cookies=cookie)  <span class="comment"># here we need to set stream = True parameter</span></div><div class="line">    requests.utils.add_dict_to_cookiejar(response.cookies, cookie)</div><div class="line">    print(response.cookies)</div><div class="line">    <span class="keyword">with</span> open(iden_code_img, <span class="string">'wb'</span>) <span class="keyword">as</span> f:</div><div class="line">        <span class="keyword">for</span> chunk <span class="keyword">in</span> response.iter_content(chunk_size=<span class="number">1024</span>):</div><div class="line">            <span class="keyword">if</span> chunk:</div><div class="line">                f.write(chunk)</div><div class="line">                f.flush()</div><div class="line">        f.close()</div><div class="line">    <span class="keyword">return</span> iden_code_img</div></pre></td></tr></table></figure>
<ul>
<li><code>response_url</code> 为 <code>rurl</code> 的参数值</li>
<li><code>act_cookie</code> 为请求的 cookies 值</li>
<li><code>downloadCodeImg</code> 用于下载验证码</li>
</ul>
</li>
</ol>
<h4 id="采集引证文献"><a href="#采集引证文献" class="headerlink" title="采集引证文献"></a>采集引证文献</h4><ol>
<li><p>定义 Items</p>
 <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Quote</span><span class="params">(scrapy.Item)</span>:</span></div><div class="line">    paper_title = scrapy.Field()</div><div class="line">    paper_author = scrapy.Field()</div><div class="line">    paper_journalName = scrapy.Field()</div><div class="line">    paper_time = scrapy.Field()</div><div class="line">    quote_title = scrapy.Field()</div></pre></td></tr></table></figure>
</li>
<li><p>提取数据<br> 引证文献的数据提取是动态网页，所以不能够直接采集，通过抓包分析，数据主要下图的请求相关：<br> <img src="http://i.imgur.com/zMmDCQq.png" alt="请求"><br> <img src="http://i.imgur.com/vBGwbqw.png" alt="引证文献"><br> 为了对引证文献的所有类别进行翻页，参数 <code>CurDBCode</code> 必须去除，发送请求之后的页面如下图所示：<br> <img src="http://i.imgur.com/n1E6LzV.png" alt="数据"><br> 由于是纯文本页面，除了知道上图所示的参数之外，还需要知道引证文献的最大页数进行翻译，具体代码如下：</p>
<ol>
<li><p>发送引证文献请求</p>
 <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(self, response)</span>:</span></div><div class="line">     requests_url = response.request</div><div class="line">     <span class="comment">#True 代表文献引证文献数大于 0，否则代表文献没有引证文献</span></div><div class="line">     flag = <span class="keyword">True</span></div><div class="line">     <span class="keyword">if</span> <span class="string">"rurl"</span> <span class="keyword">in</span> str(requests_url):</div><div class="line">         iden_code_url = str(requests_url).split(<span class="string">"GET"</span>)[<span class="number">1</span>].split(<span class="string">"&gt;"</span>)[<span class="number">0</span>].strip()</div><div class="line">         <span class="keyword">yield</span> scrapy.Request(iden_code_url, meta=&#123;<span class="string">'cookiejar'</span>: response.meta[<span class="string">'cookiejar'</span>]&#125;, callback=self.handleCode</div><div class="line">                              , dont_filter=<span class="keyword">True</span>)</div><div class="line">     <span class="comment">#quote_urls 用于保存引证文献数大于 10 的链接，代表着引证文献页数可能两页以上需要计算页数</span></div><div class="line">     quote_urls = []</div><div class="line">     <span class="comment">#quote_direct 用于保存引证文献数小于等于 10 的链接，代表着引证文献页数只有一页只用直接采集</span></div><div class="line">     quote_direct = []</div><div class="line">     <span class="keyword">for</span> result <span class="keyword">in</span> response.css(<span class="string">'tr[bgcolor]'</span>):</div><div class="line">         quote_url = result.css(<span class="string">"span[class=KnowledgeNetcont] &gt; a"</span>).xpath(<span class="string">"@onclick"</span>).extract_first()</div><div class="line">         num = result.css(<span class="string">"span[class=KnowledgeNetcont] &gt; a::text"</span>).extract_first()</div><div class="line">         <span class="keyword">if</span> quote_url <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</div><div class="line">             <span class="keyword">if</span> int(num) &lt;= <span class="number">10</span>:</div><div class="line">                 pages = <span class="number">1</span></div><div class="line">             <span class="keyword">else</span>:</div><div class="line">                 pages = <span class="number">1000</span></div><div class="line">             title = result.css(<span class="string">"td &gt; a[class=fz14]"</span>).xpath(<span class="string">"string(.)"</span>).extract_first()</div><div class="line">             quote_code = self.get_quote_code(quote_url)</div><div class="line">             origin_quote_url = <span class="string">"http://kns.cnki.net/kcms/detail/frame/asynlist.aspx"</span></div><div class="line">             quote_parameters = &#123;<span class="string">'dbcode'</span>: <span class="string">'CJFQ'</span>, <span class="string">'search'</span>: title,</div><div class="line">                                 <span class="string">'code'</span>: quote_code, <span class="string">'ds'</span>: <span class="string">'frame/list.aspx'</span>,</div><div class="line">                                 <span class="string">'reftype'</span>: <span class="string">'18'</span>, <span class="string">'page'</span>: pages,</div><div class="line">                                 &#125;</div><div class="line">             url = self.get_url(origin_quote_url, quote_parameters)</div><div class="line">             <span class="keyword">if</span> int(num) &lt;= <span class="number">10</span>:</div><div class="line">                 quote_direct.append(url)</div><div class="line">             <span class="keyword">else</span>:</div><div class="line">                 quote_urls.append(url)</div><div class="line">         <span class="keyword">else</span>:</div><div class="line">             flag = <span class="keyword">False</span></div><div class="line"> </div><div class="line">     next_page = response.xpath(<span class="string">"//div/a[text()='下一页']/@href"</span>).extract()</div><div class="line">     <span class="keyword">if</span> next_page <span class="keyword">and</span> flag:</div><div class="line">         next_page = response.urljoin(next_page[<span class="number">0</span>])</div><div class="line">         <span class="keyword">yield</span> scrapy.Request(next_page, meta=&#123;<span class="string">'cookiejar'</span>: response.meta[<span class="string">'cookiejar'</span>]&#125;, callback=self.parse</div><div class="line">                              , dont_filter=<span class="keyword">True</span>, priority=<span class="number">100</span>)</div><div class="line">     <span class="keyword">for</span> get_quote_url <span class="keyword">in</span> quote_urls:</div><div class="line">         <span class="keyword">yield</span> scrapy.Request(get_quote_url, meta=&#123;<span class="string">'cookiejar'</span>: response.meta[<span class="string">'cookiejar'</span>]&#125;,</div><div class="line">                              callback=self.parse_first_quote)</div><div class="line">     <span class="keyword">for</span> get_quote_url <span class="keyword">in</span> quote_direct:</div><div class="line">         <span class="keyword">yield</span> scrapy.Request(get_quote_url, meta=&#123;<span class="string">'cookiejar'</span>: response.meta[<span class="string">'cookiejar'</span>]&#125;,</div><div class="line">                              callback=self.parse_quote)</div></pre></td></tr></table></figure>
<ul>
<li><code>title</code> 文献的篇名</li>
<li><code>quote_code</code> 文献的编码</li>
<li><code>pages</code> 页数，设置为 1000，为了方便计算页数，如果设置为 1 进行页数计算，那么进行数据采集的时链接将被过滤掉。</li>
<li><code>priority=100</code> 优先处理翻页的请求，翻页时间过长将导致页面不会按照被引量降序排列，从而导致数据丢失。</li>
</ul>
</li>
<li><p>计算页数</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse_first_quote</span><span class="params">(self, response)</span>:</span></div><div class="line">    result_html = Selector(response, type=<span class="string">"html"</span>)</div><div class="line">    regex = <span class="string">r"\Wcode="</span></div><div class="line">    quote_code = re.split(regex, response.url)[<span class="number">1</span>]</div><div class="line">    quote_code = quote_code.split(<span class="string">"&amp;"</span>)[<span class="number">0</span>]</div><div class="line">    title = response.url.split(<span class="string">"search="</span>)[<span class="number">1</span>]</div><div class="line">    title = title.split(<span class="string">"&amp;"</span>)[<span class="number">0</span>]</div><div class="line">    title = urllib.parse.unquote(title)</div><div class="line">    origin_res = result_html.css(<span class="string">"b[class=titleTotle] &gt; span[id]::text"</span>).extract()</div><div class="line">    act_res = []</div><div class="line">    <span class="keyword">for</span> result <span class="keyword">in</span> origin_res:</div><div class="line">        <span class="keyword">if</span> result <span class="keyword">is</span> <span class="keyword">not</span> <span class="string">'\xa0'</span>:</div><div class="line">            act_res.append(int(re.sub(<span class="string">"\D"</span>, <span class="string">""</span>, result.strip())))</div><div class="line">    <span class="keyword">if</span> act_res:</div><div class="line">        max_page = max(act_res)</div><div class="line">        max_page = math.ceil(float(max_page)/<span class="number">10</span>)</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        max_page = <span class="number">1</span></div><div class="line">    origin_url = <span class="string">'http://kns.cnki.net/kcms/detail/frame/asynlist.aspx'</span></div><div class="line">    <span class="keyword">for</span> page_num <span class="keyword">in</span> range(max_page):</div><div class="line">        quote_parameters = &#123;<span class="string">'dbcode'</span>: <span class="string">'CJFQ'</span>, <span class="string">'search'</span>: title,</div><div class="line">                             <span class="string">'code'</span>: quote_code, <span class="string">'ds'</span>: <span class="string">'frame/list.aspx'</span>,</div><div class="line">                             <span class="string">'reftype'</span>: <span class="string">'18'</span>, <span class="string">'page'</span>: str(page_num + <span class="number">1</span>),</div><div class="line">                             &#125;</div><div class="line">        act_url = self.get_url(origin_url, quote_parameters)</div><div class="line">        <span class="keyword">yield</span> scrapy.Request(act_url, meta=&#123;<span class="string">'cookiejar'</span>: response.meta[<span class="string">'cookiejar'</span>]&#125;, callback=self.parse_quote)</div></pre></td></tr></table></figure>
<ul>
<li><code>origin_res</code> 用于获取页面上记录的条数</li>
<li><code>max_page</code> 最大的页数</li>
<li>for 循环用于引证文献的翻页</li>
</ul>
</li>
<li>采集<br> 引证文献的格式可以分为三类，所以这三类需要单独进行处理。 <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse_quote</span><span class="params">(self, response)</span>:</span></div><div class="line">    quote_item = Quote()</div><div class="line">    ori_title = response.url.split(<span class="string">"search="</span>)[<span class="number">1</span>]</div><div class="line">    ori_title = ori_title.split(<span class="string">"&amp;"</span>)[<span class="number">0</span>]</div><div class="line">    quote_title = urllib.parse.unquote(ori_title)</div><div class="line">    <span class="keyword">for</span> result <span class="keyword">in</span> response.css(<span class="string">"div[class=essayBox]"</span>):</div><div class="line">        dbTitle = result.xpath(<span class="string">".//div[@class='dbTitle']/text()"</span>).extract_first()</div><div class="line">        <span class="keyword">if</span> <span class="string">"中国学术期刊网络出版总库"</span> <span class="keyword">in</span> dbTitle:</div><div class="line">            <span class="keyword">for</span> result_cjfq <span class="keyword">in</span> result.css(<span class="string">"ul &gt; li"</span>):</div><div class="line">                paper_title = result_cjfq.xpath(<span class="string">".//em/text()"</span>).extract_first() +\</div><div class="line">                              result_cjfq.xpath(<span class="string">".//a[@target='kcmstarget']"</span>).xpath(<span class="string">'string(.)'</span>).extract_first()</div><div class="line">                paper_author = result_cjfq.xpath(<span class="string">"./text()"</span>).extract_first().replace(<span class="string">"&amp;nbsp"</span>, <span class="string">''</span>)</div><div class="line">                paper_title = paper_title + paper_author.split(<span class="string">"."</span>)[<span class="number">0</span>]</div><div class="line">                paper_author = paper_author.split(<span class="string">"."</span>)[<span class="number">1</span>].strip()</div><div class="line">                paper_journalName = result_cjfq.xpath(<span class="string">".//a[@onclick]/text()"</span>).extract()[<span class="number">0</span>]</div><div class="line">                time_len = len(result_cjfq.xpath(<span class="string">".//a[@onclick]/text()"</span>))</div><div class="line">                paper_time = result_cjfq.xpath(<span class="string">".//a[@onclick]/text()"</span>).extract()[time_len - <span class="number">1</span>]</div><div class="line">                paper_time = paper_time.split(<span class="string">"("</span>)[<span class="number">0</span>]</div><div class="line">                quote_item[<span class="string">'paper_title'</span>] = paper_title</div><div class="line">                quote_item[<span class="string">'paper_author'</span>] = paper_author</div><div class="line">                quote_item[<span class="string">'paper_journalName'</span>] = paper_journalName</div><div class="line">                quote_item[<span class="string">'paper_time'</span>] = paper_time</div><div class="line">                quote_item[<span class="string">'quote_title'</span>] = quote_title.replace(<span class="string">"++"</span>, <span class="string">"  "</span>)</div><div class="line">                <span class="keyword">yield</span> quote_item</div><div class="line">        <span class="keyword">if</span> <span class="string">"中国博士学位论文全文数据库"</span> <span class="keyword">in</span> dbTitle <span class="keyword">or</span> <span class="string">"中国优秀硕士学位论文全文数据库"</span> <span class="keyword">in</span> dbTitle:</div><div class="line">            <span class="keyword">for</span> result_cjfq <span class="keyword">in</span> result.css(<span class="string">"ul &gt; li"</span>):</div><div class="line">                paper_title = result_cjfq.xpath(<span class="string">".//em/text()"</span>).extract_first() + \</div><div class="line">                            result_cjfq.xpath(<span class="string">".//a[@target='kcmstarget']/text()"</span>).extract_first()</div><div class="line">                paper_author = result_cjfq.xpath(<span class="string">"./text()"</span>).extract_first()</div><div class="line">                paper_title = paper_title + paper_author.split(<span class="string">"."</span>)[<span class="number">0</span>]</div><div class="line">                paper_author = paper_author.split(<span class="string">"."</span>)[<span class="number">1</span>].strip()</div><div class="line">                paper_journalName = result_cjfq.xpath(<span class="string">".//a[@onclick]/text()"</span>).extract()[<span class="number">0</span>]</div><div class="line">                paper_time = result_cjfq.xpath(<span class="string">"./text()"</span>).extract()[<span class="number">1</span>].strip()</div><div class="line">                quote_item[<span class="string">'paper_title'</span>] = paper_title</div><div class="line">                quote_item[<span class="string">'paper_author'</span>] = paper_author</div><div class="line">                quote_item[<span class="string">'paper_journalName'</span>] = paper_journalName</div><div class="line">                quote_item[<span class="string">'paper_time'</span>] = paper_time</div><div class="line">                quote_item[<span class="string">'quote_title'</span>] = quote_title.replace(<span class="string">"++"</span>, <span class="string">"  "</span>)</div><div class="line">                <span class="keyword">yield</span> quote_item</div><div class="line">        <span class="keyword">if</span> <span class="string">"中国重要会议论文全文数据库"</span> <span class="keyword">in</span> dbTitle <span class="keyword">or</span> <span class="string">"国际会议论文全文数据库"</span> <span class="keyword">in</span> dbTitle:</div><div class="line">            <span class="keyword">for</span> result_cjfq <span class="keyword">in</span> result.css(<span class="string">"ul &gt; li"</span>):</div><div class="line">                paper_title = result_cjfq.xpath(<span class="string">".//em/text()"</span>).extract_first() + \</div><div class="line">                            result_cjfq.xpath(<span class="string">".//a[@target='kcmstarget']/text()"</span>).extract_first()</div><div class="line">                other_data = result_cjfq.xpath(<span class="string">"./text()"</span>).extract_first()</div><div class="line">                paper_title = paper_title + other_data.split(<span class="string">"."</span>)[<span class="number">0</span>]</div><div class="line">                <span class="keyword">if</span> len(other_data.split(<span class="string">"."</span>)) == <span class="number">4</span>:</div><div class="line">                    paper_author = other_data.split(<span class="string">"."</span>)[<span class="number">1</span>].strip()</div><div class="line">                    paper_journalName = other_data.split(<span class="string">"."</span>)[<span class="number">2</span>].strip()</div><div class="line">                    paper_time = other_data.split(<span class="string">"."</span>)[<span class="number">3</span>].strip()</div><div class="line">                <span class="keyword">elif</span> len(other_data.split(<span class="string">"."</span>)) == <span class="number">3</span>:</div><div class="line">                    paper_author = <span class="string">""</span></div><div class="line">                    paper_journalName = other_data.split(<span class="string">"."</span>)[<span class="number">1</span>].strip()</div><div class="line">                    paper_time = other_data.split(<span class="string">"."</span>)[<span class="number">2</span>].strip()</div><div class="line">                quote_item[<span class="string">'paper_title'</span>] = paper_title</div><div class="line">                quote_item[<span class="string">'paper_author'</span>] = paper_author</div><div class="line">                quote_item[<span class="string">'paper_journalName'</span>] = paper_journalName</div><div class="line">                quote_item[<span class="string">'paper_time'</span>] = paper_time</div><div class="line">                quote_item[<span class="string">'quote_title'</span>] = quote_title.replace(<span class="string">"++"</span>, <span class="string">"  "</span>)</div><div class="line">                <span class="keyword">yield</span> quote_item</div></pre></td></tr></table></figure>
</li>
</ol>
</li>
</ol>
<hr>
<h4 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h4><p><a href="https://doc.scrapy.org/en/master/intro/tutorial.html" target="_blank" rel="external">Scrapy 文档</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在&lt;a href=&quot;/2017/04/06/Python下用Scrapy采集知网期刊数据（二）/&quot; title=&quot;Python 下用 Scrapy 采集知网期刊数据（二）&quot;&gt;Python 下用 Scrapy 采集知网期刊数据（二）&lt;/a&gt;中已经获取了期刊的搜索结果，接下来就可以开始采集文献数据了。&lt;/p&gt;
&lt;h4 id=&quot;采集期刊文献数据&quot;&gt;&lt;a href=&quot;#采集期刊文献数据&quot; class=&quot;headerlink&quot; title=&quot;采集期刊文献数据&quot;&gt;&lt;/a&gt;采集期刊文献数据&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;定义 Items&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;为了定义常用的输出数据，Scrapy提供了 Item 类。 Item 对象是种简单的容器，保存了爬取到得数据。 其提供了 类似于词典(dictionary-like) 的API以及用于声明可用字段的简单语法。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Python 学习" scheme="http://www.rookieyang.cn/categories/Python-%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Python" scheme="http://www.rookieyang.cn/tags/Python/"/>
    
      <category term="Scrapy" scheme="http://www.rookieyang.cn/tags/Scrapy/"/>
    
  </entry>
  
  <entry>
    <title>Python 下用 Scrapy 采集知网期刊数据（二）</title>
    <link href="http://www.rookieyang.cn/2017/04/06/Python%E4%B8%8B%E7%94%A8Scrapy%E9%87%87%E9%9B%86%E7%9F%A5%E7%BD%91%E6%9C%9F%E5%88%8A%E6%95%B0%E6%8D%AE%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <id>http://www.rookieyang.cn/2017/04/06/Python下用Scrapy采集知网期刊数据（二）/</id>
    <published>2017-04-06T12:41:27.000Z</published>
    <updated>2017-04-08T03:02:08.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h4><p>本次采集需要采集期刊 2000～2010 年间的数据，相关的数据首先是期刊中各文献的数据：<a id="more"></a></p>
<p><img src="http://i.imgur.com/vM9uRTd.png" alt="文献数据"></p>
<p>主要包括 <code>title（篇名）</code>，<code>author（作者）</code>，<code>journalName（刊名）</code>，<code>publicationDate（发表时间）</code>，<code>referenceNum（被引数）</code> 以及 <code>downloadNum</code>下载数</p>
<p>其次是每篇文献的引证文献数据：</p>
<p><img src="http://i.imgur.com/d8oaOnt.png" alt="引用文献数据"></p>
<p>主要包括 <code>paper_title（篇名）</code>，<code>paper_author（作者）</code>，<code>paper_journalName（刊名）</code>，<code>paper_time（发表时间）</code>以及<code>quote_title（引用的文献篇名）</code>。</p>
<h4 id="搜索期刊"><a href="#搜索期刊" class="headerlink" title="搜索期刊"></a>搜索期刊</h4><ol>
<li><p>抓包分析<br> 在采集数据之前首先需要获取到期刊的搜索结果，而本次采集主要和下列的搜索参数相关：</p>
<p> <img src="http://i.imgur.com/Ptexofn.png" alt="检索条件"></p>
<ul>
<li>起始年份</li>
<li>模糊或精确搜索</li>
<li>期刊名称<br>抓包之后发现搜索过程主要和下图标有红线的两个请求相关，第一个请求用于得到搜索结果，第二个请求则是将搜索的结果显示出来。<br><img src="http://i.imgur.com/k72biin.png" alt="抓包数据"><br>对第一个请求进行分析之后发现了与搜索条件相对应的搜索参数。<br><img src="http://i.imgur.com/MEX3upo.png" alt="搜索参数"><br>第二个请求大部分是固定参数值<br><img src="http://i.imgur.com/m1Rlxox.png" alt="显示结果"></li>
</ul>
</li>
<li><p>发送请求</p>
<ol>
<li><p>从 Excel 读取参数：<br>由于需要采集每本期刊 11 年的数据，所以为了减少搜索结果从而尽可能避免需要输入验证码，所以将所有的搜索条件保存在一个 Excel 文件里面：<br> <img src="http://i.imgur.com/z3erumM.png" alt="查询条件"><br>读取参数过程如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">read_excel</span><span class="params">(self)</span>:</span></div><div class="line"><span class="comment"># 打开文件</span></div><div class="line">workbook = xlrd.open_workbook(<span class="string">r'/Users/firstdream/PycharmProjects/cnkiSprider/查询条件.xlsx'</span>)</div><div class="line"><span class="comment"># 获取所有sheet</span></div><div class="line"></div><div class="line"><span class="comment"># 根据sheet索引或者名称获取sheet内容</span></div><div class="line">sheet1 = workbook.sheet_by_index(<span class="number">0</span>)  <span class="comment"># sheet索引从0开始</span></div><div class="line">search_setting = []</div><div class="line"><span class="keyword">for</span> row <span class="keyword">in</span> range(sheet1.nrows):</div><div class="line">    setting = <span class="string">""</span></div><div class="line">    <span class="keyword">for</span> col <span class="keyword">in</span> range(sheet1.ncols):</div><div class="line">        <span class="keyword">if</span> isinstance(sheet1.row(row)[col].value, float):</div><div class="line">            setting = setting + str(int(sheet1.row(row)[col].value)) + <span class="string">","</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            setting = setting + str(sheet1.row(row)[col].value)</div><div class="line">    search_setting.append(setting)</div><div class="line"><span class="keyword">return</span> search_setting</div></pre></td></tr></table></figure>
<p>将每行的搜索条件拼接起来并保存在一个 list 当中。</p>
</li>
<li><p>生成请求<br>由于请求的参数较多，所以采用词典进行请求的参数配置，再用 <code>get_url()</code> 获取最终的链接：<br>生成第一个请求：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">createUrls</span><span class="params">(self)</span>:</span></div><div class="line">search_setting = self.read_excel()</div><div class="line">urls = []</div><div class="line"><span class="keyword">for</span> setting <span class="keyword">in</span> search_setting:</div><div class="line">    year_from =  setting.split(<span class="string">","</span>)[<span class="number">0</span>]</div><div class="line">    year_to = setting.split(<span class="string">","</span>)[<span class="number">1</span>]</div><div class="line">    magazine_setting = setting.split(<span class="string">","</span>)[<span class="number">2</span>]</div><div class="line">    search_parameters = &#123;<span class="string">'action'</span>: <span class="string">''</span>, <span class="string">'ua'</span>: <span class="string">'1.21'</span>,</div><div class="line">                         <span class="string">'PageName'</span>: <span class="string">'ASP.brief_result_aspx'</span>, <span class="string">'DbPreFix'</span>: <span class="string">'CJFQ'</span>,</div><div class="line">                         <span class="string">'DbCatalog'</span>: <span class="string">'中国学术期刊网络出版总库'</span>, <span class="string">'ConfigFile'</span>: <span class="string">'CJFQ.xml'</span>,</div><div class="line">                         <span class="string">'db_opt'</span>: <span class="string">'CJFQ'</span>, <span class="string">'db_value'</span>: <span class="string">'中国学术期刊网络出版总库'</span>,</div><div class="line">                         <span class="string">'magazine_value1'</span>: magazine_setting, <span class="string">'year_type'</span>: <span class="string">'echar'</span>,</div><div class="line">                         <span class="string">'year_from'</span>: year_from, <span class="string">'year_to'</span>: year_to,</div><div class="line">                         <span class="string">'magazine_special1'</span>: <span class="string">'='</span></div><div class="line">                         &#125;</div><div class="line">    origin_url = <span class="string">"http://kns.cnki.net/kns/request/SearchHandler.ashx"</span></div><div class="line">    url = self.get_url(origin_url, search_parameters)</div><div class="line">    urls.append(url)</div><div class="line"><span class="keyword">return</span> urls</div></pre></td></tr></table></figure>
<p>将 Excel 文件中读取的搜索条件通过 <code>createUrls()</code> 方法生成可迭代的请求列表。</p>
<p>生成第二个请求：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">result_parameters = &#123;<span class="string">'pagename'</span>: <span class="string">'ASP.brief_result_aspx'</span>, <span class="string">'DbPreFix'</span>: <span class="string">'CJFQ'</span>,</div><div class="line">                    <span class="string">'Research'</span>: <span class="string">'off'</span>, <span class="string">'KeyValue'</span>: <span class="string">''</span>, <span class="string">'S'</span>: <span class="string">'1'</span>, <span class="string">'recordsperpage'</span>: <span class="string">'50'</span></div><div class="line">                    , <span class="string">"sorttype"</span>: <span class="string">"(被引频次,'INTEGER') desc"</span>&#125;</div><div class="line">origin_url = <span class="string">"http://kns.cnki.net/kns/brief/brief.aspx"</span></div><div class="line">act_url = self.get_url(origin_url, result_parameters)</div></pre></td></tr></table></figure>
<p>第二个请求中增加了 <code>recordsperpage</code> 和 <code>sorttype</code> 两个参数，前者代表每页显示的记录条数（Sprider 每采集 13 页左右，知网会提示输入验证码，所以设置为最大值 50 减少结果的总页数），后者代表结果的排序方式（采集引证文献时，由于一些文献是没有被引用的，所以采用按被引量递减的方式排序去过滤掉无用的请求，从而缩短采集时间）。</p>
<p><code>get_url()</code> 方法：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_url</span><span class="params">(self, origin_url, parameters)</span>:</span></div><div class="line">    act_url = origin_url + <span class="string">"?"</span></div><div class="line">    <span class="keyword">for</span> key <span class="keyword">in</span> parameters.keys():</div><div class="line">        act_url = act_url + key + <span class="string">"="</span> + urllib.request.quote(str(parameters[key])) + <span class="string">"&amp;"</span></div><div class="line">    act_url = act_url.strip(<span class="string">"&amp;"</span>)</div><div class="line">    <span class="keyword">return</span> act_url</div></pre></td></tr></table></figure>
<p><code>urllib.request.quote()</code> 中文字符进行编码处理。</p>
</li>
<li><p>发送</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">start_requests</span><span class="params">(self)</span>:</span></div><div class="line">    headers_parameters = &#123;</div><div class="line">        <span class="string">'Host'</span>: <span class="string">'kns.cnki.net'</span>,</div><div class="line">        <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/55.0.2883.95 Safari/537.36'</span>,</div><div class="line">        <span class="string">'Referer'</span>: <span class="string">'http://kns.cnki.net/kns/brief/result.aspx?dbPrefix=CJFQ'</span></div><div class="line">    &#125;</div><div class="line">    urls = self.createUrls()</div><div class="line">    <span class="keyword">for</span> i, url <span class="keyword">in</span> enumerate(urls):</div><div class="line">        <span class="keyword">yield</span> scrapy.Request(url, meta=&#123;<span class="string">'cookiejar'</span>: i&#125;,</div><div class="line">                             callback=self.result_page, headers=headers_parameters)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">result_page</span><span class="params">(self, response)</span>:</span></div><div class="line">    result_parameters = &#123;<span class="string">'pagename'</span>: <span class="string">'ASP.brief_result_aspx'</span>, <span class="string">'DbPreFix'</span>: <span class="string">'CJFQ'</span>,</div><div class="line">                         <span class="string">'Research'</span>: <span class="string">'off'</span>, <span class="string">'KeyValue'</span>: <span class="string">''</span>, <span class="string">'S'</span>: <span class="string">'1'</span>, <span class="string">'recordsperpage'</span>: <span class="string">'50'</span></div><div class="line">                         , <span class="string">"sorttype"</span>: <span class="string">"(被引频次,'INTEGER') desc"</span>&#125;</div><div class="line">    origin_url = <span class="string">"http://kns.cnki.net/kns/brief/brief.aspx"</span></div><div class="line">    act_url = self.get_url(origin_url, result_parameters)</div><div class="line">    <span class="keyword">return</span> scrapy.Request(act_url,</div><div class="line">                          meta=&#123;<span class="string">'cookiejar'</span>: response.meta[<span class="string">'cookiejar'</span>]&#125;,</div><div class="line">                          callback=self.parse, dont_filter=<span class="keyword">True</span>)</div></pre></td></tr></table></figure>
<ul>
<li><p><code>meta={&#39;cookiejar&#39;: i}</code> 保存的是 cookie 用于保持持久性连接。</p>
<blockquote>
<p>There is support for keeping multiple cookie sessions per spider by using the cookiejar Request meta key. By default it uses a single cookie jar (session), but you can pass an identifier to use different ones.<br>For example:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">for i, url in enumerate(urls):</div><div class="line">    yield scrapy.Request(url, meta=&#123;&apos;cookiejar&apos;: i&#125;,</div><div class="line">        callback=self.parse_page)</div></pre></td></tr></table></figure>
</blockquote>
</li>
<li><p><code>start_requests(self)</code> 在获取到搜索结果之后回调 <code>result_page(self, response)</code> 进行进一步处理。</p>
</li>
<li><p><code>meta={&#39;cookiejar&#39;: response.meta[&#39;cookiejar&#39;]}</code> 取出 cookie 值向下传递。</p>
<blockquote>
<p>Keep in mind that the cookiejar meta key is not “sticky”. You need to keep passing it along on subsequent requests. For example:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">def parse_page(self, response):</div><div class="line">    # do some processing</div><div class="line">    return scrapy.Request(&quot;http://www.example.com/otherpage&quot;,</div><div class="line">        meta=&#123;&apos;cookiejar&apos;: response.meta[&apos;cookiejar&apos;]&#125;,</div><div class="line">        callback=self.parse_other_page)</div></pre></td></tr></table></figure>
</blockquote>
</li>
<li><p><code>dont_filter=True</code> 由于第二次请求的链接相同，Scrapy 默认会过滤到这些请求，所以必须设置为 True。</p>
</li>
</ul>
</li>
</ol>
</li>
</ol>
<h4 id="配置访问异常重试"><a href="#配置访问异常重试" class="headerlink" title="配置访问异常重试"></a>配置访问异常重试</h4><p>为了尽可能保证采集数据的完整性，需要配置 <code>setting.py</code> 文件加入如下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"># 当访问异常时是否进行重试</div><div class="line">RETRY_ENABLED = True</div><div class="line"># 当遇到以下 http 状态码时进行重试</div><div class="line">RETRY_HTTP_CODES = [500, 502, 503, 504, 400, 403, 404, 408]</div><div class="line"># 重试次数</div><div class="line">RETRY_TIMES = 5</div></pre></td></tr></table></figure></p>
<hr>
<h4 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h4><p><a href="https://doc.scrapy.org/en/master/intro/tutorial.html" target="_blank" rel="external">Scrapy 文档</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;需求&quot;&gt;&lt;a href=&quot;#需求&quot; class=&quot;headerlink&quot; title=&quot;需求&quot;&gt;&lt;/a&gt;需求&lt;/h4&gt;&lt;p&gt;本次采集需要采集期刊 2000～2010 年间的数据，相关的数据首先是期刊中各文献的数据：
    
    </summary>
    
      <category term="Python 学习" scheme="http://www.rookieyang.cn/categories/Python-%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Python" scheme="http://www.rookieyang.cn/tags/Python/"/>
    
      <category term="Scrapy" scheme="http://www.rookieyang.cn/tags/Scrapy/"/>
    
  </entry>
  
  <entry>
    <title>Python 下用 Scrapy 采集知网期刊数据（一）</title>
    <link href="http://www.rookieyang.cn/2017/04/06/Python%E4%B8%8B%E7%94%A8Scrapy%E9%87%87%E9%9B%86%E7%9F%A5%E7%BD%91%E6%9C%9F%E5%88%8A%E6%95%B0%E6%8D%AE%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>http://www.rookieyang.cn/2017/04/06/Python下用Scrapy采集知网期刊数据（一）/</id>
    <published>2017-04-06T10:29:07.000Z</published>
    <updated>2017-04-06T12:39:38.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><blockquote>
<p>Scrapy 是一个为了爬取网站数据，提取结构性数据而编写的应用框架。 可以应用在包括数据挖掘，信息处理或存储历史数据等一系列的程序中。</p>
</blockquote>
<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><ul>
<li>Pycharm 安装<br>  Mac 下按住快捷键 <code>Command + ,</code> 选择 Project→Project Interpreter 点击 + 号后搜索 Scrapy 进行安装即可：<a id="more"></a><br>  <img src="https://lh3.googleusercontent.com/--viTMYxz-DA/WOYjckFJzAI/AAAAAAAAAJA/6mgZ819jSao/I/%25255BUNSET%25255D.png" alt="安装过程">    </li>
<li>pip安装<br>  <code>pip install Scrapy</code></li>
</ul>
<h4 id="创建工程"><a href="#创建工程" class="headerlink" title="创建工程"></a>创建工程</h4><p>在终端中进入需要创建工程的目录，输入命令：<br><code>scrapy startproject tutorial</code><br>将会创建一个 tutorial 的目录，目录结构如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">tutorial/</div><div class="line">    scrapy.cfg            # 部署配置文件</div><div class="line"></div><div class="line">    tutorial/             # 项目的 Python 模块，在这里加入代码</div><div class="line">        __init__.py</div><div class="line"></div><div class="line">        items.py          # 项目的 items 定义文件</div><div class="line"></div><div class="line">        pipelines.py      # 项目的 pipelines 文件，用于处理 items</div><div class="line"></div><div class="line">        settings.py       # 项目的设置文件</div><div class="line"></div><div class="line">        spiders/          # Spider 目录所在地</div><div class="line">            __init__.py</div></pre></td></tr></table></figure>
<h4 id="创建-Spider"><a href="#创建-Spider" class="headerlink" title="创建 Spider"></a>创建 Spider</h4><p>在 <code>tutorial/spiders</code> 目录下新建一个名为 <code>quotes_spider.py</code> 的文件，输入如下代码：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> scrapy</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">QuotesSpider</span><span class="params">(scrapy.Spider)</span>:</span></div><div class="line">    name = <span class="string">"quotes"</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">start_requests</span><span class="params">(self)</span>:</span></div><div class="line">        urls = [</div><div class="line">            <span class="string">'http://quotes.toscrape.com/page/1/'</span>,</div><div class="line">            <span class="string">'http://quotes.toscrape.com/page/2/'</span>,</div><div class="line">        ]</div><div class="line">        <span class="keyword">for</span> url <span class="keyword">in</span> urls:</div><div class="line">            <span class="keyword">yield</span> scrapy.Request(url=url, callback=self.parse)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(self, response)</span>:</span></div><div class="line">        page = response.url.split(<span class="string">"/"</span>)[<span class="number">-2</span>]</div><div class="line">        filename = <span class="string">'quotes-%s.html'</span> % page</div><div class="line">        <span class="keyword">with</span> open(filename, <span class="string">'wb'</span>) <span class="keyword">as</span> f:</div><div class="line">            f.write(response.body)</div><div class="line">        self.log(<span class="string">'Saved file %s'</span> % filename)</div></pre></td></tr></table></figure>
<p><code>QuotesSpider</code> 继承 <code>scrapy.Spider</code>，同时定义了一些属性和方法：</p>
<ul>
<li><code>name</code>：作为爬虫的唯一标识，对于在同一工程中的爬虫，不能够设置相同的名称。</li>
<li><code>start_requests()</code>：返回一个可迭代的请求，然后 Spider 将爬取这些请求</li>
<li><code>parse()</code>：用于处理请求的结果。</li>
</ul>
<h4 id="运行-Sprider"><a href="#运行-Sprider" class="headerlink" title="运行 Sprider"></a>运行 Sprider</h4><ul>
<li>终端命令运行<br> 在创建的项目目录下，输入：<br> <code>scrapy crawl quotes</code><br> quotes 为 Sprider 的标识。</li>
<li><p>Pycharm 下运行</p>
<ol>
<li><p>在 <code>tutorial</code> 目录下创建名为 <code>entrypoint.py</code> 的文件，输入如下代码：</p>
 <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="keyword">from</span> scrapy.cmdline <span class="keyword">import</span> execute</div><div class="line"><span class="comment"># quotes 为刚刚创建的 Spider 的 name，可以在这里切换不同的 Spider</span></div><div class="line">execute([<span class="string">'scrapy'</span>, <span class="string">'crawl'</span>, <span class="string">'quotes'</span>])</div></pre></td></tr></table></figure>
</li>
<li><p>修改配置<br> 在 <code>Run</code> 中选择 <code>Edit Configurations</code>，做如下修改：<br> <img src="http://i.imgur.com/T29yM73.png" alt="配置"></p>
</li>
</ol>
</li>
</ul>
<hr>
<h4 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h4><p><a href="https://doc.scrapy.org/en/master/intro/tutorial.html" target="_blank" rel="external">Scrapy 文档</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;Scrapy 是一个为了爬取网站数据，提取结构性数据而编写的应用框架。 可以应用在包括数据挖掘，信息处理或存储历史数据等一系列的程序中。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;Pycharm 安装&lt;br&gt;  Mac 下按住快捷键 &lt;code&gt;Command + ,&lt;/code&gt; 选择 Project→Project Interpreter 点击 + 号后搜索 Scrapy 进行安装即可：
    
    </summary>
    
      <category term="Python 学习" scheme="http://www.rookieyang.cn/categories/Python-%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Python" scheme="http://www.rookieyang.cn/tags/Python/"/>
    
      <category term="Scrapy" scheme="http://www.rookieyang.cn/tags/Scrapy/"/>
    
  </entry>
  
  <entry>
    <title>Python 下 pymsql 库的基本使用</title>
    <link href="http://www.rookieyang.cn/2017/04/06/Python%E4%B8%8Bpymsql%E5%BA%93%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"/>
    <id>http://www.rookieyang.cn/2017/04/06/Python下pymsql库的基本使用/</id>
    <published>2017-04-06T08:48:11.000Z</published>
    <updated>2017-04-06T09:41:47.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="库的导入"><a href="#库的导入" class="headerlink" title="库的导入"></a>库的导入</h4><p><code>import pymysql</code><a id="more"></a></p>
<h4 id="连接-MySql"><a href="#连接-MySql" class="headerlink" title="连接 MySql"></a>连接 MySql</h4><ol>
<li><p>连接配置</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">MYSQL_HOST = &apos;localhost&apos;</div><div class="line">MYSQL_DBNAME = &apos;cnkiQuote&apos;</div><div class="line">MYSQL_USER = &apos;root&apos;</div><div class="line">MYSQL_PASSWD = &apos;123456&apos;</div></pre></td></tr></table></figure>
<p> 从上往下依次是主机 ip，数据库名，用户名及密码。</p>
</li>
<li>连接<br> 指定编码为 utf8 <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">connection=pymysql.connect(</div><div class="line">        host=MYSQL_HOST,</div><div class="line">        db=MYSQL_DBNAME,</div><div class="line">        user=MYSQL_USER,</div><div class="line">        passwd=MYSQL_PASSWD,</div><div class="line">        charset=<span class="string">'utf8'</span>,</div><div class="line">        use_unicode=<span class="keyword">True</span>)</div></pre></td></tr></table></figure>
</li>
</ol>
<h4 id="Sql-操作"><a href="#Sql-操作" class="headerlink" title="Sql 操作"></a>Sql 操作</h4><ol>
<li><p>查询</p>
 <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">connection.cursor.execute(<span class="string">"""select * from periodical_data where title = %s and publicationDate = %s and author = %s"""</span>,</div><div class="line">    (item[<span class="string">"title"</span>],</div><div class="line">    item[<span class="string">'publicationDate'</span>],</div><div class="line">    str(item[<span class="string">'author'</span>])))</div></pre></td></tr></table></figure>
</li>
<li><p>插入</p>
 <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">connection.cursor.execute(<span class="string">"""insert into periodical_data(title,author,journalName,publicationDate,referenceNum, downloadNum) value (%s,%s,%s,%s,%s,%s)"""</span>,</div><div class="line">    (item[<span class="string">'title'</span>],</div><div class="line">    str(item[<span class="string">'author'</span>]),</div><div class="line">    item[<span class="string">'journalName'</span>],</div><div class="line">    item[<span class="string">'publicationDate'</span>],</div><div class="line">    item[<span class="string">'referenceNum'</span>],</div><div class="line">    item[<span class="string">'downloadNum'</span>]))</div></pre></td></tr></table></figure>
</li>
<li><p>更新</p>
 <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">connection.cursor.execute(<span class="string">"""update periodical_data set title = %s,author = %s,journalName = %s, publicationDate = %s,referenceNum = %s,downloadNum = %s where title = %s and publicationDate = %s and author = %s"""</span>,</div><div class="line">    (str(item[<span class="string">'title'</span>]),</div><div class="line">    str(item[<span class="string">'author'</span>]),</div><div class="line">    str(item[<span class="string">'journalName'</span>]),</div><div class="line">    item[<span class="string">'publicationDate'</span>],</div><div class="line">    item[<span class="string">'referenceNum'</span>],</div><div class="line">    item[<span class="string">'downloadNum'</span>],</div><div class="line">    str(item[<span class="string">'title'</span>]),</div><div class="line">    item[<span class="string">'publicationDate'</span>],</div><div class="line">    str(item[<span class="string">'author'</span>])))</div></pre></td></tr></table></figure>
</li>
<li><p>提交更改<br> <code>connection.commit()</code></p>
</li>
</ol>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;库的导入&quot;&gt;&lt;a href=&quot;#库的导入&quot; class=&quot;headerlink&quot; title=&quot;库的导入&quot;&gt;&lt;/a&gt;库的导入&lt;/h4&gt;&lt;p&gt;&lt;code&gt;import pymysql&lt;/code&gt;
    
    </summary>
    
      <category term="Python 学习" scheme="http://www.rookieyang.cn/categories/Python-%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Python" scheme="http://www.rookieyang.cn/tags/Python/"/>
    
      <category term="MySql" scheme="http://www.rookieyang.cn/tags/MySql/"/>
    
  </entry>
  
  <entry>
    <title>Python 下 Excel 的读取与写入</title>
    <link href="http://www.rookieyang.cn/2017/04/05/Python-%E4%B8%8BExcel-%E7%9A%84%E8%AF%BB%E5%8F%96%E4%B8%8E%E5%86%99%E5%85%A5/"/>
    <id>http://www.rookieyang.cn/2017/04/05/Python-下Excel-的读取与写入/</id>
    <published>2017-04-05T12:30:38.000Z</published>
    <updated>2017-04-06T09:41:46.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>前段时间需要将 MySql 的数据导出到指定格式的 Excel 表格中去，由于是基于 Python3.5 的程序，所以最后选定了 <code>xlrd</code> 库来进行 Excel 的读取操作，写入操作则由 <code>xlsxwriter</code> 和 <code>xlutils</code> 库来进行，其中 <code>xlutils</code> 用于对 Excel 文件的追加。<br><a id="more"></a></p>
<h4 id="Excel-文件的读取"><a href="#Excel-文件的读取" class="headerlink" title="Excel 文件的读取"></a>Excel 文件的读取</h4><ol>
<li>打开 Excel 文件<br>                         <code>workbook = xlrd.open_workbook(r&#39;查询条件.xlsx&#39;)</code></li>
<li>获取所有 sheet<br>               <code>workbook.sheet_names()</code></li>
<li>根据sheet索引或者名称获取 sheet 内容<br>          <code>sheet1 = workbook.sheet_by_index(0)  # sheet索引从0开始</code><br>                               <code>sheet1 = data.sheet_by_name(u&#39;Sheet1&#39;)#通过名称获取</code></li>
<li>获取 <code>sheet1</code> 的行数<br>             <code>sheet1.nrows</code></li>
<li>获取 <code>sheet1</code> 的列数<br>             <code>sheet1.ncols</code></li>
<li>获取指定行列的值<br>                <code>sheet1.row(row)[col].value</code></li>
</ol>
<h4 id="Excel-文件的写入追加"><a href="#Excel-文件的写入追加" class="headerlink" title="Excel 文件的写入追加"></a>Excel 文件的写入追加</h4><ol>
<li>创建 Excel 文件<br> <code>workbook = xlsxwriter.Workbook(year + title + &quot;.xls&quot;)</code></li>
<li>增加 Sheet<br> <code>worksheet = workbook.add_worksheet()</code></li>
<li><p>写入数据                                             </p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">worksheet.write(&apos;A1&apos;, &apos;tag&apos;)</div><div class="line">worksheet.write(&apos;B1&apos;, &apos;文章名字&apos;)</div><div class="line">sheet_write.write(rows, 0, &quot;1&quot;)</div><div class="line">workbook.close()</div></pre></td></tr></table></figure>
</li>
<li><p>追加数据<br>                                        追加之前需要从 <code>xlutils.copy</code> 导入到工程中，首先用 <code>xlrd</code> 打开旧的 Excel 文件，然后利用 <code>xlutils.copy</code> 中的 copy() 方法复制已经存在的数据，最终在原有数据的基础上进行写入。具体代码如下：</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">#导入模块</div><div class="line">from xlutils.copy import copy</div><div class="line">#打开文件</div><div class="line">resultwork = xlrd.open_workbook(year + title + &quot;.xls&quot;)</div><div class="line">#获取行数</div><div class="line">sheet1 = resultwork.sheet_by_index(0)</div><div class="line">rows = sheet1.nrows</div><div class="line">#追加数据，保存</div><div class="line">old_excel = copy.copy(resultwork)</div><div class="line">sheet_write = old_excel.get_sheet(0)</div><div class="line">sheet_write.write(rows, 0, &quot;1&quot;)</div><div class="line">old_excel.save(year + title + &quot;.xls&quot;)</div></pre></td></tr></table></figure>
</li>
</ol>
<hr>
<h4 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h4><ol>
<li><a href="http://xlsxwriter.readthedocs.io/index.html#" target="_blank" rel="external">xlsxwriter 文档</a></li>
<li><a href="http://www.jb51.net/article/63497.htm" target="_blank" rel="external">Python中使用第三方库xlutils来追加写入Excel文件示例</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h4&gt;&lt;p&gt;前段时间需要将 MySql 的数据导出到指定格式的 Excel 表格中去，由于是基于 Python3.5 的程序，所以最后选定了 &lt;code&gt;xlrd&lt;/code&gt; 库来进行 Excel 的读取操作，写入操作则由 &lt;code&gt;xlsxwriter&lt;/code&gt; 和 &lt;code&gt;xlutils&lt;/code&gt; 库来进行，其中 &lt;code&gt;xlutils&lt;/code&gt; 用于对 Excel 文件的追加。&lt;br&gt;
    
    </summary>
    
      <category term="Python 学习" scheme="http://www.rookieyang.cn/categories/Python-%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Python" scheme="http://www.rookieyang.cn/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>正则表达式和 CSS 选择器以及 XPath</title>
    <link href="http://www.rookieyang.cn/2017/04/05/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%92%8Ccss%E9%80%89%E6%8B%A9%E5%99%A8%E4%BB%A5%E5%8F%8Axpath/"/>
    <id>http://www.rookieyang.cn/2017/04/05/正则表达式和css选择器以及xpath/</id>
    <published>2017-04-05T11:10:14.000Z</published>
    <updated>2017-04-13T08:53:33.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h4><p>正则表达式主要用于字符串匹配，使用正则表达式之前需要了解各个符号的含义，这里推荐 <a href="http://www.runoob.com/regexp/regexp-syntax.html" target="_blank" rel="external">菜鸟教程</a>，在了解语法之后我们可以通过 <a href="https://regex101.com/" target="_blank" rel="external">regex101</a> 进行正则表达式的测试。<a id="more"></a></p>
<h4 id="CSS-选择器"><a href="#CSS-选择器" class="headerlink" title="CSS 选择器"></a>CSS 选择器</h4><p>CSS 选择器用于筛选 HTML 文档中的元素，可以通过元素的标签及元素的属性进行筛选，这里介绍使用过的一些小例子：</p>
<ol>
<li><code>span[class=KnowledgeNetcont] &gt; a::text</code><br>筛选出  <code>class</code> 属性为 KnowledgeNetcont 的 <code>span</code> 标签下的 <code>a</code> 标签的文本内容。</li>
<li><code>a[href*=image]::attr(href)</code><br>筛选出 <code>a</code> 标签的 <code>href</code> 属性值包含 image 的属性值。</li>
</ol>
<h4 id="XPath"><a href="#XPath" class="headerlink" title="XPath"></a>XPath</h4><p>XPath 也用于筛选 HTML  文档中的元素，主要基于文档的结构进行筛选，这里依旧介绍使用过的一些小例子：</p>
<ol>
<li><code>xpath(&quot;.//a[@target=&#39;kcmstarget&#39;]&quot;).xpath(&#39;string(.)&#39;)</code><br> <code>@</code> 用于选取属性，<code>string(.)</code> 取的当前节点下的所有文本（包含子标签的文本），整个的含义是选取当前节点下所有 <code>target</code> 属性值为 kcmstarget 的 <code>a</code> 标签下的所有文本。</li>
<li><code>xpath(&quot;.//em/text()&quot;)</code><br>如果只想取的当前节点的文本而不需要子标签的文本则可以用 <code>text()</code> 去获取。</li>
<li><code>xpath(&quot;//div/a[text()=&#39;下一页&#39;]/@href&quot;)</code><br> 获取文本内容为下一页的 <code>a</code> 标签的 <code>href</code> 属性值。</li>
</ol>
<hr>
<h4 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h4><ol>
<li><a href="http://www.runoob.com/regexp/regexp-tutorial.html" target="_blank" rel="external">正则表达式 – 教程</a></li>
<li><a href="http://www.w3school.com.cn/xpath/index.asp" target="_blank" rel="external">XPath 教程</a></li>
<li><a href="http://www.w3school.com.cn/cssref/css_selectors.asp" target="_blank" rel="external">CSS 选择器参考手册</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;正则表达式&quot;&gt;&lt;a href=&quot;#正则表达式&quot; class=&quot;headerlink&quot; title=&quot;正则表达式&quot;&gt;&lt;/a&gt;正则表达式&lt;/h4&gt;&lt;p&gt;正则表达式主要用于字符串匹配，使用正则表达式之前需要了解各个符号的含义，这里推荐 &lt;a href=&quot;http://www.runoob.com/regexp/regexp-syntax.html&quot;&gt;菜鸟教程&lt;/a&gt;，在了解语法之后我们可以通过 &lt;a href=&quot;https://regex101.com/&quot;&gt;regex101&lt;/a&gt; 进行正则表达式的测试。
    
    </summary>
    
      <category term="前端" scheme="http://www.rookieyang.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="HTML" scheme="http://www.rookieyang.cn/tags/HTML/"/>
    
      <category term="选择器" scheme="http://www.rookieyang.cn/tags/%E9%80%89%E6%8B%A9%E5%99%A8/"/>
    
  </entry>
  
</feed>
