<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>知北遊的博客</title>
  <subtitle>青春会老去，岁月不会停</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.rookieyang.cn/"/>
  <updated>2017-09-16T17:40:20.000Z</updated>
  <id>http://www.rookieyang.cn/</id>
  
  <author>
    <name>知北遊</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>面向对象的六大原则及单例模式</title>
    <link href="http://www.rookieyang.cn/2017/09/17/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%85%AD%E5%A4%A7%E5%8E%9F%E5%88%99%E5%8F%8A%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
    <id>http://www.rookieyang.cn/2017/09/17/面向对象的六大原则及单例模式/</id>
    <published>2017-09-16T17:05:58.000Z</published>
    <updated>2017-09-16T17:40:20.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h3><h4 id="面向对象的六大原则"><a href="#面向对象的六大原则" class="headerlink" title="面向对象的六大原则"></a>面向对象的六大原则</h4><h5 id="单一职责原则"><a href="#单一职责原则" class="headerlink" title="单一职责原则"></a>单一职责原则</h5><p>单一职责原则 (SRP) 是指就一个类而言，应该仅有一个引起它变化的原因</p>
<blockquote>
<p>简单而言就是一个类应该只有一项职责，而不是具有多项职责，比如一个类既负责图片缓存的处理同时还负责显示图片，实际上应该拆分成两个类，一个类负责图片的缓存，另外一个类负责图片显示。如果一个类兼具太多的职责不仅导致了耦合性，而且在一个职责发生变化的时候还可能削弱其它的职责功能。</p>
</blockquote>
<a id="more"></a>
<h5 id="开闭原则"><a href="#开闭原则" class="headerlink" title="开闭原则"></a>开闭原则</h5><p>开闭原则 (OCP) 是指软件中的对象对于修改应该是封闭的，对于扩展应该是开放的。</p>
<blockquote>
<p>如果一个类为了实现新的功能不断的对类中的原有代码进行修改和增加，不仅可能引入 Bug，还有可能会导致类越来越庞大，比如一个图片的缓存类需要实现内存缓存、SD 卡缓存、两种方式混合的缓存方法，在图片显示类中需要自由选择何种方式进行缓存显示。比较好的一种方式是：由于三种缓存方式实际上基本功能一致，所以可以定义一个接口，然后在图片显示类中义一个接口用于指向三个类实例化的对象，那么当需要采用哪种方式去进行缓存的时候，只需要使用 set 方法进行依赖注入将接口指向相应方式的对象即可，并且如果要实现其它不同的缓存方式只需要对接口进行实现即可。这样实现的代码耦合性弱扩展性强。</p>
</blockquote>
<h5 id="里氏替换原则"><a href="#里氏替换原则" class="headerlink" title="里氏替换原则"></a>里氏替换原则</h5><p>里氏替换原则是指所有引用基类的地方必须能透明地使用其子类的对象</p>
<blockquote>
<p>一个基类的子类拥有基类的属性和方法（私有的除外），所以在大多数情况下基类能干的子类都能做，这样可以保证很好的扩展性，因为可以在基类的基础上进行扩展实现不同功能的子类。因此里氏替换原则有利于提高扩展性，同时为开闭原则提供了保障。</p>
</blockquote>
<h5 id="依赖倒置原则"><a href="#依赖倒置原则" class="headerlink" title="依赖倒置原则"></a>依赖倒置原则</h5><p>依赖倒置原则是用于解耦的一种方式，主要有以下几个关键点：</p>
<ol>
<li>高层模块不应该依赖底层模块，两者都应该依赖其抽象</li>
<li>抽象不应该依赖细节</li>
<li>细节应该依赖抽象</li>
</ol>
<blockquote>
<p>第一点是指当高层的模块使用底层的模块时候，不应该直接使用底层模块类的具体对象，而应该使用其接口或者是抽象类，这样可以保证其扩展性，也就是说高层模块与底层模块之间应该通过接口发生联系，而不应该存在直接关联。</p>
</blockquote>
<h5 id="接口隔离原则"><a href="#接口隔离原则" class="headerlink" title="接口隔离原则"></a>接口隔离原则</h5><p>接口隔离原则是指类间的关系应该建立在最小的接口上</p>
<blockquote>
<p>最小的接口实际上就是抽象的一种表达，一个接口下面可能可能会实现很多种接口，或者是很多层级接口，要对这些接口相同的功能部分进行操作的时候只需要对最顶层的接口操作即可，譬如当关闭输入输出流的时候，Java 中有很多种流，字节流、字符流、缓冲流。这个时候为了减少依赖、耦合性以及增加扩展性，我们只需要利用 Cloaseable 接口指向各种流的对象进行关闭操作即可。</p>
</blockquote>
<h5 id="迪米特原则"><a href="#迪米特原则" class="headerlink" title="迪米特原则"></a>迪米特原则</h5><p>迪米特原则是指一个对象应该对其它对象有最少的了解</p>
<blockquote>
<p>一个类应该尽可能少的利用到其它类完成相同的任务，这样可以降低耦合性</p>
</blockquote>
<h4 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h4><h5 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h5><p>所谓单例也就是说在一个类在系统中只存在一个实例，并且可以自行实例化向系统提供这个实例</p>
<h5 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h5><p>适用于某个类有且仅有一个对象的场景，避免创建多个对象消耗过多的资源。</p>
<blockquote>
<ol>
<li><p>构造函数不对外开放，一般为 private</p>
</li>
<li><p>通过一个静态方法或者枚举返回单例类对象</p>
</li>
<li><p>确保单例类对象有且只有一个，尤其是在多线程环境下</p>
</li>
<li><p>确保单例类对象在反序列化时不会重新构建对象</p>
</li>
</ol>
<p>也即是说单例模式的对象必须由该类的静态方法进行实例化和提供，并且不能出现多个对象。</p>
</blockquote>
<h5 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h5><ol>
<li>优点<ul>
<li>单例模式在内存中只存在一个实例，减少了内存的开支。</li>
<li>减少了系统的性能开销，当一个对象的产生需要较多的资源的时候，这个时候可以通过产生一个单例对象，然后永驻内存来解决。</li>
<li>单例模式可以避免对资源的多重占用。</li>
<li>单例模式可以在系统设置全局的访问点，优化和共享资源访问</li>
</ul>
</li>
<li>缺点<ul>
<li><strong>单例模式一般没有接口，扩展很困难。</strong></li>
<li><strong>单例对象如果持有 Context，那么很容易引发内存泄漏，此时传递给单例对象的 Context 最好是 Application Context</strong></li>
</ul>
</li>
</ol>
<h5 id="常用的实现方式"><a href="#常用的实现方式" class="headerlink" title="常用的实现方式"></a>常用的实现方式</h5><ol>
<li><p>饿汉模式</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CEO</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> CEO sCeo = <span class="keyword">new</span> CEO();</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">CEO</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> CEO <span class="title">newInstance</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> sCeo;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>该种方式实现的单例模式当类被加载的时候就会初始化一个 CEO 对象，然后外部可以通过 newInstance 静态方法进行获取。</p>
<p>由于单例模式需要类能够自行进行实例化，所以返回值一定是类变量以及通过静态方法进行返回。</p>
</blockquote>
</li>
<li><p>懒汉模式</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingleInstance</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SingleInstance sSingleInstance;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SingleInstance</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> SingleInstance <span class="title">newInstance</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (sSingleInstance != <span class="keyword">null</span>) &#123;</div><div class="line">            sSingleInstance = <span class="keyword">new</span> SingleInstance();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> sSingleInstance;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>采用懒汉模式实现的单例模式可以在使用的时候才将对象实例化，但是由于每次调用 newInstance 方法的时候都会进行同步（比不需要同步的慢 100 倍），所以造成了不必要的同步开销，不建议使用。</p>
</blockquote>
</li>
<li><p>Double Check Lock</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingleInstance</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SingleInstance sSingleInstance = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SingleInstance</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SingleInstance <span class="title">newInstance</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (sSingleInstance != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">synchronized</span> (SingleInstance.class) &#123;</div><div class="line">                <span class="keyword">if</span> (sSingleInstance != <span class="keyword">null</span>) &#123;</div><div class="line">                    sSingleInstance = <span class="keyword">new</span> SingleInstance();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> sSingleInstance;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>第一次的判断避免了在对象非空情况下进行同步导致不必要开销的问题，第二次判断是由于可能存在线程 A，B 同时判断了对象为空，然后依次进入同步块中，如果这个时候不进行判断则可能导致创建出两个对象出来，所以需要进行第二次判断。</p>
<p>这个模式存在的一个问题是 mSingleInstance = new SingleInstance() 不是原子操作，其分为三个部分：给实例对象分配内存；调用构造函数，初始化成员字段；将实例对象指向分配的内存空间。并且后两步的执行顺序是不确定的，所以可能出现 A 线程执行完第三步，没有执行完第二步的情况下，程序切换至 B 线程，B 线程判断当前对象非空取走对象，但由于对象的成员字段没有初始化完成，所以可能出现错误。</p>
<p>解决办法是在 sInstance 前加上 volatile 关键字。</p>
</blockquote>
</li>
<li><p>静态内部类</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingleInstance</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SingleInstance</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SingleInstance <span class="title">newInstance</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> SingleHolder.sSingleInstance;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SingleHolder</span> </span>&#123;</div><div class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> SingleInstance sSingleInstance = <span class="keyword">new</span> SingleInstance();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>采用这种方式实现的单例模式很好的避免了 DCL 中可能出现的问题，由于内部类只有在使用它的成员以及方法的时候才会进行载入，所以可以做到使用的时候才实例化对象，而且能够确保线程安全。</p>
</blockquote>
</li>
<li><p>枚举单例</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">enum</span> SingletonEnum &#123;</div><div class="line">    INSTANCE;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"do sth."</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>在任何情况下枚举实例都是一个单例，而且创建过程是线程安全的。</p>
</blockquote>
</li>
<li><p>容器实现单例</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonManager</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String, Object&gt; objectMap = <span class="keyword">new</span> HashMap&lt;&gt;();</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SingletonManager</span><span class="params">()</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">registerService</span><span class="params">(String key, Object instance)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (!objectMap.containsKey(key)) &#123;</div><div class="line">            objectMap.put(key, instance);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">getService</span><span class="params">(String key)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> objectMap.get(key);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>采用容器实现的单例模式可以对多种对象的单例进行管理，例如 Android 当中的 getSystemService 就是这样实现的单例模式。</p>
</blockquote>
</li>
</ol>
<h5 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h5><ol>
<li><p>前四种方式实现的单例模式存在在反序列化（反射执行无参构造函数）的情况下可能会重新创建一个对象，为了避免这种情况的发生，我们需要重写 readResolve 方法，这样在进行反序列化的时候就会执行这个方法获取对象实例。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> Object <span class="title">readResolve</span><span class="params">()</span><span class="keyword">throws</span> ObjectStreamException</span>&#123;</div><div class="line">        <span class="keyword">return</span> sSingleInstance;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>单例模式的核心在于将构造函数进行私有化，并且通过一个静态方法返回唯一的对象实例，在这个获取的过程当中需要保证<strong>线程安全、防止反序列化</strong>导致生成实例对象等问题。</p>
</li>
</ol>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;设计模式&quot;&gt;&lt;a href=&quot;#设计模式&quot; class=&quot;headerlink&quot; title=&quot;设计模式&quot;&gt;&lt;/a&gt;设计模式&lt;/h3&gt;&lt;h4 id=&quot;面向对象的六大原则&quot;&gt;&lt;a href=&quot;#面向对象的六大原则&quot; class=&quot;headerlink&quot; title=&quot;面向对象的六大原则&quot;&gt;&lt;/a&gt;面向对象的六大原则&lt;/h4&gt;&lt;h5 id=&quot;单一职责原则&quot;&gt;&lt;a href=&quot;#单一职责原则&quot; class=&quot;headerlink&quot; title=&quot;单一职责原则&quot;&gt;&lt;/a&gt;单一职责原则&lt;/h5&gt;&lt;p&gt;单一职责原则 (SRP) 是指就一个类而言，应该仅有一个引起它变化的原因&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;简单而言就是一个类应该只有一项职责，而不是具有多项职责，比如一个类既负责图片缓存的处理同时还负责显示图片，实际上应该拆分成两个类，一个类负责图片的缓存，另外一个类负责图片显示。如果一个类兼具太多的职责不仅导致了耦合性，而且在一个职责发生变化的时候还可能削弱其它的职责功能。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="读书笔记" scheme="http://www.rookieyang.cn/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="设计模式" scheme="http://www.rookieyang.cn/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>百分比圆环的实现</title>
    <link href="http://www.rookieyang.cn/2017/09/10/%E7%99%BE%E5%88%86%E6%AF%94%E5%9C%86%E7%8E%AF%E7%9A%84%E5%AE%9E%E7%8E%B0/"/>
    <id>http://www.rookieyang.cn/2017/09/10/百分比圆环的实现/</id>
    <published>2017-09-10T01:01:22.000Z</published>
    <updated>2017-09-10T14:30:10.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>最近做一个简单的测试 APP 的时候需要将手机的存储空间使用情况显示出来，刚好记得一些清理软件的存储空间都是以这种百分比圆环的方式显示出来的，所以了解了一下它的实现过程。</p>
<h3 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h3><p>最终实现的效果如下图所示：<br><img src="https://i.imgur.com/UlM8EHR.gif" alt="2017-09-10 16.01.09"></p>
<h3 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h3><p>从上图我们可以看到，绘制一个这样的百分比圆环主要有涉及到三个元素：</p>
<ol>
<li>背景空心圆：代表着总的进度</li>
<li>圆弧：代表着当前进度</li>
<li>文字：需要局中，表示具体的进度<a id="more"></a></li>
</ol>
<p>在了解到涉及到的元素之后，我们还需要了解绘制各个元素需要哪些参数，由于绘制都通过 onDraw 方法中的 canvas 对象，所以我们可以通过 canvas 对象的方法去确定所需要的参数。首先是绘制圆，查看 drawCircle 可以知道总共需要四个参数：<strong>圆心 X、Y 坐标、半径长度以及画笔 Paint</strong>；而圆弧所需要的参数略微会多一些，通过查看 drawArc 可以知道总共需要四个参数：<strong>Recf、圆弧的起始角度、从起始角度顺时针扫过的角度以及必须的 Paint</strong>，这里的 Recf 确定了一个矩形区域，然后确定了一个内接椭圆，而圆弧的绘制实际上是在椭圆上面进行截取；最后是文本的绘制，查看 drawText 可以知道，需要四个参数：<strong>文本内容、进行绘制的 X、Y 坐标点以及Paint</strong>。</p>
<h3 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h3><p>在实现思路上我们已经弄清楚了绘制元素所需要的参数，这个时候就可以一步步进行绘制了：</p>
<ol>
<li><p>首先是绘制圆，这里我们定义了四个参数分别表示圆心 X，Y 的坐标、半径以及绘制所需要的画笔，然后对这些参数进行初始化，最终在 onDraw 进行绘制。</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RingPercentDemo</span> <span class="keyword">extends</span> <span class="title">View</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mCircleX;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mCircleY;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mRadius;</div><div class="line">    <span class="keyword">private</span> Paint mCirclePaint;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RingPercentDemo</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(context);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RingPercentDemo</span><span class="params">(Context context,</span></span></div><div class="line">        @Nullable AttributeSet attrs) &#123;</div><div class="line">        <span class="keyword">super</span>(context, attrs);</div><div class="line">        mCircleX = <span class="number">300</span>;</div><div class="line">        mCircleY = <span class="number">300</span>;</div><div class="line">        mRadius = <span class="number">260</span>;</div><div class="line">        mCirclePaint = <span class="keyword">new</span> Paint();</div><div class="line">        mCirclePaint.setColor(Color.BLUE);</div><div class="line">        mCirclePaint.setStrokeWidth(<span class="number">10</span>);</div><div class="line">        mCirclePaint.setStyle(Style.STROKE); <span class="comment">//绘制空心圆所以不需要填充</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDraw</span><span class="params">(Canvas canvas)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onDraw(canvas);</div><div class="line"></div><div class="line">        canvas.drawCircle(mCircleX, mCircleY, mRadius, mCirclePaint);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>接下来是绘制圆环，从效果图上可以看出来，圆环实际上是在圆上截取一段圆弧表示，所以绘制圆环的矩形区域可以确定下来，在确定了矩形区域之后只需要自己设定起始的角度和扫过的角度即可以绘制出在圆上的圆弧。</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RingPercentDemo</span> <span class="keyword">extends</span> <span class="title">View</span> </span>&#123;</div><div class="line"></div><div class="line">    ...</div><div class="line">    <span class="keyword">private</span> RectF mRecF;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">float</span> mStartAngle;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">float</span> mSweepAngle;</div><div class="line">    <span class="keyword">private</span> Paint mRingPaint;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RingPercentDemo</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(context);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RingPercentDemo</span><span class="params">(Context context,</span></span></div><div class="line">        @Nullable AttributeSet attrs) &#123;</div><div class="line">        <span class="keyword">super</span>(context, attrs);</div><div class="line">        ...</div><div class="line"></div><div class="line">        mRecF = <span class="keyword">new</span> RectF(mCircleX - mRadius, mCircleY - mRadius,</div><div class="line">            mCircleX + mRadius, mCircleY + mRadius);</div><div class="line">        mStartAngle = -<span class="number">90f</span>;</div><div class="line">        mSweepAngle = <span class="number">120f</span>;</div><div class="line">        mRingPaint = <span class="keyword">new</span> Paint();</div><div class="line">        mRingPaint.setColor(Color.RED);</div><div class="line">        mRingPaint.setStrokeWidth(<span class="number">20</span>);</div><div class="line">        mRingPaint.setStyle(Style.STROKE);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDraw</span><span class="params">(Canvas canvas)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onDraw(canvas);</div><div class="line"></div><div class="line">        ...</div><div class="line">        canvas.drawArc(mRecF, mStartAngle, mSweepAngle,</div><div class="line">            <span class="keyword">false</span>, mRingPaint); <span class="comment">//设置为 false 不与中心点进行连接</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>最后是绘制文本，由于要绘制在圆的中心，所以文本的坐标我们首先设置为圆的中心，然后绘制的风格选为 Align.CENTER，这样文本将以设定的坐标点向两边延伸保证了 X 处于中心位置。</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RingPercentDemo</span> <span class="keyword">extends</span> <span class="title">View</span> </span>&#123;</div><div class="line"></div><div class="line">    ...</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mTextX;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mTextY;</div><div class="line">    <span class="keyword">private</span> Paint mTextPaint;</div><div class="line">    <span class="keyword">private</span> String mTextStr;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RingPercentDemo</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(context);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RingPercentDemo</span><span class="params">(Context context,</span></span></div><div class="line">        @Nullable AttributeSet attrs) &#123;</div><div class="line">        <span class="keyword">super</span>(context, attrs);</div><div class="line">        ...</div><div class="line"></div><div class="line">        mTextPaint = <span class="keyword">new</span> Paint();</div><div class="line">        mTextPaint.setColor(Color.BLACK);</div><div class="line">        mTextPaint.setStyle(Style.FILL);</div><div class="line">        mTextPaint.setTextSize(<span class="number">40</span>);</div><div class="line">        mTextPaint.setTextAlign(Align.CENTER);</div><div class="line">        mTextPaint.setTextSize(mRadius / <span class="number">2</span>);</div><div class="line">        mTextX = mCircleX;</div><div class="line">        mTextY = mCircleY;</div><div class="line">        mTextStr = <span class="string">"33%"</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDraw</span><span class="params">(Canvas canvas)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onDraw(canvas);</div><div class="line"></div><div class="line">        ...</div><div class="line">        canvas.drawText(mTextStr, mTextX, mTextY, mTextPaint);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<p>实际效果图：<br><img src="https://i.imgur.com/9ZYvei1.jpg" alt="tips1"><br>这个时候我们能够发现文本实质上不在中心位置，这是为什么呢？因为我们在设定的坐标是用于确定绘制的<strong>基准线</strong>而不是绘制的中心点，所以自然文本不可能绘制在正中心，具体可以借用下图来进行描述：<br><img src="https://i.imgur.com/vOewNzN.jpg" alt=""><br>从这就可以很明显的看到，文本的中心和设定的坐标之间是存在一个偏移量的，所以为了使文本处于真正的中心，我们需要计算得到这个偏移量，然后将之前设定的基准线下移。在计算偏移量之前首先需要了解字体是如何进行测量的，具体如下图所示：<br><img src="https://i.imgur.com/xwZqHv9.jpg" alt=""><br>其中 Top 表示基准线以上可绘制的最大距离（负数），Bottom 表示基准线以下可绘制的最大距离（正数），Ascent 表示基准线以上推荐的可绘制的距离，Descent 表示基准线以下推荐的可绘制的距离。<br>了解完这一切之后如何计算偏移量就很简单了，通过 FontMetrics 获取 Bottom 和 Top，然后通过 ((Bottom - Top) / 2) - Bottom 最终取得偏移量。代码做如下修改：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RingPercentDemo</span> <span class="keyword">extends</span> <span class="title">View</span> </span>&#123;</div><div class="line"></div><div class="line">    ...</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mTextX;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mTextY;</div><div class="line">    <span class="keyword">private</span> Paint mTextPaint;</div><div class="line">    <span class="keyword">private</span> String mTextStr;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RingPercentDemo</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(context);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RingPercentDemo</span><span class="params">(Context context,</span></span></div><div class="line">        @Nullable AttributeSet attrs) &#123;</div><div class="line">        ...</div><div class="line">        FontMetrics fontMetrics = mTextPaint.getFontMetrics();</div><div class="line">        <span class="keyword">float</span> offsetY = ((fontMetrics.bottom - fontMetrics.top) / <span class="number">2</span>) - fontMetrics.bottom;</div><div class="line">        mTextY = (<span class="keyword">int</span>) (mCircleY + offsetY);</div><div class="line">        ...</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>修改之后的效果：<br><img src="https://i.imgur.com/M9hzVs4.jpg" alt="tip2"></p>
<h3 id="改进"><a href="#改进" class="headerlink" title="改进"></a>改进</h3><p>经过上述过程，虽然圆环百分比的效果已经实现，但是跟效果图中的还是差的很远，而且也不能够灵活，所以我们需要借助自定义属性去改进我们的圆环。</p>
<ol>
<li><p>首先需要在 values 文件夹下创建 attrs.xml 文件在里面声明我们需要定义的属性：</p>
 <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">declare-styleable</span> <span class="attr">name</span>=<span class="string">"RingPercentDemo"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">attr</span> <span class="attr">format</span>=<span class="string">"integer"</span> <span class="attr">name</span>=<span class="string">"radius"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">attr</span> <span class="attr">format</span>=<span class="string">"color"</span> <span class="attr">name</span>=<span class="string">"circleColor"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">attr</span> <span class="attr">format</span>=<span class="string">"integer"</span> <span class="attr">name</span>=<span class="string">"circleStrokeWidth"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">attr</span> <span class="attr">format</span>=<span class="string">"integer"</span> <span class="attr">name</span>=<span class="string">"circleStyle"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">attr</span> <span class="attr">format</span>=<span class="string">"color"</span> <span class="attr">name</span>=<span class="string">"ringColor"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">attr</span> <span class="attr">format</span>=<span class="string">"integer"</span> <span class="attr">name</span>=<span class="string">"ringStrokeWidth"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">attr</span> <span class="attr">format</span>=<span class="string">"integer"</span> <span class="attr">name</span>=<span class="string">"startAngle"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">attr</span> <span class="attr">format</span>=<span class="string">"integer"</span> <span class="attr">name</span>=<span class="string">"sweepAngle"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">attr</span> <span class="attr">format</span>=<span class="string">"integer"</span> <span class="attr">name</span>=<span class="string">"rate"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">declare-styleable</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>然后在构造函数获取到自定义的属性的属性值</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">RingPercentDemo</span><span class="params">(Context context,</span></span></div><div class="line">        @Nullable AttributeSet attrs) &#123;</div><div class="line">        <span class="keyword">super</span>(context, attrs);</div><div class="line"></div><div class="line">        TypedArray typedArray = context.obtainStyledAttributes(</div><div class="line">            attrs, R.styleable.RingPercentDemo);</div><div class="line"></div><div class="line">        mRadius = typedArray.getInteger(R.styleable.RingPercentDemo_radius, <span class="number">60</span>);</div><div class="line">        mCircleColor = typedArray.getColor(</div><div class="line">            R.styleable.RingPercentDemo_circleColor, Color.GREEN);</div><div class="line">        mCircleStrokeWidth = typedArray.getInteger(</div><div class="line">            R.styleable.RingPercentDemo_circleStrokeWidth, <span class="number">5</span>);</div><div class="line">        mCircleStyle = typedArray.getInteger(</div><div class="line">            R.styleable.RingPercentDemo_circleStyle, <span class="number">0</span>);</div><div class="line">        mRingColor = typedArray.getColor(</div><div class="line">            R.styleable.RingPercentDemo_ringColor, Color.RED);</div><div class="line">        mRingStrokeWidth = typedArray.getColor(</div><div class="line">            R.styleable.RingPercentDemo_ringStrokeWidth, <span class="number">10</span>);</div><div class="line">        mStartAngle = typedArray.getInteger(</div><div class="line">            R.styleable.RingPercentDemo_startAngle, -<span class="number">90</span>);</div><div class="line">        mSweepAngle = typedArray.getInteger(</div><div class="line">            R.styleable.RingPercentDemo_sweepAngle, <span class="number">90</span>);</div><div class="line">        mRate = typedArray.getInteger(R.styleable.RingPercentDemo_rate, <span class="number">100</span>);</div><div class="line">        typedArray.recycle();</div><div class="line"></div><div class="line">        init();</div><div class="line"></div><div class="line">    &#125;</div></pre></td></tr></table></figure>
</li>
<li><p>在获取到这些属性值之后只需要给对应的 Paint 和变量设置对应的值即可。</p>
</li>
</ol>
<blockquote>
<p>到这里自定义 View 的灵活性就变的较高了，但事实上还存在两个问题，一个是圆心的位置还是指定的不能够自适应，另一个是圆弧没有动画效果。所以我们需要接着改进。</p>
</blockquote>
<ol>
<li><p>圆心的位置我们希望能    够一直处于 View 的中心，所以需要重写 onMeasure 方法，在 onMeasure 方法通过获取 View 的高度和宽度得到了 View 的中心点坐标，从而使得圆心一直在 View 的中心。   </p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onMeasure</span><span class="params">(<span class="keyword">int</span> widthMeasureSpec, <span class="keyword">int</span> heightMeasureSpec)</span> </span>&#123;</div><div class="line">    setMeasuredDimension(measuse(widthMeasureSpec), measuse(heightMeasureSpec));</div><div class="line"></div><div class="line">    mCircleX = getMeasuredWidth() / <span class="number">2</span>;</div><div class="line">    mCircleY = getMeasuredHeight() / <span class="number">2</span>;</div><div class="line"></div><div class="line">    <span class="comment">//判断设定的圆是否超出显示范围，如果超出需要缩小</span></div><div class="line">    <span class="keyword">if</span> (mCircleX &lt; mRadius) &#123;</div><div class="line">        mRadius = mCircleX - mCircleStrokeWidth - mRingStrokeWidth;</div><div class="line">        mTextPaint.setTextSize(mRadius / <span class="number">2</span>);</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (mCircleY &lt; mRadius) &#123;</div><div class="line">        mRadius = mCircleY - mCircleStrokeWidth - mRingStrokeWidth;</div><div class="line">        mTextPaint.setTextSize(mRadius / <span class="number">2</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    FontMetrics fontMetrics = mTextPaint.getFontMetrics();</div><div class="line">    <span class="keyword">int</span> offsetY = (<span class="keyword">int</span>) (((fontMetrics.bottom - fontMetrics.top)) / <span class="number">2</span> - fontMetrics.bottom);</div><div class="line">    mTextX = mCircleX;</div><div class="line">    mTextY = mCircleY + offsetY;</div><div class="line"></div><div class="line">    mRecF = <span class="keyword">new</span> RectF(mCircleX - mRadius, mCircleY - mRadius,</div><div class="line">        mCircleX + mRadius, mCircleY + mRadius);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>在解决了圆心的问题之    后，还需要为圆弧提供动态变化的效果，这里可以通过不断重绘达成目标。</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDraw</span><span class="params">(Canvas canvas)</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.onDraw(canvas);</div><div class="line"></div><div class="line">    canvas.drawCircle(mCircleX, mCircleY, mRadius, mCirclePaint);</div><div class="line">    canvas.drawArc(mRecF, mStartAngle, mCurrentAngle, <span class="keyword">false</span>, mRingPaint);</div><div class="line">    canvas.drawText(mTextStr, mTextX, mTextY, mTextPaint);</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (mCurrentAngle &lt; mSweepAngle) &#123;</div><div class="line">        mCurrentAngle += <span class="number">3.6</span>;</div><div class="line">        mTextStr = mCurrentAngle * <span class="number">100</span> / <span class="number">360</span> + <span class="string">"%"</span>;</div><div class="line">        postInvalidateDelayed(mRate);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<p>最终的代码已经上传到Github上<a href="https://github.com/firstdream10/RingPercent" target="_blank" rel="external">源码地址</a></p>
<hr>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>实际上自定义 View 过实际上自定义 View 过程需要将效果进行拆分，然后对拆分之后的每一个元素进行单独的处理，而为了让自定义的 View 可定制，还需要用到自定义属性。</p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ol>
<li><p><a href="http://www.cnblogs.com/slgkaifa/p/7101297.html" target="_blank" rel="external">android canvas drawText()文字居中</a></p>
</li>
<li><p><a href="http://blog.csdn.net/nugongahou110/article/details/49159189" target="_blank" rel="external">Android自定义控件之百分比圆环进度条</a></p>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;最近做一个简单的测试 APP 的时候需要将手机的存储空间使用情况显示出来，刚好记得一些清理软件的存储空间都是以这种百分比圆环的方式显示出来的，所以了解了一下它的实现过程。&lt;/p&gt;
&lt;h3 id=&quot;效果图&quot;&gt;&lt;a href=&quot;#效果图&quot; class=&quot;headerlink&quot; title=&quot;效果图&quot;&gt;&lt;/a&gt;效果图&lt;/h3&gt;&lt;p&gt;最终实现的效果如下图所示：&lt;br&gt;&lt;img src=&quot;https://i.imgur.com/UlM8EHR.gif&quot; alt=&quot;2017-09-10 16.01.09&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;实现思路&quot;&gt;&lt;a href=&quot;#实现思路&quot; class=&quot;headerlink&quot; title=&quot;实现思路&quot;&gt;&lt;/a&gt;实现思路&lt;/h3&gt;&lt;p&gt;从上图我们可以看到，绘制一个这样的百分比圆环主要有涉及到三个元素：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;背景空心圆：代表着总的进度&lt;/li&gt;
&lt;li&gt;圆弧：代表着当前进度&lt;/li&gt;
&lt;li&gt;文字：需要局中，表示具体的进度
    
    </summary>
    
      <category term="Android 学习" scheme="http://www.rookieyang.cn/categories/Android-%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Android" scheme="http://www.rookieyang.cn/tags/Android/"/>
    
      <category term="自定义View" scheme="http://www.rookieyang.cn/tags/%E8%87%AA%E5%AE%9A%E4%B9%89View/"/>
    
  </entry>
  
  <entry>
    <title>Binder 浅解</title>
    <link href="http://www.rookieyang.cn/2017/09/03/Binder%E6%B5%85%E8%A7%A3/"/>
    <id>http://www.rookieyang.cn/2017/09/03/Binder浅解/</id>
    <published>2017-09-03T13:43:27.000Z</published>
    <updated>2017-09-04T17:10:43.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="什么是-Binder"><a href="#什么是-Binder" class="headerlink" title="什么是 Binder"></a>什么是 Binder</h4><p>Binder 是 Android 中一种跨进程通信（IPC）方式。</p>
<h4 id="Binder-的原理"><a href="#Binder-的原理" class="headerlink" title="Binder 的原理"></a>Binder 的原理</h4><p>Binder通信采用C/S架构，从组件视角来说，包含 Client、Server、ServiceManager 以及 binder 驱动，其中 ServiceManager 用于管理系统中的各种服务。架构图如下所示：<br><img src="https://lh3.googleusercontent.com/-r87ZtMW666o/WXhxa-i0nJI/AAAAAAAAAX0/tPeJ1cnEgXsMc7-ogBqi15BGw5UjY60gACHMYCw/I/Binder" alt="Binder原理"></p>
<ul>
<li>此处的 Service Manager 是指 Native 层的 ServiceManager（C++）<a id="more"></a></li>
<li>注册服务(addService)：Server 进程要先注册 Service 到 ServiceManager。该过程：Server 是客户端，ServiceManager 是服务端。</li>
<li>获取服务(getService)：Client 进程使用某个 Service 前，须先向 ServiceManager 中获取相应的 Service。该过程：Client 是客户端，ServiceManager 是服务端。</li>
<li>使用服务：Client 根据得到的 Service 信息建立与 Service 所在的 Server 进程通信的通路，然后就可以直接与 Service 交互。该过程：Client 是客户端，Server 是服务端。</li>
</ul>
<h4 id="Binder-的结构"><a href="#Binder-的结构" class="headerlink" title="Binder 的结构"></a>Binder 的结构</h4><p>在学习 Binder 的结构的时候，可以利用 AIDL 去生成 Binder，这里我们首先需要创建一个实现了 Parcelable 接口的 Book 类，然后在 main 文件夹下创建 AIDL 文件夹，分别创建 Book.aidl、IBookManager.aidl。三个文件的代码分别如下：<br>    <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//Book.java</span></div><div class="line"><span class="keyword">package</span> com.rookieyang.aidltest;</div><div class="line"></div><div class="line"><span class="keyword">import</span> android.os.Parcel;</div><div class="line"><span class="keyword">import</span> android.os.Parcelable;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by firstdream on 2017/9/4.</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Book</span> <span class="keyword">implements</span> <span class="title">Parcelable</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mBookId;</div><div class="line">    <span class="keyword">private</span> String mBookName;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Book</span><span class="params">(<span class="keyword">int</span> mBookId, String mBookName)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.mBookId = mBookId;</div><div class="line">        <span class="keyword">this</span>.mBookName = mBookName;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">writeToParcel</span><span class="params">(Parcel parcel, <span class="keyword">int</span> i)</span> </span>&#123;</div><div class="line">        parcel.writeInt(mBookId);</div><div class="line">        parcel.writeString(mBookName);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">describeContents</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Parcelable.Creator&lt;Book&gt; CREATOR = <span class="keyword">new</span> Creator&lt;Book&gt;() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> Book <span class="title">createFromParcel</span><span class="params">(Parcel parcel)</span> </span>&#123;</div><div class="line">            Book book = <span class="keyword">new</span> Book(parcel.readInt(), parcel.readString());</div><div class="line">            <span class="keyword">return</span> book;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="keyword">public</span> Book[] newArray(<span class="keyword">int</span> size) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Book[size];</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Book.aidl</span></div><div class="line"><span class="keyword">package</span> com.rookieyang.aidltest;</div><div class="line"></div><div class="line"><span class="comment">// Declare any non-default types here with import statements</span></div><div class="line"></div><div class="line">parcelable Book;</div><div class="line"></div><div class="line"><span class="comment">// IBookManager.aidl</span></div><div class="line"><span class="keyword">package</span> com.rookieyang.aidltest;</div><div class="line"></div><div class="line"><span class="comment">//需要导入 Book 类</span></div><div class="line"><span class="keyword">import</span> com.rookieyang.aidltest.Book;</div><div class="line"></div><div class="line"><span class="comment">// Declare any non-default types here with import statements</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IBookManager</span> </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Demonstrates some basic types that you can use as parameters</div><div class="line">     * and return values in AIDL.</div><div class="line">     */</div><div class="line">    <span class="function">List&lt;Book&gt; <span class="title">getBookList</span><span class="params">()</span></span>;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addBook</span><span class="params">(in Book book)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在经过上述的过程之后，点击编译即可生成 Binder 文件，以 IBookManager.aidl 生成的 IBookManager.java 为例， IBookManager.java 中定义了一个继承自 IInterface 的 IBookManager 接口，在 IBookManager 内包含了继承自 Binder 实现了 IBookManager 接口的内部类 Stub 和 实现了 IBookManager 接口的 Stub 的内部类 Proxy。整体结构如下图所示：<br><img src="https://lh3.googleusercontent.com/-iDJyi8tBoBo/WXhxbPQ4ZqI/AAAAAAAAAX4/jxrb4SuSNIwRipZYxiKO9OuvJk9gKkwMACHMYCw/I/IBookManager" alt="IBookManager结构"><br>下面针对 IBookManager.java 进行具体的分析：</p>
<ul>
<li>IBookManager 接口，这个接口与在 IBookManager.aidl 中一致<ul>
<li>getBookList()</li>
<li>addBook(Book book)</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IBookManager</span> <span class="keyword">extends</span> <span class="title">IInterface</span> </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Demonstrates some basic types that you can use as parameters</div><div class="line">     * and return values in AIDL.</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> List&lt;Book&gt; <span class="title">getBookList</span><span class="params">()</span></span></div><div class="line">        <span class="keyword">throws</span> RemoteException;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addBook</span><span class="params">(Book book)</span> <span class="keyword">throws</span> RemoteException</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>Stub 类<ul>
<li>DESCRIPTOR <ul>
<li>Binder 的唯一标识，一般用当前 Binder 的类名表示</li>
</ul>
</li>
<li>TRANSACTION_getBookList 和 TRANSACTION_addBook<ul>
<li>两个id用于标识在transact过程中客户端所请求的到底是哪个方法</li>
</ul>
</li>
<li>asInterface(IBinder obj)<ul>
<li>用于将服务端的 Binder 对象转换成客户端所需的 AIDL 接口类型的对象，这种转换过程是区分进程的，如果客户端和服务端位于同一进程，那么此方法返回的就是服务端的 Stub 对象本身，否则返回的是系统封装后的 Stub.proxy 对象。</li>
</ul>
</li>
<li>asBinder<ul>
<li>此方法用于返回当前 Binder 对象。</li>
</ul>
</li>
<li>onTransact<ul>
<li>这个方法运行在服务端中的 Binder 线程池中，当客户端发起跨进程请求时，远程请求会通过系统底层封装后交由此方法来处理。</li>
<li>服务端通过 code 可以确定客户端所请求的目标方法是什么，接着从 data 中取出目标方法所需的参数（如果目标方法有参数的话），然后执行目标方法。当目标方法执行完毕后，就向 reply 中写入返回值（如果目标方法有返回值的话），onTransact 方法的执行过程就是这样的。</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Stub</span> <span class="keyword">extends</span> <span class="title">Binder</span> <span class="keyword">implements</span></span></div><div class="line">    <span class="title">IBookManager</span> &#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String DESCRIPTOR = <span class="string">"com.rookieyang.binderdemo.IBookManager"</span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Construct the stub at attach it to the interface.</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Stub</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.attachInterface(<span class="keyword">this</span>, DESCRIPTOR);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Cast an IBinder object into an IBookManager interface,</div><div class="line">     * generating a proxy if needed.</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IBookManager <span class="title">asInterface</span><span class="params">(IBinder obj)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> ((obj == <span class="keyword">null</span>)) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line">        IInterface iin = obj.queryLocalInterface(DESCRIPTOR);</div><div class="line">        <span class="keyword">if</span> (((iin != <span class="keyword">null</span>) &amp;&amp; (iin <span class="keyword">instanceof</span> IBookManager))) &#123;</div><div class="line">            <span class="keyword">return</span> ((IBookManager) iin);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> IBookManager.Stub.Proxy(obj);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> IBinder <span class="title">asBinder</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTransact</span><span class="params">(<span class="keyword">int</span> code, Parcel data, Parcel reply,</span></span></div><div class="line">        <span class="keyword">int</span> flags) <span class="keyword">throws</span> RemoteException &#123;</div><div class="line">        <span class="keyword">switch</span> (code) &#123;</div><div class="line">            <span class="keyword">case</span> INTERFACE_TRANSACTION: &#123;</div><div class="line">                reply.writeString(DESCRIPTOR);</div><div class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">case</span> TRANSACTION_getBookList: &#123;</div><div class="line">                data.enforceInterface(DESCRIPTOR);</div><div class="line">                List&lt;Book&gt; _result = <span class="keyword">this</span>.getBookList();</div><div class="line">                reply.writeNoException();</div><div class="line">                reply.writeTypedList(_result);</div><div class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">case</span> TRANSACTION_addBook: &#123;</div><div class="line">                data.enforceInterface(DESCRIPTOR);</div><div class="line">                Book _arg0;</div><div class="line">                <span class="keyword">if</span> ((<span class="number">0</span> != data.readInt())) &#123;</div><div class="line">                    <span class="comment">//反序列化</span></div><div class="line">                    _arg0 = Book.CREATOR.createFromParcel(data);</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    _arg0 = <span class="keyword">null</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">this</span>.addBook(_arg0);</div><div class="line">                reply.writeNoException();</div><div class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.onTransact(code, data, reply, flags);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TRANSACTION_getBookList = (IBinder.FIRST_CALL_TRANSACTION + <span class="number">0</span>);</div><div class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TRANSACTION_addBook = (IBinder.FIRST_CALL_TRANSACTION + <span class="number">1</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>Proxy 类<ul>
<li>getBookList<ul>
<li>这个方法运行在客户端，当客户端远程调用此方法时，它的内部实现是这样的：首先创建该方法所需要的输入型 Parcel 对象 _data 、输出型 Parcel 对象 _reply 和返回值对象 List；然后把该方法的参数信息写入 _data 中（如果有参数的话）；接着调用 transact 方法来发起 RPC（远程过程调用）请求，同时当前线程挂起；然后服务端的 onTransact 方法会被调用，直到 RPC 过程返回后，当前线程继续执行，并从 _reply 中取出 RPC 过程的返回结果；最后返回 _reply 中的数据。</li>
</ul>
</li>
<li>addBook<ul>
<li>这个方法运行在客户端，它的执行过程和 getBookList 是一样的，addBook 没有返回值，所以它不需要从 _reply 中取出返回值。</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Proxy</span> <span class="keyword">implements</span> <span class="title">IBookManager</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> IBinder mRemote;</div><div class="line"></div><div class="line">    Proxy(IBinder remote) &#123;</div><div class="line">        mRemote = remote;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> IBinder <span class="title">asBinder</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> mRemote;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getInterfaceDescriptor</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> DESCRIPTOR;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Demonstrates some basic types that you can use as parameters</div><div class="line">     * and return values in AIDL.</div><div class="line">     */</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> List&lt;Book&gt; <span class="title">getBookList</span><span class="params">()</span></span></div><div class="line">        <span class="keyword">throws</span> RemoteException &#123;</div><div class="line">        Parcel _data = Parcel.obtain();</div><div class="line">        Parcel _reply = Parcel.obtain();</div><div class="line">        java.util.List&lt;Book&gt; _result;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            _data.writeInterfaceToken(DESCRIPTOR);</div><div class="line">            mRemote.transact(Stub.TRANSACTION_getBookList, _data, _reply, <span class="number">0</span>);</div><div class="line">            _reply.readException();</div><div class="line">            _result = _reply.createTypedArrayList(Book.CREATOR);</div><div class="line">        &#125; <span class="keyword">finally</span> &#123;</div><div class="line">            _reply.recycle();</div><div class="line">            _data.recycle();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> _result;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addBook</span><span class="params">(Book book)</span></span></div><div class="line">        <span class="keyword">throws</span> RemoteException &#123;</div><div class="line">        Parcel _data = Parcel.obtain();</div><div class="line">        Parcel _reply = Parcel.obtain();</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            _data.writeInterfaceToken(DESCRIPTOR);</div><div class="line">            <span class="keyword">if</span> ((book != <span class="keyword">null</span>)) &#123;</div><div class="line">                _data.writeInt(<span class="number">1</span>);</div><div class="line">                book.writeToParcel(_data, <span class="number">0</span>);</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                _data.writeInt(<span class="number">0</span>);</div><div class="line">            &#125;</div><div class="line">            mRemote.transact(Stub.TRANSACTION_addBook, _data, _reply, <span class="number">0</span>);</div><div class="line">            _reply.readException();</div><div class="line">        &#125; <span class="keyword">finally</span> &#123;</div><div class="line">            _reply.recycle();</div><div class="line">            _data.recycle();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="Binder-的工作机制"><a href="#Binder-的工作机制" class="headerlink" title="Binder 的工作机制"></a>Binder 的工作机制</h4><p><img src="https://lh3.googleusercontent.com/-JrQschTl184/WXhxbX_2NHI/AAAAAAAAAX8/RJkMpmChc1s0phMV2cwx9cJ_cqJw_IF7wCHMYCw/I/Binder" alt="Binder 工作机制"></p>
<blockquote>
<p>以上述为例，客户端调用 getBookList 方法时，在方法内部定义了 Parcel 对象，然后通过调用 transact 发起远程请求，服务器端接收到后调用 onTransact 方法，根据传递过来的 Code 进行相应的处理，将结果写入 Parcel 对象当中，处理完成之后在 客户端的 transact 将结果取出来并返回。</p>
</blockquote>
<h4 id="Binder-使用的一些注意点"><a href="#Binder-使用的一些注意点" class="headerlink" title="Binder 使用的一些注意点"></a>Binder 使用的一些注意点</h4><p>Binder 一般和 Service 配合使用，作为 bindService 执行时的返回，最后在 ServiceConnect 当中获取返回的 Binder：<br>    <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> ServiceConnection serviceConnection = <span class="keyword">new</span> ServiceConnection() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceConnected</span><span class="params">(ComponentName componentName, IBinder iBinder)</span> </span>&#123;</div><div class="line">        mCalcAidl = ICalcAIDL.Stub.asInterface(iBinder);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceDisconnected</span><span class="params">(ComponentName componentName)</span> </span>&#123;</div><div class="line">        mCalcAidl = <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<blockquote>
<p>不同进程时返回的 iBinder 是 ICalcAIDL.Stub.Proxy，而相同进程中则是 ICalcAIDL.Stub。是返回 Stub 还是返回 Proxy 在底层已经做了判断，不是在 onServiceConnected 方法中进行的判断</p>
</blockquote>
<p>在服务中使用时，定义的 AIDL 文件包名必须相同，不然将无法找到对应的 AIDL，从而导致无法进行通信，并且使用时需要通过 ICalcAIDL.Stub 实现在 AIDL 中定义的接口，从而为客户端提供服务。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> ICalcAIDL.Stub mBinder = <span class="keyword">new</span> Stub() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> <span class="keyword">throws</span> RemoteException </span>&#123;</div><div class="line">        <span class="keyword">return</span> x + y;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">min</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> <span class="keyword">throws</span> RemoteException </span>&#123;</div><div class="line">        <span class="keyword">return</span> x - y;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><blockquote>
<p>粗略的说，Client 通过 Binder 当中的 Proxy 进行了 IPC 的请求，而 Server 则通过 Stub 当中的 onTransact 对跨进程请求进行处理，之所以能进行跨进程请求的原因在于底层能够通过可序列化的数据，上述的 Book 类实现了 Parcelable 接口，而基本类型是被看作可序列化的，所以这些数据在底层能够进行传输，自然就可以通过 Binder 完成 IPC。</p>
</blockquote>
<hr>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><ol>
<li>Android 开发艺术探索-IPC 机制</li>
<li><a href="http://blog.csdn.net/lmj623565791/article/details/38461079/" target="_blank" rel="external">Android aidl Binder框架浅析</a></li>
<li><a href="http://weishu.me/2016/01/12/binder-index-for-newer/" target="_blank" rel="external">Binder学习指南</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;什么是-Binder&quot;&gt;&lt;a href=&quot;#什么是-Binder&quot; class=&quot;headerlink&quot; title=&quot;什么是 Binder&quot;&gt;&lt;/a&gt;什么是 Binder&lt;/h4&gt;&lt;p&gt;Binder 是 Android 中一种跨进程通信（IPC）方式。&lt;/p&gt;
&lt;h4 id=&quot;Binder-的原理&quot;&gt;&lt;a href=&quot;#Binder-的原理&quot; class=&quot;headerlink&quot; title=&quot;Binder 的原理&quot;&gt;&lt;/a&gt;Binder 的原理&lt;/h4&gt;&lt;p&gt;Binder通信采用C/S架构，从组件视角来说，包含 Client、Server、ServiceManager 以及 binder 驱动，其中 ServiceManager 用于管理系统中的各种服务。架构图如下所示：&lt;br&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/-r87ZtMW666o/WXhxa-i0nJI/AAAAAAAAAX0/tPeJ1cnEgXsMc7-ogBqi15BGw5UjY60gACHMYCw/I/Binder&quot; alt=&quot;Binder原理&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;此处的 Service Manager 是指 Native 层的 ServiceManager（C++）
    
    </summary>
    
      <category term="Android 学习" scheme="http://www.rookieyang.cn/categories/Android-%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Android" scheme="http://www.rookieyang.cn/tags/Android/"/>
    
      <category term="IPC" scheme="http://www.rookieyang.cn/tags/IPC/"/>
    
  </entry>
  
  <entry>
    <title>Service总结</title>
    <link href="http://www.rookieyang.cn/2017/08/27/Service%E6%80%BB%E7%BB%93/"/>
    <id>http://www.rookieyang.cn/2017/08/27/Service总结/</id>
    <published>2017-08-27T10:04:55.000Z</published>
    <updated>2017-08-27T16:40:38.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Service-的含义及作用"><a href="#Service-的含义及作用" class="headerlink" title="Service 的含义及作用"></a>Service 的含义及作用</h4><p>Service 是一个可以在后台执行长时间运行操作而不需要提供用户界面的应用组件，也就是说 Service 是为了去处理那些不需要和用户交互但又耗时的操作。但是如果 Service 只是为了执行那些耗时的操作的话，其实用线程也可以达到同样的目的，之所以需要单独用 Service 来进行实现的原因在于 Service 相较之线程而言优先级比较高，如果系统不是极端不够用，一般而言是不会杀死 Service，但是线程可能存在被系统回收的可能性，所以 Service 的可靠性要比线程高。<a id="more"></a><br>另外关于 Service，官网上还有如下的提示：</p>
<blockquote>
<p>服务在其托管进程的主线程中运行，它既不创建自己的线程，也不在单独的进程中运行（除非另行指定）。 这意味着，如果服务将执行任何 CPU 密集型工作或阻止性操作（例如 MP3 播放或联网），则应在服务内创建新线程来完成这项工作。通过使用单独的线程，可以降低发生“应用无响应”(ANR) 错误的风险，而应用的主线程仍可继续专注于运行用户与 Activity 之间的交互</p>
</blockquote>
<h4 id="Service-的生命周期"><a href="#Service-的生命周期" class="headerlink" title="Service 的生命周期"></a>Service 的生命周期</h4><p>Service 的生命周期主要和服务的使用方式有关，使用服务主要分为启动和绑定两种方式，其生命周期如下图所示：<br><img src="media/https://lh3.googleusercontent.com/-8_ilqWBW5y8/WaLgz_KuoeI/AAAAAAAAAbc/BYeSBXsoVssQchMiul3janGZGY4XEIMrwCHMYCw/I/15038466780030.jpg" alt=""></p>
<h4 id="Service-的基本使用"><a href="#Service-的基本使用" class="headerlink" title="Service 的基本使用"></a>Service 的基本使用</h4><ol>
<li>创建服务<br> 系统提供了一个 Service 抽象类，所以我们自己实现一个继承自 Service 的类，然后在 AndroidManifest.xml 注册即可。</li>
<li>运行服务<br> 运行服务主要方法有两种，一种是调用<br>startService()，第二种则是 bindService()。实际上这两个方法可以同时调用。</li>
<li>服务中处理事件<br> startService 启动服务，事件的处理一般在服务的 onStartCommand 方法进行的，bindService 绑定服务之后，将会在 ServiceConnection 的 onServiceConnected 中返回一个 Binder 对象，利用返回的 Binder 对象可以调用相关的事件处理方法。</li>
<li>停止服务<br> 服务的运行条件是服务被绑定或者被启动，所以想让服务不运行则需要破坏这两个条件，可以通过调用 stopService 和 unbindService 实现。</li>
</ol>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;Service-的含义及作用&quot;&gt;&lt;a href=&quot;#Service-的含义及作用&quot; class=&quot;headerlink&quot; title=&quot;Service 的含义及作用&quot;&gt;&lt;/a&gt;Service 的含义及作用&lt;/h4&gt;&lt;p&gt;Service 是一个可以在后台执行长时间运行操作而不需要提供用户界面的应用组件，也就是说 Service 是为了去处理那些不需要和用户交互但又耗时的操作。但是如果 Service 只是为了执行那些耗时的操作的话，其实用线程也可以达到同样的目的，之所以需要单独用 Service 来进行实现的原因在于 Service 相较之线程而言优先级比较高，如果系统不是极端不够用，一般而言是不会杀死 Service，但是线程可能存在被系统回收的可能性，所以 Service 的可靠性要比线程高。
    
    </summary>
    
      <category term="Android 学习" scheme="http://www.rookieyang.cn/categories/Android-%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Android" scheme="http://www.rookieyang.cn/tags/Android/"/>
    
      <category term="四大组件" scheme="http://www.rookieyang.cn/tags/%E5%9B%9B%E5%A4%A7%E7%BB%84%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>BroastCasts 总结</title>
    <link href="http://www.rookieyang.cn/2017/08/26/Android%E4%B9%8BBroastCastReceiver/"/>
    <id>http://www.rookieyang.cn/2017/08/26/Android之BroastCastReceiver/</id>
    <published>2017-08-26T15:06:37.000Z</published>
    <updated>2017-08-26T16:48:23.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="BroadCasts-定义及其作用"><a href="#BroadCasts-定义及其作用" class="headerlink" title="BroadCasts 定义及其作用"></a>BroadCasts 定义及其作用</h4><p>BroadCasts 是一种广播机制，类似于发布-订阅这种机制，当发生一些事件的时候，系统或程序就会发送（发布）一些相关的广播，而注册（订阅）了这些广播的程序就会通过广播接收器去响应这些广播。<br><a id="more"></a></p>
<h4 id="BroadCasts-的分类"><a href="#BroadCasts-的分类" class="headerlink" title="BroadCasts 的分类"></a>BroadCasts 的分类</h4><ol>
<li>按作用范围来分：<ul>
<li>全局广播</li>
<li>本地广播<br>  本地主要为了解决全局广播的安全性问题，由于全局广播是面向系统中所有应用的，所以当携带一些关键数据时可能会导致数据的泄漏。</li>
</ul>
</li>
<li>按接收顺序来分：<ul>
<li>标准广播<br>  标准广播在发出之后，所有相关的广播接收器几乎能够一次性接收到该条广播。</li>
<li>有序广播<br>  有序广播发出后，同一时间只有一个广播接收器能够接收到这条广播消息，只有当该广播接收器当中的处理逻辑处理完成之后，广播才能向下传递，并且优先级高的广播能够截断正在传递的广播。如果多个应用程序设置的优先级别相同，则谁先注册的广播，谁就可以优先接收到广播。</li>
</ul>
</li>
</ol>
<h4 id="BroadCasts-的使用"><a href="#BroadCasts-的使用" class="headerlink" title="BroadCasts 的使用"></a>BroadCasts 的使用</h4><p>广播机制的使用方法大体按照如下步骤：</p>
<ol>
<li><p>创建广播接收器<br> Android 系统提供了一个 BroadCastReciver 的抽象类，所以需要创建自己的广播接收器，然后重写当中的 onReceive 方法，在当中编写事件的处理逻辑。</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ForceReceiver</span> <span class="keyword">extends</span> <span class="title">BroadcastReceiver</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceive</span><span class="params">(<span class="keyword">final</span> Context context, Intent intent)</span> </span>&#123;</div><div class="line">        AlertDialog.Builder builder = <span class="keyword">new</span> AlertDialog.Builder(context);</div><div class="line">        builder.setTitle(<span class="string">"提示"</span>);</div><div class="line">        builder.setMessage(<span class="string">"已经被退出"</span>);</div><div class="line">        builder.setCancelable(<span class="keyword">false</span>);</div><div class="line">        builder.setPositiveButton(<span class="string">"OK"</span>, <span class="keyword">new</span> DialogInterface.OnClickListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(DialogInterface dialogInterface, <span class="keyword">int</span> i)</span> </span>&#123;</div><div class="line">                ActivityCollector.finishActivities();</div><div class="line">                Intent intent = <span class="keyword">new</span> Intent(context, LoginActivity.class);</div><div class="line">                context.startActivity(intent);</div><div class="line">            &#125;</div><div class="line">        &#125;).show();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>注册广播<br> 为了进行广播的接收还需要对需要接收的广播进行注册，注册方式可以分为两种：<br> 第一种是动态注册，如果是全局广播则在 Activity 中直接调用 registerReceiver 方法即可，该方法主要接收两个参数，一个是 BroadCastReceiver，第二个则是 IntentFilter。如果是本地广播则需要借助系统提供的 LocalBroadCastManager 去进行注册，方法名与注册全局广播的方法名一致。<br> 全局广播：</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">IntentFilter intentFilter = <span class="keyword">new</span> IntentFilter(<span class="string">"com.rookieyang.forcelogin"</span>);</div><div class="line">forceReceiver = <span class="keyword">new</span> ForceReceiver();</div><div class="line">registerReceiver(forceReceiver, intentFilter);</div></pre></td></tr></table></figure>
<p> 本地广播：</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">IntentFilter intentFilter = <span class="keyword">new</span> IntentFilter(<span class="string">"com.rookieyang.forcelogin"</span>);</div><div class="line">forceReceiver = <span class="keyword">new</span> ForceReceiver();</div><div class="line">LocalBroadcastManager localBroadcastManager = LocalBroadcastManager.getInstance(<span class="keyword">this</span>);</div><div class="line">localBroadcastManager.registerReceiver(forceReceiver, intentFilter);</div></pre></td></tr></table></figure>
<p> 第二种是静态注册，静态注册可以实现在程序未启动的情况下接收到广播，静态注册的广播是全局广播。</p>
 <figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;uses-permission android:name="android.permission.RECEIVE_BOOT_COMPLETED"/&gt;</div><div class="line">&lt;receiver</div><div class="line">    android:name=".BootCompleteReceiver"</div><div class="line">    android:enabled="true"</div><div class="line">    android:exported="true"&gt;</div><div class="line">    &lt;intent-filter&gt;</div><div class="line">        &lt;action android:name="android.intent.action.BOOT_COMPLETED" /&gt;</div><div class="line">    &lt;/intent-filter&gt;</div><div class="line">&lt;/receiver&gt;</div></pre></td></tr></table></figure>
<blockquote>
<p>监听系统的开机广播是需要添加权限的，动态注册相比较于静态注册而言更为灵活，但是静态注册能够实现在应用未启动的情况下接收广播。而且动态注册的广播最后必须要取消注册。</p>
</blockquote>
</li>
<li><p>发送广播<br> 发送广播需要主要通过 Intent 传递信息，如果是是系统广播则不需要我们去编码去发送广播，如果是自定义的广播，发送标准广播则调用 sendBroadCast 方法，发送有序广播则调用 sendOrderedBroadcast 方法。如果是本地广播则和上文一致需要借助 LocalBroadCastManager 进行发送，本地广播没有有序广播。</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Intent intent = <span class="keyword">new</span> Intent(<span class="string">"com.rookieyang.forcelogin"</span>);</div><div class="line">sendBroadcast(intent);</div><div class="line"><span class="comment">//sendOrderedBroadcast(intent);</span></div><div class="line">localBroadcastManager.sendBroadcast();</div></pre></td></tr></table></figure>
</li>
<li><p>接收处理<br> 接收处理在广播接收器的 onReceive 方法中进行，创建广播接收器中已经说明，在此不再赘述。</p>
</li>
<li>取消注册<br> 静态注册的不需要我们编码去取消注册，对于动态注册的则需要编码去取消注册，如果是全局广播则调用 unregisterReceiver 方法即可，如果是本地广播则调用 LocalBroadCastManager 对象的该方法即可。 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">unregisterReceiver(forceReceiver);</div><div class="line">localBroadcastManager.unregisterReceiver(forceReceiver);</div></pre></td></tr></table></figure>
</li>
</ol>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;BroadCasts-定义及其作用&quot;&gt;&lt;a href=&quot;#BroadCasts-定义及其作用&quot; class=&quot;headerlink&quot; title=&quot;BroadCasts 定义及其作用&quot;&gt;&lt;/a&gt;BroadCasts 定义及其作用&lt;/h4&gt;&lt;p&gt;BroadCasts 是一种广播机制，类似于发布-订阅这种机制，当发生一些事件的时候，系统或程序就会发送（发布）一些相关的广播，而注册（订阅）了这些广播的程序就会通过广播接收器去响应这些广播。&lt;br&gt;
    
    </summary>
    
      <category term="Android 学习" scheme="http://www.rookieyang.cn/categories/Android-%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Android" scheme="http://www.rookieyang.cn/tags/Android/"/>
    
      <category term="四大组件" scheme="http://www.rookieyang.cn/tags/%E5%9B%9B%E5%A4%A7%E7%BB%84%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu 14.04下AVD的创建以及闪退问题</title>
    <link href="http://www.rookieyang.cn/2017/08/24/14-04%E4%B8%8BAVD%E7%9A%84%E5%88%9B%E5%BB%BA%E4%BB%A5%E5%8F%8A%E9%97%AA%E9%80%80%E9%97%AE%E9%A2%98/"/>
    <id>http://www.rookieyang.cn/2017/08/24/14-04下AVD的创建以及闪退问题/</id>
    <published>2017-08-24T15:15:12.000Z</published>
    <updated>2017-08-25T08:02:55.000Z</updated>
    
    <content type="html"><![CDATA[<p>在 Ubuntu 14.04 下创建 Android 虚拟机时可能会出现下列错误：</p>
<blockquote>
<p>An error occurred while creating the AVD. See idea.log for details</p>
</blockquote>
<p>在网上查找之后很多人建议使用 sudo apt-get install lib32stdc++6 这条命令，但是实际上采用这条命令去安装会出现依赖冲突的问题，所以需要借助 sudo aptitude -f install lib32stdc++6 去解决依赖问题，这条语句使用一次可能并不能解决问题，实际当中我运行了三次才解决了依赖的冲突的问题，每一次运行的时候依次选择 no-&gt;yes-&gt;yes。具体要运行几次，必须看 lib32stdc++6 库是否安装成功。<a id="more"></a></p>
<p>在经过上述的操作之后，虽然 AVD 可能能成功创建，但实际可能还是无法启动，无法启动的原因可能是需要安装 Intel’s KVM，具体步骤可以参考<a href="https://github.com/uw-it-aca/spacescout-android/wiki/1.-Setting-Up-Android-Studio-on-Ubuntu#install-intels-kvm-for-better-avd-performance" target="_blank" rel="external">Setting Up Android Studio on Ubuntu</a>当中的 Install Intel’s KVM for Better AVD Performance 部分，在这部分当中只需做到第七步即可，由于我使用的 AndroidStudio 2.3，无法找到第八步所说的选项。</p>
<p>在安装好所需要的一切库之后，接下来的步骤如下：</p>
<ol>
<li>创建虚拟机，记下虚拟机名称</li>
<li>进入到 Sdk 路径下的 tools 目录，执行以下指令<blockquote>
<p>sudo chmod +x emulator<br>./emulator -avd 虚拟机名称 -qemu -m 2047 -enable-kvm</p>
</blockquote>
</li>
</ol>
<p>在经过上述的两个步骤之后基本上是能够成功启动了的。</p>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在 Ubuntu 14.04 下创建 Android 虚拟机时可能会出现下列错误：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;An error occurred while creating the AVD. See idea.log for details&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在网上查找之后很多人建议使用 sudo apt-get install lib32stdc++6 这条命令，但是实际上采用这条命令去安装会出现依赖冲突的问题，所以需要借助 sudo aptitude -f install lib32stdc++6 去解决依赖问题，这条语句使用一次可能并不能解决问题，实际当中我运行了三次才解决了依赖的冲突的问题，每一次运行的时候依次选择 no-&amp;gt;yes-&amp;gt;yes。具体要运行几次，必须看 lib32stdc++6 库是否安装成功。
    
    </summary>
    
      <category term="Android 学习" scheme="http://www.rookieyang.cn/categories/Android-%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Android" scheme="http://www.rookieyang.cn/tags/Android/"/>
    
      <category term="Linux" scheme="http://www.rookieyang.cn/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Java 线程简述</title>
    <link href="http://www.rookieyang.cn/2017/08/22/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%80%BB%E7%BB%93/"/>
    <id>http://www.rookieyang.cn/2017/08/22/Java多线程总结/</id>
    <published>2017-08-22T00:41:38.000Z</published>
    <updated>2017-08-23T16:19:35.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="线程的作用"><a href="#线程的作用" class="headerlink" title="线程的作用"></a>线程的作用</h4><blockquote>
<p>线程（英语：Thread）是操作系统能够进行运算调度的最小单位。它被包含在进程之中，是进程中的实际运作单位。一条线程指的是进程中一个单一顺序的控制流，一个进程中可以并发多个线程，每条线程并行执行不同的任务。</p>
</blockquote>
<p>简而言之，线程的存在是为了实现程序的并发操作，提高执行效率。<br><a id="more"></a></p>
<h4 id="线程的生命周期"><a href="#线程的生命周期" class="headerlink" title="线程的生命周期"></a>线程的生命周期</h4><p><img src="https://lh3.googleusercontent.com/-3VjAes2Q55I/WZ2bm0Md6_I/AAAAAAAAAa8/aJ6l7WMWz7YoZ3CyWI2EqE6NdsgsksA0wCHMYCw/I/%255BUNSET%255D" alt="线程状态"><br>线程的主要生命周期如上图所示，主要分为五个状态：</p>
<ol>
<li>新建态（New）：Java 中使用 new 关键字创建线程之后，这时线程即处于新建态。</li>
<li>就绪态（Runnable）：在线程调用 start() 方法之后，线程即处于就绪态。</li>
<li>运行态（Running）：当就绪态的线程获得 CPU 并且开始执行 run() 方法之后，线程就会处于运行状态。</li>
<li>阻塞态（Blocked）：在处于运行态的线程调用了 sleep() 或 wait() 又或者是调用了一个阻塞式的 IO 方法之后，线程将会处于阻塞状态。</li>
<li>死亡态（Dead）：在线程中的 run() 方法执行完毕、线程抛出异常、调用线程的 stop() 这几种情形下线程将会进入死亡态。</li>
</ol>
<h4 id="线程的实现方法"><a href="#线程的实现方法" class="headerlink" title="线程的实现方法"></a>线程的实现方法</h4><p>Java 中线程的实现主要是通过 Thread 类和 Runnable 接口。</p>
<ol>
<li><p>通过 Thread 类实现：</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Thread thread = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">/** do some things **/</span></div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
</li>
<li><p>通过 Runnable 接口实现：</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">/** do some things **/</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">MyThread myThread = <span class="keyword">new</span> MyThread();</div><div class="line">Thread thread = <span class="keyword">new</span> Thread(myThread);</div></pre></td></tr></table></figure>
</li>
</ol>
<blockquote>
<p>相对而言第二种方式更为合理一些，第二种方式创建的线程类只实现了 Runnable 接口，还可以再继承其它的父类。</p>
</blockquote>
<hr>
<h4 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h4><p><a href="http://blog.csdn.net/ns_code/article/details/17161237" target="_blank" rel="external">【Java并发编程】之六：Runnable和Thread实现多线程的区别（含代码）</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;线程的作用&quot;&gt;&lt;a href=&quot;#线程的作用&quot; class=&quot;headerlink&quot; title=&quot;线程的作用&quot;&gt;&lt;/a&gt;线程的作用&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;线程（英语：Thread）是操作系统能够进行运算调度的最小单位。它被包含在进程之中，是进程中的实际运作单位。一条线程指的是进程中一个单一顺序的控制流，一个进程中可以并发多个线程，每条线程并行执行不同的任务。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;简而言之，线程的存在是为了实现程序的并发操作，提高执行效率。&lt;br&gt;
    
    </summary>
    
      <category term="Java 学习" scheme="http://www.rookieyang.cn/categories/Java-%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Java" scheme="http://www.rookieyang.cn/tags/Java/"/>
    
      <category term="Thread" scheme="http://www.rookieyang.cn/tags/Thread/"/>
    
  </entry>
  
  <entry>
    <title>LayoutInflater 总结</title>
    <link href="http://www.rookieyang.cn/2017/07/22/LayoutInflater%E6%80%BB%E7%BB%93/"/>
    <id>http://www.rookieyang.cn/2017/07/22/LayoutInflater总结/</id>
    <published>2017-07-22T15:01:23.000Z</published>
    <updated>2017-08-21T15:53:29.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="LayoutInflater-的获取"><a href="#LayoutInflater-的获取" class="headerlink" title="LayoutInflater 的获取"></a>LayoutInflater 的获取</h4><p>获取 LayoutInflater 的方式一般有三种：</p>
<ol>
<li><code>getLayoutInflater()</code></li>
<li><code>LayoutInflater.from(Context context)</code></li>
<li><code>context.getSystemService(Context.LAYOUT_INFLATER_SERVICE)</code></li>
</ol>
<p>这三种获取方式本质上都是一样的</p>
<ul>
<li>getLayoutInflater() 通过 getWindow().getLayoutInflater() 进行获取，getWindow() 获取的是 PhoneWindow，然后 PhoneWindow 通过 mLayoutInflater = LayoutInflater.from(context) 获取 LayoutInflater。</li>
<li><p>LayoutInflater.from(Context context) 内部通过以下代码获取 LayoutInflater。<a id="more"></a></p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> LayoutInflater <span class="title">from</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">    LayoutInflater LayoutInflater =</div><div class="line">            (LayoutInflater) context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);</div><div class="line">    <span class="keyword">if</span> (LayoutInflater == <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> AssertionError(<span class="string">"LayoutInflater not found."</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> LayoutInflater;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p><strong>结论：所以这三种方式最终都调用了 Context.getSystemService()</strong></p>
<h4 id="LayoutInflater-的-inflater-方法"><a href="#LayoutInflater-的-inflater-方法" class="headerlink" title="LayoutInflater 的 inflater 方法"></a>LayoutInflater 的 inflater 方法</h4><p>inflater 作为 LayoutInflater 中最常用的方法，用于从 xml 的布局文件得到一个 View 对象，加载到 Activity 用于动态创建布局。inflater 总共重载了 4 种调用方式：</p>
<ol>
<li><code>public View inflate(@LayoutRes int resource, @Nullable ViewGroup root)</code></li>
<li><code>public View inflate(@LayoutRes int resource, @Nullable ViewGroup root, boolean attachToRoot)</code></li>
<li><code>public View inflate(XmlPullParser parser, @Nullable ViewGroup root)</code></li>
<li><p><code>public View inflate(XmlPullParser parser, @Nullable ViewGroup root, boolean attachToRoot)</code></p>
<ul>
<li><code>resource</code> 指的是布局文件的 ID</li>
<li><code>root</code> 填充的根视图</li>
<li><code>attachToRoot</code> 决定是否将载入的视图附加到根视图上，如果为 false 则仅用于为 XML 中的根视图创建正确的 LayoutParams 的子类</li>
<li>前三个 inflater 方法最终都会调用第四个 inflater 方法，采用了 pull 解析</li>
<li>避免将 null 作为 ViewGroup 传入</li>
<li>当不需要将返回的 View 添加入 ViewGroup 时应该设置attachToRoot 为 false</li>
<li>避免在 View 已经被添加入 ViewGroup 时将 attachToRoot 设置为 True</li>
<li>自定义 View 时非常适合将 attachToRoot 设置为 True</li>
</ul>
</li>
</ol>
<h4 id="LayoutInflater-基本使用"><a href="#LayoutInflater-基本使用" class="headerlink" title="LayoutInflater 基本使用"></a>LayoutInflater 基本使用</h4><p>由于 LayoutInflater 主要用于布局填充，所以主要涉及到的是 inflater 方法，inflater 返回了一个 View，其调用方式是：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">LayoutInflater inflater = (LayoutInflater) context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);</div><div class="line">View view = inflater.inflate(R.layout.first_fragment, container, <span class="keyword">false</span>);</div></pre></td></tr></table></figure>
<hr>
<h4 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h4><ol>
<li><a href="http://blog.chengdazhi.com/index.php/110" target="_blank" rel="external">深入理解 LayoutInflater.inflate()</a></li>
<li><a href="http://blog.csdn.net/guolin_blog/article/details/12921889/" target="_blank" rel="external">Android LayoutInflater 原理分析，带你一步步深入了解 View (一)</a></li>
<li><a href="http://www.2cto.com/kf/201407/313054.html" target="_blank" rel="external">LayoutInflater——80%的Android程序员对它并不了解甚至错误使用</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;LayoutInflater-的获取&quot;&gt;&lt;a href=&quot;#LayoutInflater-的获取&quot; class=&quot;headerlink&quot; title=&quot;LayoutInflater 的获取&quot;&gt;&lt;/a&gt;LayoutInflater 的获取&lt;/h4&gt;&lt;p&gt;获取 LayoutInflater 的方式一般有三种：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;getLayoutInflater()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;LayoutInflater.from(Context context)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;context.getSystemService(Context.LAYOUT_INFLATER_SERVICE)&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这三种获取方式本质上都是一样的&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;getLayoutInflater() 通过 getWindow().getLayoutInflater() 进行获取，getWindow() 获取的是 PhoneWindow，然后 PhoneWindow 通过 mLayoutInflater = LayoutInflater.from(context) 获取 LayoutInflater。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;LayoutInflater.from(Context context) 内部通过以下代码获取 LayoutInflater。
    
    </summary>
    
      <category term="Android 学习" scheme="http://www.rookieyang.cn/categories/Android-%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Android" scheme="http://www.rookieyang.cn/tags/Android/"/>
    
      <category term="LayoutInflater" scheme="http://www.rookieyang.cn/tags/LayoutInflater/"/>
    
  </entry>
  
  <entry>
    <title>AsyncTask 总结</title>
    <link href="http://www.rookieyang.cn/2017/07/11/AsyncTask%E6%80%BB%E7%BB%93/"/>
    <id>http://www.rookieyang.cn/2017/07/11/AsyncTask总结/</id>
    <published>2017-07-11T04:49:39.000Z</published>
    <updated>2017-07-15T13:07:03.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="AsyncTask-的作用"><a href="#AsyncTask-的作用" class="headerlink" title="AsyncTask 的作用"></a>AsyncTask 的作用</h4><blockquote>
<p>AsyncTask 允许对用户界面执行异步操作。 它会先阻塞工作线程中的操作，然后在 UI 线程中发布结果，而无需您亲自处理线程和/或处理程序。</p>
</blockquote>
<p>AsyncTask 基于异步消息处理机制进行实现，通过 AsyncTask 能够很简单的从子线程切换至主线程。<br><a id="more"></a></p>
<h4 id="AsyncTask-的基本使用"><a href="#AsyncTask-的基本使用" class="headerlink" title="AsyncTask 的基本使用"></a>AsyncTask 的基本使用</h4><ol>
<li><p>由于 AsyncTask 是抽象类，所以首先需要创建一个继承它的子类。</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAsyncTask</span> <span class="keyword">extends</span> <span class="title">AsyncTask</span>&lt;<span class="title">Void</span>, <span class="title">Integer</span>, <span class="title">Boolean</span>&gt;</span></div></pre></td></tr></table></figure>
<p> 其中可以为 AsyncTask 指定三个泛型参数</p>
<ul>
<li>Params：执行 Task 时传递的参数，在后台任务中使用，这里指定为 Void</li>
<li>Progress：指定进度单位，这里指定为 Integer</li>
<li>Result：执行完任务后返回的类型，这里指定为 Boolean</li>
</ul>
</li>
<li><p>重写 AsyncTask 的一些方法，主要是下面四个：</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onPreExecute</span><span class="params">()</span> </span>&#123;</div><div class="line">    progressDialog.show();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> Boolean <span class="title">doInBackground</span><span class="params">(Void... voids)</span> </span>&#123;</div><div class="line">    <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</div><div class="line">        <span class="keyword">int</span> percent = doDownload();</div><div class="line">        publishProgress(percent);</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            Thread.sleep(<span class="number">1000</span>);</div><div class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (percent &gt;= <span class="number">100</span>) &#123;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onProgressUpdate</span><span class="params">(Integer... values)</span> </span>&#123;</div><div class="line">    progressDialog.setMessage(<span class="string">"Downloaded "</span> + values[<span class="number">0</span>] + <span class="string">"%"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onPostExecute</span><span class="params">(Boolean result)</span> </span>&#123;</div><div class="line">    progressDialog.dismiss();</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (result) &#123;</div><div class="line">        Toast.makeText(MainActivity.getCurrentContext(),</div><div class="line">            <span class="string">"Download Succeeded"</span>, Toast.LENGTH_LONG).show();</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        Toast.makeText(MainActivity.getCurrentContext(),</div><div class="line">            <span class="string">"Download Failed"</span>, Toast.LENGTH_LONG).show();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>onPreExecute()：任务执行之前在 UI 线程当中进行调用，通常用于进行一些界面的初始化工作，譬如显示一个进度条。</li>
<li>doInBackground(Params…)：必须实现的方法，在 onPreExecute() 方法执行完毕之后运行在子线程上，通常用于执行耗时任务，Params 参数将会传递至该方法。执行完任务之后将会通过 return 语句返回执行结果，如果 Result 设定为 Void 则可以不进行返回。同时在该方法中可以通过 publishProgress(Progress…) 方法对任务执行进度进行反馈。</li>
<li>onProgressUpdate(Progress…)：publishProgress(Progress…) 被调用之后执行在 UI 线程当中，在该方法中可以展示任务执行的进度及对进度进行更新，譬如可以对进度条进行动画处理。</li>
<li>onPostExecute(Result)：任务执行完之后的返回结果将会传递至该方法，可以利用返回的结果进行一些 UI 操作，譬如提醒任务执行的结果，该方法运行在 UI 线程中。</li>
</ul>
</li>
</ol>
<h4 id="AsyncTask-源码浅解"><a href="#AsyncTask-源码浅解" class="headerlink" title="AsyncTask 源码浅解"></a>AsyncTask 源码浅解</h4><h5 id="执行过程图"><a href="#执行过程图" class="headerlink" title="执行过程图"></a>执行过程图</h5><p><img src="https://lh3.googleusercontent.com/-MmpRFoM9LfE/WWR_EqDwUYI/AAAAAAAAAW4/IY7xCH9t700PzA5Mo7eOxRVrtme6-RifACHMYCw/I/AsyncTask.png" alt="AsyncTask"></p>
<h5 id="执行过程"><a href="#执行过程" class="headerlink" title="执行过程"></a>执行过程</h5><ol>
<li>首先通过调用 execute(Params… params) 方法执行任务<br> 内部执行了 executeOnExecutor(sDefaultExecutor, params)，sDefaultExecutor 是内部定义的 SerialExecutor 类的对象，主要的方法是 execute(final Runnable r) 用于启动一个线程。</li>
<li><p>executeOnExecutor(Executor exec, Params… params)<br> 作为第一步中执行的方法，首先会判断任务的运行状态，如果是 PENDING 则表明没有运行，然后便会执行 onPreExecute() 方法，之后将 params 传递给 mWorker 对象，mWorker 是一个实现了 Callable 接口的 WorkerRunnable 对象，最后调用 exec.execute(mFuture) 去启动线程。其中 mWorker 和 mFuture 对象在构造函数中完成了初始化过程。mFuture 是一个实现了 RunnableFuture 接口的 FutureTask 对象，FutureTask 的 run() 方法将会调用 Callable 接口的 call() 方法。也即是说 exec.execute(mFuture) 调用了 mFuture 的 run() 方法从而调用了 mWorker 的 call() 方法。</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//execute 的执行过程</span></div><div class="line">exec.execute(mFuture);</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(<span class="keyword">final</span> Runnable r)</span> </span>&#123;</div><div class="line">    mTasks.offer(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                r.run();</div><div class="line">            &#125; <span class="keyword">finally</span> &#123;</div><div class="line">                scheduleNext();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">    <span class="keyword">if</span> (mActive == <span class="keyword">null</span>) &#123;</div><div class="line">        scheduleNext();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//mFuture 调用 mWorker.call() 的过程</span></div><div class="line">mFuture = <span class="keyword">new</span> FutureTask&lt;Result&gt;(mWorker)</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">FutureTask</span><span class="params">(Callable&lt;V&gt; callable)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (callable == <span class="keyword">null</span>)</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</div><div class="line">    <span class="keyword">this</span>.callable = callable;</div><div class="line">    <span class="keyword">this</span>.state = NEW;       <span class="comment">// ensure visibility of callable</span></div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (state != NEW ||</div><div class="line">        !U.compareAndSwapObject(<span class="keyword">this</span>, RUNNER, <span class="keyword">null</span>, Thread.currentThread()))</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        Callable&lt;V&gt; c = callable;</div><div class="line">        <span class="keyword">if</span> (c != <span class="keyword">null</span> &amp;&amp; state == NEW) &#123;</div><div class="line">            V result;</div><div class="line">            <span class="keyword">boolean</span> ran;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                result = c.call();</div><div class="line">                ran = <span class="keyword">true</span>;</div><div class="line">            &#125; <span class="keyword">catch</span> (Throwable ex) &#123;</div><div class="line">                result = <span class="keyword">null</span>;</div><div class="line">                ran = <span class="keyword">false</span>;</div><div class="line">                setException(ex);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (ran)</div><div class="line">                set(result);</div><div class="line">        &#125;</div><div class="line">    &#125; <span class="keyword">finally</span> &#123;</div><div class="line">        <span class="comment">// runner must be non-null until state is settled to</span></div><div class="line">        <span class="comment">// prevent concurrent calls to run()</span></div><div class="line">        runner = <span class="keyword">null</span>;</div><div class="line">        <span class="comment">// state must be re-read after nulling runner to prevent</span></div><div class="line">        <span class="comment">// leaked interrupts</span></div><div class="line">        <span class="keyword">int</span> s = state;</div><div class="line">        <span class="keyword">if</span> (s &gt;= INTERRUPTING)</div><div class="line">            handlePossibleCancellationInterrupt(s);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>执行完上述两步之后 mWorker.call() 得到了调用，任务开始启动。<br> 在 call() 方法中调用了 doInBackground(mParams) 并将结果保存在 result 变量当中，然后在 postResult(result) 中通过 getHandler() 获取到 InternalHandler 对象，通过 obtainMessage() 方法将结果发送出去，之后在 handleMessage(Message msg) 中调用了 finish() 方法。finish() 方法中最终调用了 onPostExecute(result) 方法。<br> 如果在 doInBackground(mParams) 调用了 publishProgress(Progress… values)，则在 publishProgress(Progress… values) 中也会通过 getHandler() 发送 Message，然后在 handleMessage(Message msg) 中调用 onProgressUpdate(Progress… values) 方法。</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> Result <span class="title">postResult</span><span class="params">(Result result)</span> </span>&#123;</div><div class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</div><div class="line">    Message message = getHandler().obtainMessage(MESSAGE_POST_RESULT,</div><div class="line">           <span class="keyword">new</span> AsyncTaskResult&lt;Result&gt;(<span class="keyword">this</span>, result));</div><div class="line">    message.sendToTarget();</div><div class="line">    <span class="keyword">return</span> result;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">publishProgress</span><span class="params">(Progress... values)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (!isCancelled()) &#123;</div><div class="line">        getHandler().obtainMessage(MESSAGE_POST_PROGRESS,</div><div class="line">                <span class="keyword">new</span> AsyncTaskResult&lt;Progress&gt;(<span class="keyword">this</span>, values)).sendToTarget();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</div><div class="line">    AsyncTaskResult&lt;?&gt; result = (AsyncTaskResult&lt;?&gt;) msg.obj;</div><div class="line">    <span class="keyword">switch</span> (msg.what) &#123;</div><div class="line">        <span class="keyword">case</span> MESSAGE_POST_RESULT:</div><div class="line">            <span class="comment">// There is only one result</span></div><div class="line">            result.mTask.finish(result.mData[<span class="number">0</span>]);</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> MESSAGE_POST_PROGRESS:</div><div class="line">            result.mTask.onProgressUpdate(result.mData);</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">finish</span><span class="params">(Result result)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (isCancelled()) &#123;</div><div class="line">        onCancelled(result);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        onPostExecute(result);</div><div class="line">    &#125;</div><div class="line">    mStatus = Status.FINISHED;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;AsyncTask-的作用&quot;&gt;&lt;a href=&quot;#AsyncTask-的作用&quot; class=&quot;headerlink&quot; title=&quot;AsyncTask 的作用&quot;&gt;&lt;/a&gt;AsyncTask 的作用&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;AsyncTask 允许对用户界面执行异步操作。 它会先阻塞工作线程中的操作，然后在 UI 线程中发布结果，而无需您亲自处理线程和/或处理程序。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;AsyncTask 基于异步消息处理机制进行实现，通过 AsyncTask 能够很简单的从子线程切换至主线程。&lt;br&gt;
    
    </summary>
    
      <category term="Android 学习" scheme="http://www.rookieyang.cn/categories/Android-%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Android" scheme="http://www.rookieyang.cn/tags/Android/"/>
    
      <category term="AsyncTask" scheme="http://www.rookieyang.cn/tags/AsyncTask/"/>
    
  </entry>
  
  <entry>
    <title>Gallery 的三种实现方式</title>
    <link href="http://www.rookieyang.cn/2017/05/08/Gallery%E7%9A%84%E4%B8%89%E7%A7%8D%E5%AE%9E%E7%8E%B0%E6%96%B9%E5%BC%8F/"/>
    <id>http://www.rookieyang.cn/2017/05/08/Gallery的三种实现方式/</id>
    <published>2017-05-08T11:17:49.000Z</published>
    <updated>2017-07-11T04:52:11.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Gallery"><a href="#Gallery" class="headerlink" title="Gallery"></a>Gallery</h3><p>主要内容：<br><img src="https://lh3.googleusercontent.com/-3IROg74w7R0/WRBUvh7PYFI/AAAAAAAAAOg/HI89jtOkwlU-ipkBv1wpqsX_Z7ZHCKHngCHM/I/%255BUNSET%255D" alt="总结"><a id="more"></a><br>目标效果：<br><img src="https://lh3.googleusercontent.com/-XZzYHp3cr00/WRBfR0_cunI/AAAAAAAAAO8/ZM3ADS1SYp8b2N6w7axgphN6X0uZM8T1gCHM/I/2017-05-08%2B20.00.05.gif" alt="2017-05-08 20.00.05"></p>
<h4 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h4><p>从目标效果上来看主要考虑以下几个点：</p>
<ol>
<li>图片如何切换和切换动画<ul>
<li>ImageSwitcher 提供了 <code>setImageResource (int resid)</code> 方法对下一个 ImageView 进行图片加载和切换，切换的动画效果需要自定义</li>
<li>ViewPager 的切换和切换动画内部处理</li>
<li>HorizontalScrollView 可以通过 <code>smoothScrollBy (int dx, int dy)</code> 方法进行平滑切换</li>
</ul>
</li>
<li>图片的切换方向<ul>
<li>ImageSwitcher 的切换方向需要自己判断</li>
<li>HorizontalScrollView 的切换方向虽然不用判断，但是滑动距离需要自己控制</li>
<li>ViewPager 的切换方向无需处理</li>
</ul>
</li>
<li>确定切换时应该加载的图片<ul>
<li>ImageSwitcher 和 HorizontalScrollView 加载图片需要自己判断</li>
<li>ViewPager 的加载图片无需处理</li>
</ul>
</li>
<li>图片下方的圆点效果，与图片数量一致</li>
<li>圆点和图片的同步切换</li>
</ol>
<h4 id="ImageSwitcher-实现"><a href="#ImageSwitcher-实现" class="headerlink" title="ImageSwitcher 实现"></a>ImageSwitcher 实现</h4><ol>
<li><p>ImageSwitcher 的特点<br>首先查看 ImageSwitcher 和 ViewSwitcher 的官方 API：</p>
<blockquote>
<p>ViewSwitcher that switches between two ImageViews when a new image is set on it. The views added to an ImageSwitcher must all be ImageViews.</p>
<p>ViewAnimator that switches between two views, and has a factory from which these views are created. You can either use the factory to create the views, or add them yourself. A ViewSwitcher can only have two child views, of which only one is shown at a time.</p>
</blockquote>
<p> 官方给出的 API 说明了，ImageSwitcher 里最多只能由两个 ImageView，同一时间只能显示一个，在两个 ImageView 之间能够设置视图切换动画，并且提供了 factory 用于创建两个 ImageView（当然也可以选择自行添加）。</p>
</li>
<li><p>实现过程<br> 首先我们需要在布局文件中添加 ImageSwitcher 控件：</p>
 <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">FrameLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">  <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></div><div class="line">  <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></div><div class="line">  <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">  <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">  <span class="attr">tools:context</span>=<span class="string">"com.rookieyang.gallerytest.ImageSwitcherTest"</span>&gt;</div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">ImageSwitcher</span></span></div><div class="line">    <span class="attr">android:id</span>=<span class="string">"@+id/imageSwitcher"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span> /&gt;</div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">RelativeLayout</span></span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_marginBottom</span>=<span class="string">"30dp"</span>&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">LinearLayout</span></span></div><div class="line">      <span class="attr">android:id</span>=<span class="string">"@+id/tipsLayout"</span></div><div class="line">      <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">      <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">      <span class="attr">android:layout_alignParentBottom</span>=<span class="string">"true"</span></div><div class="line">      <span class="attr">android:gravity</span>=<span class="string">"center_horizontal"</span></div><div class="line">      <span class="attr">android:orientation</span>=<span class="string">"horizontal"</span>/&gt;</div><div class="line">  <span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">FrameLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<blockquote>
<p>采用 FrameLayout 将圆点部分置于图片的上方，RelativeLayout 用于控制原点部分在底部，LinearLayout 中的属性设置用于将圆点水平居中放置。</p>
</blockquote>
<p> 在添加完 ImageSwiter 之后，通过 <code>setFactory(ViewFactory factory)</code> 函数为 ImageSwiter 添加 ImageView：</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">mImageSwitcher.setFactory(<span class="keyword">new</span> ViewFactory() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> View <span class="title">makeView</span><span class="params">()</span> </span>&#123;</div><div class="line">        ImageView imageView = <span class="keyword">new</span> ImageView(ImageSwitcherTest.<span class="keyword">this</span>);</div><div class="line">        ImageSwitcher.LayoutParams layoutParams = <span class="keyword">new</span> ImageSwitcher.LayoutParams(</div><div class="line">            ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT);</div><div class="line">        imageView.setScaleType(ScaleType.CENTER_CROP);</div><div class="line">        imageView.setLayoutParams(layoutParams);</div><div class="line">        <span class="keyword">return</span> imageView;</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<blockquote>
<p>这里为 ImageSwitcher 设置了一个 factory，在 <code>setFactory(ViewFactory factory)</code> 内部会执行两次 <code>obtainView()</code> 完成 View 的增加。</p>
</blockquote>
<p>   上述过程只是完成了 ImageView 的添加，实际的图片还没有被加载，由于 ImageSwitcher 的限制，所以我们不能直接将 ImageView 一次性添加进去（这样性能也不高），可以选择用一个数组对图片资源进行保存，在调用 <code>setImageResource()</code> 时进行加载：</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">int</span>[] mImageId = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;R.drawable.pic1, R.drawable.pic2, R.drawable.pic3&#125;;</div><div class="line">mImageSwitcher.setImageResource(mImageId[<span class="number">0</span>]);</div></pre></td></tr></table></figure>
<p> 在解决了如何加载图片之后，还需要为图片下方添加圆点效果，圆点的个数由图片的个数决定，代码如下：</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> ImageView[] mTips;</div><div class="line"></div><div class="line">mTips = <span class="keyword">new</span> ImageView[mImageId.length];</div><div class="line">LinearLayout tipsLinearLayout = (LinearLayout) findViewById(R.id.tipsLayout);</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; mImageId.length; i++) &#123;</div><div class="line">    mTips[i] = <span class="keyword">new</span> ImageView(<span class="keyword">this</span>);</div><div class="line">    LinearLayout.LayoutParams layoutParams = <span class="keyword">new</span> LayoutParams(</div><div class="line">        <span class="keyword">new</span> ViewGroup.LayoutParams(ViewGroup.LayoutParams.WRAP_CONTENT,</div><div class="line">            ViewGroup.LayoutParams.WRAP_CONTENT));</div><div class="line">    layoutParams.leftMargin = <span class="number">5</span>;</div><div class="line">    layoutParams.rightMargin = <span class="number">5</span>;</div><div class="line">    tipsLinearLayout.addView(mTips[i], layoutParams);</div><div class="line">&#125;</div><div class="line"></div><div class="line">setTipsImage(<span class="number">0</span>);</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setTipsImage</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; mImageId.length; i++) &#123;</div><div class="line">        <span class="keyword">if</span> (i == position) &#123;</div><div class="line">            mTips[i].setImageResource(R.drawable.page_indicator_focused);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            mTips[i].setImageResource(R.drawable.page_indicator_unfocused);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p> 在完成上述步骤之后我们还需要完成的是让图片和圆点同时进行切换、确定切换方向和应该加载的图片以及切换的动画，对于图片的切换方向可以依据第一次按住屏幕和离开屏幕这两点的位置进行判断，而切换时加载的图片则可以用一个变量对当前图片序号进行保存，动画效果则可以定义四个动画（左进，左出，右进、右出）文件：</p>
 <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--left_in--&gt;</span></div><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">set</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span>&gt;</span></div><div class="line"> <span class="tag">&lt;<span class="name">translate</span></span></div><div class="line">   <span class="attr">android:fromXDelta</span>=<span class="string">"-100%p"</span></div><div class="line">   <span class="attr">android:toXDelta</span>=<span class="string">"0"</span></div><div class="line">   <span class="attr">android:duration</span>=<span class="string">"500"</span>/&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">set</span>&gt;</span></div><div class="line"><span class="comment">&lt;!--left_out--&gt;</span></div><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">set</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span>&gt;</span></div><div class="line"> <span class="tag">&lt;<span class="name">translate</span></span></div><div class="line">   <span class="attr">android:fromXDelta</span>=<span class="string">"0"</span></div><div class="line">   <span class="attr">android:toXDelta</span>=<span class="string">"-100%p"</span></div><div class="line">   <span class="attr">android:duration</span>=<span class="string">"500"</span>/&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">set</span>&gt;</span></div><div class="line"><span class="comment">&lt;!--right_in--&gt;</span></div><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">set</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span>&gt;</span></div><div class="line"> <span class="tag">&lt;<span class="name">translate</span></span></div><div class="line">   <span class="attr">android:fromXDelta</span>=<span class="string">"100%p"</span></div><div class="line">   <span class="attr">android:toXDelta</span>=<span class="string">"0"</span></div><div class="line">   <span class="attr">android:duration</span>=<span class="string">"500"</span>/&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">set</span>&gt;</span></div><div class="line"><span class="comment">&lt;!--right_out--&gt;</span></div><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">set</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span>&gt;</span></div><div class="line"> <span class="tag">&lt;<span class="name">translate</span></span></div><div class="line">   <span class="attr">android:fromXDelta</span>=<span class="string">"0"</span></div><div class="line">   <span class="attr">android:toXDelta</span>=<span class="string">"100%p"</span></div><div class="line">   <span class="attr">android:duration</span>=<span class="string">"500"</span>/&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">set</span>&gt;</span></div></pre></td></tr></table></figure>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">int</span> mDownX;</div><div class="line"><span class="keyword">private</span> <span class="keyword">int</span> mCurrentPosition = <span class="number">0</span>;</div><div class="line"></div><div class="line">mImageSwitcher.setOnTouchListener(<span class="keyword">new</span> OnTouchListener() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouch</span><span class="params">(View v, MotionEvent event)</span> </span>&#123;</div><div class="line">        <span class="keyword">switch</span> (event.getAction()) &#123;</div><div class="line">            <span class="keyword">case</span> MotionEvent.ACTION_DOWN:</div><div class="line">                mDownX = (<span class="keyword">int</span>) event.getX();</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> MotionEvent.ACTION_UP:</div><div class="line">                <span class="keyword">int</span> upX = (<span class="keyword">int</span>) event.getX();</div><div class="line">                <span class="keyword">if</span> (upX &gt; mDownX) &#123;</div><div class="line">                    <span class="keyword">if</span> (mCurrentPosition &gt; <span class="number">0</span>) &#123;</div><div class="line">                        mImageSwitcher.setInAnimation(ImageSwitcherTest.<span class="keyword">this</span>,</div><div class="line">                            R.anim.left_in);</div><div class="line">                        mImageSwitcher.setOutAnimation(ImageSwitcherTest.<span class="keyword">this</span>,</div><div class="line">                            R.anim.right_out);</div><div class="line">                        mCurrentPosition--;</div><div class="line">                        mImageSwitcher.setImageResource(mImageId[mCurrentPosition]);</div><div class="line">                        setTipsImage(mCurrentPosition);</div><div class="line">                    &#125;</div><div class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (upX &lt; mDownX) &#123;</div><div class="line">                    <span class="keyword">if</span> (mCurrentPosition &lt; mImageId.length - <span class="number">1</span>) &#123;</div><div class="line">                        mImageSwitcher.setInAnimation(ImageSwitcherTest.<span class="keyword">this</span>,</div><div class="line">                            R.anim.right_in);</div><div class="line">                        mImageSwitcher.setOutAnimation(ImageSwitcherTest.<span class="keyword">this</span>,</div><div class="line">                            R.anim.left_out);</div><div class="line">                        mCurrentPosition++;</div><div class="line">                        mImageSwitcher.setImageResource(mImageId[mCurrentPosition]);</div><div class="line">                        setTipsImage(mCurrentPosition);</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
</li>
</ol>
<h4 id="ViewPager-实现"><a href="#ViewPager-实现" class="headerlink" title="ViewPager 实现"></a>ViewPager 实现</h4><ol>
<li><p>ViewPager 的特点</p>
<blockquote>
<p>ViewPager is most often used in conjunction with Fragment, which is a convenient way to supply and manage the lifecycle of each page. There are standard adapters implemented for using fragments with the ViewPager, which cover the most common use cases. These are FragmentPagerAdapter and FragmentStatePagerAdapter; each of these classes have simple code showing how to build a full user interface with them.</p>
</blockquote>
<p> ViewPager 一般结合 Fragment 使用，每个页面就是一个 Fragment，系统提供了 FragmentPagerAdapter 和 FragmentStatePagerAdapter 用于填充 ViewPager。</p>
</li>
<li><p>实现过程<br> 首先向布局文件中添加 ViewPager 控件：</p>
 <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">FrameLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">  <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></div><div class="line">  <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">  <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">  <span class="attr">tools:context</span>=<span class="string">"com.rookieyang.gallerytest.ViewPagerTest"</span>&gt;</div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">android.support.v4.view.ViewPager</span></span></div><div class="line">    <span class="attr">android:id</span>=<span class="string">"@+id/viewPager"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span> /&gt;</div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">RelativeLayout</span></span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_marginBottom</span>=<span class="string">"30dp"</span>&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">LinearLayout</span></span></div><div class="line">      <span class="attr">android:id</span>=<span class="string">"@+id/tipsFragmentLayout"</span></div><div class="line">      <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">      <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">      <span class="attr">android:layout_alignParentBottom</span>=<span class="string">"true"</span></div><div class="line">      <span class="attr">android:gravity</span>=<span class="string">"center_horizontal"</span></div><div class="line">      <span class="attr">android:orientation</span>=<span class="string">"horizontal"</span>/&gt;</div><div class="line">  <span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">FrameLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<p> 布局基本与 ImageSwitcher 一致，只是将 ImageSwitcher 控件替换为 ViewPager。<br> 接下来需要将图片加载到 ViewPager 中去，可以利用 FragmentPagerAdapter 达到这一目的，由于 FragmentPagerAdapter 返回的是 Fragment，所以创建了 ImageFragment 类，用于将 Image 放置到 Fragment中，代码布局如下：</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ImageFragment</span> <span class="keyword">extends</span> <span class="title">Fragment</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> View view;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> imageViewRes;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> View <span class="title">onCreateView</span><span class="params">(LayoutInflater inflater, ViewGroup container,</span></span></div><div class="line">        Bundle savedInstanceState) &#123;</div><div class="line">        <span class="comment">// Inflate the layout for this fragment</span></div><div class="line">        view = inflater.inflate(R.layout.fragment_image, container, <span class="keyword">false</span>);</div><div class="line">        <span class="keyword">return</span> view;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onActivityCreated</span><span class="params">(@Nullable Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onActivityCreated(savedInstanceState);</div><div class="line">        ImageView imageView = (ImageView) view.findViewById(R.id.viewPageImage);</div><div class="line">        imageView.setScaleType(ScaleType.CENTER_CROP);</div><div class="line">        imageView.setImageResource(imageViewRes);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setImageView</span><span class="params">(<span class="keyword">int</span> imageViewRes)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.imageViewRes = imageViewRes;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
 <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">FrameLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">  <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></div><div class="line">  <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">  <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">  <span class="attr">tools:context</span>=<span class="string">"com.rookieyang.gallerytest.ImageFragment"</span>&gt;</div><div class="line">  <span class="tag">&lt;<span class="name">ImageView</span></span></div><div class="line">    <span class="attr">android:id</span>=<span class="string">"@+id/viewPageImage"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span> /&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">FrameLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<p> 接下来实现继承自 FragmentPagerAdapter 的 ImagePagerAdapter 类，代码如下：</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ImagePagerAdapter</span> <span class="keyword">extends</span> <span class="title">FragmentPagerAdapter</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> List&lt;ImageFragment&gt; mFragments;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ImagePagerAdapter</span><span class="params">(FragmentManager fm, List&lt;ImageFragment&gt; fragments)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(fm);</div><div class="line">        mFragments = fragments;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> ImageFragment <span class="title">getItem</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</div><div class="line">        Log.i(<span class="string">"getItem"</span>, <span class="string">"getItem: "</span> + mFragments.get(position).getId());</div><div class="line">        <span class="keyword">return</span> mFragments.get(position);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCount</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> mFragments.size();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p> 在完成上述的步骤之后，利用保存图片资源的数组创建对应个数的 ImageFragment 并保存到 List 中，然后创建一个 ImagePagerAdapter 对象，替 ViewPager 设置适配器即可实现图片的加载和滑动。由于 ViewPager 内部处理了滑动方向和下一张图片加载判断的问题，所以只剩下图片与圆点的同步切换需要进行处理，代码如下：</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line">mImageIds = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;R.drawable.pic1, R.drawable.pic2, R.drawable.pic3&#125;;</div><div class="line">mTips = <span class="keyword">new</span> ImageView[mImageIds.length];</div><div class="line">mViewPager = (ViewPager) findViewById(R.id.viewPager);</div><div class="line">ViewGroup viewGroup = (ViewGroup) findViewById(R.id.tipsFragmentLayout);</div><div class="line">LinearLayout.LayoutParams layoutParams = <span class="keyword">new</span> LinearLayout.LayoutParams(</div><div class="line">    <span class="keyword">new</span> ViewGroup.LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT));</div><div class="line">layoutParams.rightMargin = <span class="number">5</span>;</div><div class="line">layoutParams.leftMargin = <span class="number">5</span>;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; mImageIds.length; i++) &#123;</div><div class="line">    ImageFragment imageFragment = <span class="keyword">new</span> ImageFragment();</div><div class="line">    imageFragment.setImageView(mImageIds[i]);</div><div class="line">    mImageFragments.add(imageFragment);</div><div class="line">    <span class="keyword">if</span> (mImageIds.length &gt; <span class="number">1</span>) &#123;</div><div class="line">        mTips[i] = <span class="keyword">new</span> ImageView(<span class="keyword">this</span>);</div><div class="line">        mTips[i].setImageResource(R.drawable.page_indicator_unfocused);</div><div class="line">        viewGroup.addView(mTips[i], layoutParams);</div><div class="line">        mTips[mCurrentPosition].setImageResource(R.drawable.page_indicator_focused);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">ImagePagerAdapter imagePagerAdapter = <span class="keyword">new</span> ImagePagerAdapter(</div><div class="line">    getSupportFragmentManager(), mImageFragments);</div><div class="line">mViewPager.setAdapter(imagePagerAdapter);</div><div class="line">mViewPager.addOnPageChangeListener(<span class="keyword">new</span> OnPageChangeListener() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPageScrolled</span><span class="params">(<span class="keyword">int</span> position, <span class="keyword">float</span> positionOffset,</span></span></div><div class="line">        <span class="keyword">int</span> positionOffsetPixels) &#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPageSelected</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (mImageIds.length &gt; <span class="number">1</span>) &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; mImageIds.length; i++) &#123;</div><div class="line">                <span class="keyword">if</span> (i == position) &#123;</div><div class="line">                    mTips[i].setImageResource(R.drawable.page_indicator_focused);</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    mTips[i].setImageResource(R.drawable.page_indicator_unfocused);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPageScrollStateChanged</span><span class="params">(<span class="keyword">int</span> state)</span> </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
</li>
</ol>
<h4 id="HorizontalScrollView-实现"><a href="#HorizontalScrollView-实现" class="headerlink" title="HorizontalScrollView 实现"></a>HorizontalScrollView 实现</h4><ol>
<li><p>HorizontalScrollView 特点</p>
<blockquote>
<p>A HorizontalScrollView is a FrameLayout, meaning you should place one child in it containing the entire contents to scroll; this child may itself be a layout manager with a complex hierarchy of objects. A child that is often used is a LinearLayout in a horizontal orientation, presenting a horizontal array of top-level items that the user can scroll through.</p>
</blockquote>
<p> 从这里可以了解到如果要实现上面的效果，那么应该在 HorizontalScrollView 放置一个 LinearLayout，然后 LinearLayout 内加载的是要显示的图片，由于是水平滑动，所以 LinearLayout 的方向也要是水平的。</p>
</li>
<li><p>实现过程<br> 依旧是添加了 HorizontalScrollView 控件，把放置 ImageSwwitcher 的部分替换为：</p>
 <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">HorizontalScrollView</span></span></div><div class="line">   <span class="attr">android:id</span>=<span class="string">"@+id/horizontalScrollView"</span></div><div class="line">   <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">   <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">   <span class="attr">android:scrollbars</span>=<span class="string">"none"</span>&gt;</div><div class="line">   <span class="tag">&lt;<span class="name">LinearLayout</span></span></div><div class="line">     <span class="attr">android:id</span>=<span class="string">"@+id/imageLayout"</span></div><div class="line">     <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">     <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">     <span class="attr">android:orientation</span>=<span class="string">"horizontal"</span> /&gt;</div><div class="line"> <span class="tag">&lt;/<span class="name">HorizontalScrollView</span>&gt;</span></div></pre></td></tr></table></figure>
<blockquote>
<p>为了效果一致去掉了滚动条。</p>
</blockquote>
<p> 添加完控件之后，就需要填充 HorizontalScrollView ，为了扩展性，所以创建了一个 HorizontalViewAdapter 类，代码如下：</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HorizontalViewAdapter</span></span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] mImageResIdList;</div><div class="line">    <span class="keyword">private</span> Context mContext;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HorizontalViewAdapter</span><span class="params">(Context context, <span class="keyword">int</span>[] imageResIdList)</span> </span>&#123;</div><div class="line">        mContext = context;</div><div class="line">        mImageResIdList = imageResIdList;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCount</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> mImageResIdList.length;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> ImageView <span class="title">getItem</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</div><div class="line">        ImageView imageView = <span class="keyword">new</span> ImageView(mContext);</div><div class="line"></div><div class="line">        WindowManager wm = (WindowManager) mContext.</div><div class="line">            getSystemService(Context.WINDOW_SERVICE);</div><div class="line">        DisplayMetrics displayMetrics = <span class="keyword">new</span> DisplayMetrics();</div><div class="line">        wm.getDefaultDisplay().getMetrics(displayMetrics);</div><div class="line">        <span class="keyword">int</span> width = displayMetrics.widthPixels;</div><div class="line">        <span class="keyword">int</span> height = displayMetrics.heightPixels;</div><div class="line">        Log.i(<span class="string">"Adpter: "</span>, String.valueOf(width));</div><div class="line"></div><div class="line">        LinearLayout.LayoutParams layoutParams = <span class="keyword">new</span> LayoutParams(</div><div class="line">            <span class="keyword">new</span> ViewGroup.LayoutParams(LayoutParams.MATCH_PARENT,LayoutParams.MATCH_PARENT));</div><div class="line">        layoutParams.width = width;</div><div class="line">        layoutParams.height = height;</div><div class="line"></div><div class="line">        imageView.setLayoutParams(layoutParams);</div><div class="line">        imageView.setScaleType(ScaleType.CENTER_CROP);</div><div class="line">        imageView.setImageResource(mImageResIdList[position]);</div><div class="line">        <span class="keyword">return</span> imageView;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>这里图片的长和宽会根据设备的分辨率进行指定，之所以不用 <code>match_parent</code> 的原因是这样会导致显示效果出问题。</p>
</blockquote>
<p> 在创建完适配器之后，由于 HorizontalScrollView 没有设置适配器的方法，所以需要实现 <code>setAdapter()</code> 方法，代码如下：</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAdapter</span><span class="params">(HorizontalViewAdapter horizontalViewAdapter)</span> </span>&#123;</div><div class="line">        mTips = <span class="keyword">new</span> ImageView[mImageId.length];</div><div class="line">        LinearLayout imageLayout = (LinearLayout) findViewById(R.id.imageLayout);</div><div class="line">        LinearLayout tipsLinearLayout = (LinearLayout) findViewById(R.id.horizontalTipsLayout);</div><div class="line">        <span class="keyword">int</span> size = horizontalViewAdapter.getCount();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</div><div class="line">            ImageView imageView = horizontalViewAdapter.getItem(i);</div><div class="line">            imageLayout.addView(imageView);</div><div class="line"></div><div class="line">            mTips[i] = <span class="keyword">new</span> ImageView(<span class="keyword">this</span>);</div><div class="line">            LinearLayout.LayoutParams layoutParams = <span class="keyword">new</span> LayoutParams(</div><div class="line">                <span class="keyword">new</span> ViewGroup.LayoutParams(ViewGroup.LayoutParams.WRAP_CONTENT,</div><div class="line">                    ViewGroup.LayoutParams.WRAP_CONTENT));</div><div class="line">            layoutParams.leftMargin = <span class="number">5</span>;</div><div class="line">            layoutParams.rightMargin = <span class="number">5</span>;</div><div class="line">            tipsLinearLayout.addView(mTips[i], layoutParams);</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p> 实现 <code>setAdapter()</code> 方法之后，就可以在 <code>onCreate()</code> 方法中调用了，调用之后图片会被加载到布局中，这时候也可以滑动，但是由于滑动距离没有控制，所以并没有达到想要的效果，由于图片的长度取决于设备的分辨率，所以可以获取设备的长度作为滑动距离，为 HorizontalScrollView 设置监听事件，当触摸屏幕之后进行判断，确定实际滑动的方向，具体代码如下：</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//获取图片滑动距离</span></div><div class="line">WindowManager wm = (WindowManager) getApplicationContext().</div><div class="line">    getSystemService(Context.WINDOW_SERVICE);</div><div class="line">DisplayMetrics displayMetrics = <span class="keyword">new</span> DisplayMetrics();</div><div class="line">wm.getDefaultDisplay().getMetrics(displayMetrics);</div><div class="line">mScrollX = displayMetrics.widthPixels;</div><div class="line"><span class="comment">//确定的滑动方向</span></div><div class="line"><span class="keyword">final</span> HorizontalScrollView horizontalScrollView = (HorizontalScrollView) findViewById(</div><div class="line">    R.id.horizontalScrollView);</div><div class="line">horizontalScrollView.setOnTouchListener(<span class="keyword">new</span> OnTouchListener() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouch</span><span class="params">(View v, MotionEvent event)</span> </span>&#123;</div><div class="line">        <span class="keyword">switch</span> (event.getAction()) &#123;</div><div class="line">            <span class="keyword">case</span> MotionEvent.ACTION_DOWN:</div><div class="line">                mDownX = (<span class="keyword">int</span>) event.getX();</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> MotionEvent.ACTION_UP:</div><div class="line">                <span class="keyword">int</span> upX = (<span class="keyword">int</span>) event.getX();</div><div class="line">                <span class="keyword">if</span> (upX &gt; mDownX) &#123;</div><div class="line">                    <span class="keyword">if</span> (mCurrentPosition &gt; <span class="number">0</span>) &#123;</div><div class="line">                        mCurrentPosition--;</div><div class="line">                        horizontalScrollView.smoothScrollBy(-mScrollX, <span class="number">0</span>);</div><div class="line">                        setTipsImage(mCurrentPosition);</div><div class="line">                    &#125;</div><div class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (upX &lt; mDownX) &#123;</div><div class="line">                    <span class="keyword">if</span> (mCurrentPosition &lt; mImageId.length - <span class="number">1</span>) &#123;</div><div class="line">                        mCurrentPosition++;</div><div class="line">                        Log.i(<span class="string">"onTouch: "</span>, <span class="string">"onTouch: "</span> + mCurrentPosition);</div><div class="line">                        horizontalScrollView.smoothScrollBy(mScrollX, <span class="number">0</span>);</div><div class="line">                        setTipsImage(mCurrentPosition);</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>HorizontalScrollView 的实现实际上并不完善，因为 ImageView 是一次性全部添加进去的，并没有做优化处理，在虚拟机上运行时，由于超过了堆内存会导致报错。</p>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Gallery&quot;&gt;&lt;a href=&quot;#Gallery&quot; class=&quot;headerlink&quot; title=&quot;Gallery&quot;&gt;&lt;/a&gt;Gallery&lt;/h3&gt;&lt;p&gt;主要内容：&lt;br&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/-3IROg74w7R0/WRBUvh7PYFI/AAAAAAAAAOg/HI89jtOkwlU-ipkBv1wpqsX_Z7ZHCKHngCHM/I/%255BUNSET%255D&quot; alt=&quot;总结&quot;&gt;
    
    </summary>
    
      <category term="Android 学习" scheme="http://www.rookieyang.cn/categories/Android-%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Android" scheme="http://www.rookieyang.cn/tags/Android/"/>
    
      <category term="总结" scheme="http://www.rookieyang.cn/tags/%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>onOptionsItemSelected() 返回值的理解</title>
    <link href="http://www.rookieyang.cn/2017/05/03/onOptionsItemSelected%E8%BF%94%E5%9B%9E%E5%80%BC%E7%9A%84%E7%90%86%E8%A7%A3/"/>
    <id>http://www.rookieyang.cn/2017/05/03/onOptionsItemSelected返回值的理解/</id>
    <published>2017-05-03T12:21:57.000Z</published>
    <updated>2017-05-03T13:42:15.000Z</updated>
    
    <content type="html"><![CDATA[<p>首先查看官方 API 的解释：</p>
<blockquote>
<p>This hook is called whenever an item in your options menu is selected. The default implementation simply returns false to have the normal processing happen (calling the item’s Runnable or sending a message to its Handler as appropriate). You can use this method for any items for which you would like to do processing without those other facilities.</p>
</blockquote>
<a id="more"></a>
<p>也就是说当点击 OptionsMenu 中的 Item 时，默认会返回 false，这个时候将会处理 item 关联的 Runnable 或发送一条 message 给它的 Handler。<br>为了弄清楚返回 false 时可能会发生什么做了如下测试：</p>
<ol>
<li><p>测试一</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onOptionsItemSelected</span><span class="params">(MenuItem item)</span> </span>&#123;</div><div class="line">    <span class="keyword">switch</span> (item.getItemId()) &#123;</div><div class="line">        <span class="keyword">case</span> R.id.add_item:</div><div class="line">            Toast.makeText(MainActivity.<span class="keyword">this</span>, <span class="string">"Add"</span>, Toast.LENGTH_LONG).show();</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> R.id.remove_item:</div><div class="line">            Toast.makeText(MainActivity.<span class="keyword">this</span>, <span class="string">"Remove"</span>, Toast.LENGTH_LONG).show();</div><div class="line">            item.setActionView(R.layout.progress);</div><div class="line">            Intent intent = <span class="keyword">new</span> Intent(MainActivity.<span class="keyword">this</span>, SecondActivity.class);</div><div class="line">            item.setIntent(intent);</div><div class="line">            Log.i(TAG, <span class="string">"onOptionsItemSelected: Remove"</span>);</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">default</span>:</div><div class="line">            Toast.makeText(MainActivity.<span class="keyword">this</span>, <span class="string">"re"</span>, Toast.LENGTH_LONG).show();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>上述代码中给 item 关联了一个 Intent 用于跳转到 SecondActivity，如果返回为 true 则点击 item 时不会跳转到 SecondActivity，如果返回 false 则会跳转到 SecondActivity。</p>
</blockquote>
</li>
<li><p>测试二</p>
<ul>
<li><p>创建一个 Fragment</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyFragment</span> <span class="keyword">extends</span> <span class="title">Fragment</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreateOptionsMenu</span><span class="params">(Menu menu, MenuInflater inflater)</span> </span>&#123;</div><div class="line">    inflater.inflate(R.menu.main, menu);</div><div class="line">    <span class="keyword">super</span>.onCreateOptionsMenu(menu, inflater);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onOptionsItemSelected</span><span class="params">(MenuItem item)</span> </span>&#123;</div><div class="line">    <span class="keyword">switch</span> (item.getItemId()) &#123;</div><div class="line">      <span class="keyword">case</span> R.id.remove_item:</div><div class="line">        Toast.makeText(getContext(), <span class="string">"Fragment Remove"</span>, Toast.LENGTH_LONG).show();</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">      <span class="keyword">default</span>:</div><div class="line">        Toast.makeText(getContext(), <span class="string">"Fragment"</span>, Toast.LENGTH_LONG).show();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="meta">@Nullable</span></div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> View <span class="title">onCreateView</span><span class="params">(LayoutInflater inflater, @Nullable ViewGroup container,</span></span></div><div class="line">      Bundle savedInstanceState) &#123;</div><div class="line">    setHasOptionsMenu(<span class="keyword">true</span>);</div><div class="line">    <span class="keyword">return</span> inflater.inflate(fragment_layout, container, <span class="keyword">false</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上述创建了一个自定义的 Fragment 类，并添加了 OptionMenu 的点击事件。</p>
</li>
<li><p>在之前的 Activity 的布局文件中添加 Fragment</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">  <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></div><div class="line">  <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">  <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">  <span class="attr">android:orientation</span>=<span class="string">"vertical"</span>&gt;</div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">fragment</span></span></div><div class="line">    <span class="attr">android:id</span>=<span class="string">"@+id/fragment"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:name</span>=<span class="string">"com.rookieyang.demo.MyFragment"</span></div><div class="line">    <span class="attr">tools:layout</span>=<span class="string">"@layout/fragment_layout"</span> /&gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<p></p></li></ul><p></p>
<blockquote>
<p>在完成上述步骤之后点击 remove 的 item，由于 Activity 中的 onOptionsItemSelected() 返回了false，导致事件没有被消费就会向下传递给 Fragment，进而执行 Fragment 中的 item 的点击事件，所以能够看到屏幕上将会显示 <code>Fragment Remove</code> 而不是 <code>Remove</code>。</p>
</blockquote>
</li>


</ol>
<p>补：OptionMenu 的 Item 自定义的点击事件优先级要高于 onOptionsItemSelected()。</p>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;首先查看官方 API 的解释：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This hook is called whenever an item in your options menu is selected. The default implementation simply returns false to have the normal processing happen (calling the item’s Runnable or sending a message to its Handler as appropriate). You can use this method for any items for which you would like to do processing without those other facilities.&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Android 学习" scheme="http://www.rookieyang.cn/categories/Android-%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Android" scheme="http://www.rookieyang.cn/tags/Android/"/>
    
      <category term="问题记录" scheme="http://www.rookieyang.cn/tags/%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>Activity 学习</title>
    <link href="http://www.rookieyang.cn/2017/05/02/Activity%E5%AD%A6%E4%B9%A0/"/>
    <id>http://www.rookieyang.cn/2017/05/02/Activity学习/</id>
    <published>2017-05-02T11:58:36.000Z</published>
    <updated>2017-08-26T15:07:54.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Activity"><a href="#Activity" class="headerlink" title="Activity"></a>Activity</h3><p>主要内容：<br><img src="https://lh3.googleusercontent.com/-u4OYyZZzSb8/WQh2MXvWjiI/AAAAAAAAAOA/NifbHzkgMfc5NvV-goL-QS_dR3Jt2qgLACHM/I/Activity" alt="Activity导图"><a id="more"></a></p>
<h4 id="Activity-基本使用"><a href="#Activity-基本使用" class="headerlink" title="Activity 基本使用"></a>Activity 基本使用</h4><ol>
<li>创建活动</li>
<li><code>AndroidManifest.xml</code> 的 <code>application</code> 标签内进行声明</li>
<li>载入布局<br>setContentView(R.layout.second_layout)</li>
</ol>
<h4 id="Activity-跳转"><a href="#Activity-跳转" class="headerlink" title="Activity 跳转"></a>Activity 跳转</h4><ol>
<li><p>显式 Intent</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//Intent(Context packageContext, Class&lt;?&gt; cls)</span></div><div class="line">Intent intent = <span class="keyword">new</span> Intent(MainActivity.<span class="keyword">this</span>, SecondActivity.class);</div><div class="line">startActivity(intent);</div></pre></td></tr></table></figure>
<p> 这种指定上下文和目标活动类名的 Intent 称之为显式 Intent。</p>
</li>
<li><p>隐式 Intent</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">   &lt;activity android:name=&quot;.SecondActivity&quot;&gt;</div><div class="line">     &lt;intent-filter&gt;</div><div class="line">       &lt;action android:name=&quot;com.rookieyang.demo.ACTION_START&quot; /&gt;</div><div class="line">    </div><div class="line">       &lt;category android:name=&quot;android.intent.category.DEFAULT&quot; /&gt;</div><div class="line">       &lt;category android:name=&quot;com.rookieyang.demo.MY_CATEGORY&quot; /&gt;</div><div class="line">     &lt;/intent-filter&gt;</div><div class="line">&lt;/activity&gt;</div><div class="line"></div><div class="line">    Intent implieIntent = new Intent(&quot;com.rookieyang.demo.ACTION_START&quot;);</div><div class="line">    implieIntent.addCategory(&quot;com.rookieyang.demo.MY_CATEGORY&quot;);</div><div class="line">    startActivity(implieIntent);</div></pre></td></tr></table></figure>
<p> 隐式 Intent 通过指定一系列更为抽象的 action 和 category 等信息，然后交由系统去分析这个 Intent，并帮我们找出合适的活动去启动。只有活动中的 <code>&lt;action&gt;</code> 和 <code>&lt;category&gt;</code> 标签完全匹配 Intent 中的 action 和 category 时，活动才能响应 Intent。</p>
<blockquote>
<p>在调用 <code>startActivity()</code> 方法时会自动将 <code>android.intent.category.DEFAULT</code> 加入到 Intent 中，所以在给 Activity 指定 category 的时候不能够去掉默认的 <code>android.intent.category.DEFAULT</code>，去掉之后通过隐式 Intent 将无法匹配到该 Activity。</p>
</blockquote>
<p> 隐式 Intent 除了可以启动自己程序内的活动，还可以启动其他程序的活动：</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">btn.setOnClickListener(<span class="keyword">new</span> OnClickListener() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">        Intent intent = <span class="keyword">new</span> Intent(Intent.ACTION_VIEW);</div><div class="line">        intent.setData(Uri.parse(<span class="string">"http://www.baidu.com"</span>));</div><div class="line">        startActivity(intent);</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p> 隐式 Intent 指定了一个系统内置的 action，通过 <code>setData()</code> 设置 Intent 操作的数据用以调用系统浏览器，其中 <code>setData()</code> 对应 <code>&lt;intent-filter&gt;</code> 标签内的 <code>&lt;data&gt;</code> 标签，用于指定当前活动能够响应什么类型的数据。<code>&lt;data&gt;</code> 标签中主要可以配置以下内容：</p>
<ul>
<li><code>android:scheme</code>：用于指定数据的协议部分，如上例的 http 部分。</li>
<li><code>android:host</code>：用于指定数据的主机名部分，如上例的 www.baidu.com 部分。</li>
<li><code>android:port</code>：用于指定数据的端口部分，一般紧随主机名之后。</li>
<li><code>android:path</code>：用于指定主机名和端口之后的部分，如一段网址中跟在域名之后的内容。</li>
<li><code>android:mimeType</code>：用于指定可以处理的数据类型，允许使用通配符方式进行指定。</li>
</ul>
</li>
</ol>
<h4 id="Activity-间数据传递"><a href="#Activity-间数据传递" class="headerlink" title="Activity 间数据传递"></a>Activity 间数据传递</h4><ol>
<li><p>向下一个活动传递数据</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//MainActivity</span></div><div class="line">Intent intent = <span class="keyword">new</span> Intent(MainActivity.<span class="keyword">this</span>, SecondActivity.class);</div><div class="line">intent.putExtra(<span class="string">"data"</span>, <span class="string">"data"</span>);</div><div class="line">startActivity(intent);</div><div class="line"><span class="comment">//SecondActivity</span></div><div class="line">Intent intent = getIntent();</div><div class="line">Toast.makeText(<span class="keyword">this</span>, intent.getStringExtra(<span class="string">"data"</span>), Toast.LENGTH_LONG).show();</div></pre></td></tr></table></figure>
<p> MainActivity 中通过 Intent 的 <code>putExtra()</code> 方法将数据暂存在 Intent 中，然后在 SecondActivity 中通过 <code>getIntent()</code> 获取到启动 SecondActivity 的 Intent，之后通过 <code>getStringExtra()</code> 方法获取到传递的数据。如果传递的是整型数据则使用 <code>getIntExtra()</code> 方法。</p>
</li>
<li><p>返回数据给上一个活动</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//MainActivity</span></div><div class="line">btn.setOnClickListener(<span class="keyword">new</span> OnClickListener() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">        Intent intent = <span class="keyword">new</span> Intent(MainActivity.<span class="keyword">this</span>, SecondActivity.class);</div><div class="line">        startActivityForResult(intent, <span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onActivityResult</span><span class="params">(<span class="keyword">int</span> requestCode, <span class="keyword">int</span> resultCode, Intent data)</span> </span>&#123;</div><div class="line">    <span class="keyword">switch</span> (requestCode) &#123;</div><div class="line">        <span class="keyword">case</span> <span class="number">1</span>:</div><div class="line">            <span class="keyword">if</span> (resultCode == RESULT_OK) &#123;</div><div class="line">                Log.i(<span class="string">"onActivityResult"</span>, data.getStringExtra(<span class="string">"data"</span>));</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">default</span>:</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">//SecondActivity</span></div><div class="line">btn.setOnClickListener(<span class="keyword">new</span> OnClickListener() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">        Intent intent = <span class="keyword">new</span> Intent();</div><div class="line">        intent.putExtra(<span class="string">"data"</span>, <span class="string">"data"</span>);</div><div class="line">        setResult(RESULT_OK, intent);</div><div class="line">        finish();</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<ul>
<li><code>startActivityForResult(Intent intent, int requestCode)</code>：期望在活动销毁的时候能够返回一个结果给上一个活动。</li>
<li><code>setResult(int resultCode, Intent data)</code>：专门用于向上一个活动返回数据，第一个参数用于向上一个活动返回处理结果，一般只使用 <code>RESULT_OK</code> 和 <code>RESULT_CANCELED</code>。第二个参数则是把带有数据的 Intent 传递回去，然后调用 <code>finish()</code> 方法来销毁当前活动。</li>
<li><code>onActivityResult(int requestCode, int resultCode, Intent data)</code>：第一个参数是我们启动活动传入的请求码，第二个参数是返回数据传入的返回结果，第三个参数是返回的携带数据的 Intent，由于一个活动可能调用 <code>startActivityForResult()</code> 启动多个活动，所以首先需要检查 <code>requestCode</code> 来判断数据来源，然后在通过 <code>resultCode</code> 来判断处理结果是否成功。</li>
</ul>
</li>
</ol>
<h4 id="Activity-的生命周期"><a href="#Activity-的生命周期" class="headerlink" title="Activity 的生命周期"></a>Activity 的生命周期</h4><p><img src="http://i.imgur.com/J27l7mI.png" alt="activity_lifecycle"></p>
<ol>
<li><code>onCreate()</code>：活动第一次被创建的时候调用，一般在该方法中完成活动的初始化操作，比如加载布局、绑定事件等。</li>
<li><code>onStart()</code>：在活动由不可见变为可见的时候调用。</li>
<li><code>onResume()</code>：在活动准备好和用户进行交互的时候调用。此时活动一定位于栈顶，并且处于运行状态。</li>
<li><code>onPause()</code>：在系统准备去启动或者恢复另一个活动的时候调用。我们通常会在这个方法中将一些消耗 CPU 的资源释放掉，以及保存一些关键数据，但这个方法的执行速度一定要快，不然会影响到新的栈顶活动的使用。</li>
<li><code>onStop()</code>：在活动完全不可见的时候调用。如果启动的新活动是一个对话框式的活动，则 <code>onPause()</code> 会执行，而 <code>onStop()</code> 不会执行。</li>
<li><code>onDestroy()</code>：在活动被销毁之前调用。</li>
<li><code>onRestart()</code>：在活动由停止状态变为活动状态之前调用。<blockquote>
<p>以上七种方法中除了 onRestart( ) 方法，其他都是两两相对的，从而可以分为三种生存期：onCreate( ) 和 onDestory( ) 为<code>完整生存期</code>、onStart( ) 和 onStop( ) 为<code>可见生存期</code>、onResume( ) 和 onPause( ) 为<code>前台生存期</code>。<br>Activity 最多可能有四种状态，分别为：运行状态、暂停状态、停止状态、销毁状态。系统一般倾向于回收处于后两种状态的 Activity。</p>
</blockquote>
</li>
</ol>
<h4 id="Activity-的数据保存"><a href="#Activity-的数据保存" class="headerlink" title="Activity 的数据保存"></a>Activity 的数据保存</h4><p>由于 Activity 处于停止状态的时候可能被系统回收，那么当用户返回被回收的 Activity 之时会面对一个空数据的 Activity。为了避免这种情况的发生，我们可以利用 <code>onSaveInstanceState()</code> 进行数据的保存工作：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"> <span class="comment">//保存</span></div><div class="line"> <span class="meta">@Override</span></div><div class="line"> <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onSaveInstanceState</span><span class="params">(Bundle outState)</span> </span>&#123;</div><div class="line">   outState.putString(<span class="string">"data"</span>, <span class="string">"outState"</span>);</div><div class="line">   Log.i(TAG, <span class="string">"onSaveInstanceState: "</span>);</div><div class="line">   <span class="keyword">super</span>.onSaveInstanceState(outState);</div><div class="line"> &#125;</div><div class="line"> <span class="comment">//恢复</span></div><div class="line"> <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">   <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">   setContentView(R.layout.activity_first);</div><div class="line">   <span class="keyword">if</span> (savedInstanceState != <span class="keyword">null</span>) &#123;</div><div class="line">     Log.i(TAG, <span class="string">"onCreate: "</span> + savedInstanceState.getString(<span class="string">"data"</span>));</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>主动销毁 Acitivity 不会触发 <code>onSaveInstanceState()</code>，Bundle 也可以和 Intent 结合起来传递数据。</p>
</blockquote>
<h4 id="Activity-启动模式"><a href="#Activity-启动模式" class="headerlink" title="Activity 启动模式"></a>Activity 启动模式</h4><p>Activity 有下列四种启动模式：</p>
<table>
<thead>
<tr>
<th style="text-align:left">启动模式</th>
<th style="text-align:left">作用</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">standard</td>
<td style="text-align:left">每次启动活动都会创建一个活动的实例</td>
</tr>
<tr>
<td style="text-align:left">singleTop</td>
<td style="text-align:left">在启动活动的时候如果发现返回栈的栈顶已经是该活动，则会直接使用它，不会再创建新的活动实例</td>
</tr>
<tr>
<td style="text-align:left">singleTask</td>
<td style="text-align:left">在启动活动的时候如果发现返回栈中已经存在该活动，则直接使用它，并把该活动之上的所有活动统统出栈</td>
</tr>
<tr>
<td style="text-align:left">singleInstance</td>
<td style="text-align:left">在启动活动的时候，启动一个单独的返回栈来管理该活动</td>
</tr>
</tbody>
</table>
<ul>
<li>singleInstance 的意义：假设程序中有一个活动允许其他程序调用，如果我们想实现其他程序和我们的程序可以共享这个活动的实例，就需要使用 singleInstance 模式，因为在这种模式下会有一个单独的返回栈来管理这个活动，不管是哪个应用程序来访问这个活动，都共用同一个返回栈。</li>
</ul>
<h3 id="Intent-的-Flags-属性"><a href="#Intent-的-Flags-属性" class="headerlink" title="Intent 的 Flags 属性"></a>Intent 的 Flags 属性</h3><p>Flags 的作用有很多，有的 Flags 为可以设定 Activity 的启动模式，还有的 Flags 可以影响 Activity 的运行状态，比如 <code>FLAG_ACTIVITY_SINGLE_TOP</code> 和 <code>FLAG_ACTIVITY_CLEAR_TOP</code>。<br>常用的 Flags 如下：</p>
<table>
<thead>
<tr>
<th>Flags</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>FLAG_ACTIVITY_NEW_TASK</td>
<td>When using this flag, if a task is already running for the activity you are now starting, then a new activity will not be started; instead, the current task will simply be brought to the front of the screen with the state it was last in.</td>
</tr>
<tr>
<td>FLAG_ACTIVITY_CLEAR_TOP</td>
<td>设置该标志之后的 Activity，当启动 Activity 时，如果该 Activity 已经存在任务栈中，则不在创建新的实例，并且位于该 Activity 之上的 Activity都需要出栈<br>一般配合 FLAG_ACTIVITY_NEW_TASK 进行使用</td>
</tr>
<tr>
<td>FLAG_ACTIVITY_SINGLE_TOP</td>
<td>设置 Activity 的启动模式为 singleTop</td>
</tr>
<tr>
<td>FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS</td>
<td>具有该标志的 Activity 不会出现在历史 Activity 的列表中</td>
</tr>
<tr>
<td>FLAG_ACTIVITY_LAUNCH_ADJACENT</td>
<td>此标志仅用于分屏多窗口模式，新的活动将显示在上一个 Activity 的附近<br>需要与 FLAG_ACTIVITY_NEW_TASK 结合使用。 另外，如果要创建现有活动的新实例，则应同时设置 FLAG_ACTIVITY_MULTIPLE_TASK</td>
</tr>
<tr>
<td>FLAG_ACTIVITY_NEW_DOCUMENT</td>
<td>该标志用于在一个以目标 Activity 为栈顶的新任务栈中打开文档</td>
</tr>
</tbody>
</table>
<ul>
<li><code>FLAG_ACTIVITY_NEW_TASK</code>：设置此状态，记住以下原则，首先会查找是否存在和被启动的 Activity 具有相同的亲和性的任务栈（即 taskAffinity，注意同一个应用程序中的 activity 的亲和性在没有修改的情况下是一样的），如果有，则直接把这个栈整体移动到前台，并保持栈中的状态不变，即栈中的 activity 顺序不变，如果没有，则新建一个栈来存放被启动的 activity。</li>
<li><code>FLAG_ACTIVITY_LAUNCH_ADJACENT</code>：测试发现在分屏模式下在启动目标 Activity 时，如果没有设置 <code>FLAG_ACTIVITY_MULTIPLE_TASK</code> ，那么当目标 Activity 已经存在于任务栈中，将不会进入分屏模式。</li>
<li><code>FLAG_ACTIVITY_NEW_DOCUMENT</code>： 当单独使用时，它相当于指定 <code>documentLaunchMode =“intoExisting”</code>。当与 <code>FLAG_ACTIVITY_MULTIPLE_TASK</code> 一起使用时，它等同于指定 <code>documentLaunchMode =“always”</code>。</li>
</ul>
<h3 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h3><h4 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h4><p>Intent 的 <code>putExtra()</code> 方法中所支持的数据类型是有限的，当需要传递一些自定义对象的时候，就需要用到序列化了。</p>
<h4 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h4><p>使用 Intent 来传递对象通常有两种实现方式：</p>
<ol>
<li><p>Serializable</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</div><div class="line">    </div><div class="line"> <span class="keyword">private</span> String name;</div><div class="line"> <span class="keyword">private</span> <span class="keyword">int</span> age;</div><div class="line">    </div><div class="line"> <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line">   <span class="keyword">return</span> name;</div><div class="line"> &#125;</div><div class="line">    </div><div class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</div><div class="line">   <span class="keyword">return</span> age;</div><div class="line"> &#125;</div><div class="line">    </div><div class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">   <span class="keyword">this</span>.name = name;</div><div class="line"> &#125;</div><div class="line">    </div><div class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</div><div class="line">   <span class="keyword">this</span>.age = age;</div><div class="line"> &#125;</div><div class="line">&#125;</div><div class="line">    </div><div class="line"><span class="comment">//MainActivity 中</span></div><div class="line">Person person = <span class="keyword">new</span> Person();</div><div class="line">person.setAge(<span class="number">13</span>);</div><div class="line">person.setName(<span class="string">"data"</span>);</div><div class="line">Intent intent = <span class="keyword">new</span> Intent(MainActivity.<span class="keyword">this</span>, SecondActivity.class);</div><div class="line">intent.putExtra(<span class="string">"data_person"</span>, person);</div><div class="line">startActivity(intent);</div><div class="line"><span class="comment">//SecondActivity 中</span></div><div class="line">Person person = (Person) getIntent().getParcelableExtra(<span class="string">"data_person"</span>);</div><div class="line">Log.i(<span class="string">"SecondActivity"</span>, <span class="string">"onCreate: "</span> + person.getName());</div></pre></td></tr></table></figure>
<blockquote>
<p>首先创建了一个 Person 类去实现 Serializable 接口，这样所有的 Person 对象就都是可序列化的了，然后在 MainActivity 中创建了一个 Person 对象，然后将对象传入 SecondActivity 中去，在 SecondActivity 中用 <code>getParcelableExtra()</code> 来获取对象。</p>
</blockquote>
</li>
<li><p>Parcelable</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">implements</span> <span class="title">Parcelable</span> </span>&#123;</div><div class="line">    </div><div class="line"> ...</div><div class="line">    </div><div class="line"> <span class="meta">@Override</span></div><div class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">describeContents</span><span class="params">()</span> </span>&#123;</div><div class="line">   <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line"> &#125;</div><div class="line">    </div><div class="line"> <span class="meta">@Override</span></div><div class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">writeToParcel</span><span class="params">(Parcel dest, <span class="keyword">int</span> flags)</span> </span>&#123;</div><div class="line">     dest.writeString(name);</div><div class="line">     dest.writeInt(age);</div><div class="line"> &#125;</div><div class="line">    </div><div class="line"> <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Parcelable.Creator&lt;Person&gt; CREATOR = <span class="keyword">new</span> Creator&lt;Person&gt;() &#123;</div><div class="line">     <span class="meta">@Override</span></div><div class="line">     <span class="function"><span class="keyword">public</span> Person <span class="title">createFromParcel</span><span class="params">(Parcel source)</span> </span>&#123;</div><div class="line">         Person person = <span class="keyword">new</span> Person();</div><div class="line">         person.name = source.readString();</div><div class="line">         person.age = source.readInt();</div><div class="line">         <span class="keyword">return</span> person;</div><div class="line">     &#125;</div><div class="line">    </div><div class="line">     <span class="meta">@Override</span></div><div class="line">     <span class="keyword">public</span> Person[] newArray(<span class="keyword">int</span> size) &#123;</div><div class="line">         <span class="keyword">return</span> <span class="keyword">new</span> Person[size];</div><div class="line">     &#125;</div><div class="line"> &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>Person 类实现了 Parcelable 接口用于序列化，提供了一个名为 CREATOR 的常量用于反序列化。<code>createFromParcel()</code> 和 <code>writeToParcel()</code> 的顺序需要一致。采用 Parcelable 方式进行序列化，获取对象的方法变为 <code>getParcelableExtra()</code>。</p>
</blockquote>
</li>
</ol>
<h3 id="实用技巧"><a href="#实用技巧" class="headerlink" title="实用技巧"></a>实用技巧</h3><ol>
<li><p>知晓当前是在哪一个活动</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(@Nullable Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">    Log.d(<span class="string">"onCreate: "</span>, getClass().getSimpleName());</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>创建一个 BaseActivity，然后让其他 Activity 继承 BaseAcitivty，那么当启动活动时就会 logcat 中打印出相应的信息。</p>
</blockquote>
</li>
<li><p>随时随地退出程序</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ActivityCollector</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="keyword">private</span> <span class="keyword">static</span> List&lt;Activity&gt; activities = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">addActivity</span><span class="params">(Activity activity)</span> </span>&#123;</div><div class="line">    activities.add(activity);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">removeActivity</span><span class="params">(Activity activity)</span> </span>&#123;</div><div class="line">    activities.remove(activity);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">finishAll</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">for</span> (Activity activity : activities) &#123;</div><div class="line">      <span class="keyword">if</span> (!activity.isFinishing()) &#123;</div><div class="line">        activity.finish();</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>创建一个活动的管理类，在活动的 <code>onCreate()</code> 中调用 <code>addActivity()</code> 方法保存创建的活动，在 <code>onDestroy()</code> 中调用 <code>removeActivity()</code> 方法移除马上要销毁的活动。如果需要随时随地退出程序则只需要调用 <code>finishAll()</code>。</p>
</blockquote>
</li>
<li><p>启动活动的最佳写法</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">actionStart</span><span class="params">(Context context, String param1, String param2)</span> </span>&#123;</div><div class="line">  Intent intent = <span class="keyword">new</span> Intent(context, SecondActivity.class);</div><div class="line">  intent.putExtra(<span class="string">"param1"</span>, param1);</div><div class="line">  intent.putExtra(<span class="string">"param2"</span>, param2);</div><div class="line">  context.startActivity(intent);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>当活动中需要用到一些参数之时，可以采用如上方式去启动活动。那么当其他人来启动活动的时候将会非常方便。</p>
</blockquote>
</li>
</ol>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Activity&quot;&gt;&lt;a href=&quot;#Activity&quot; class=&quot;headerlink&quot; title=&quot;Activity&quot;&gt;&lt;/a&gt;Activity&lt;/h3&gt;&lt;p&gt;主要内容：&lt;br&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/-u4OYyZZzSb8/WQh2MXvWjiI/AAAAAAAAAOA/NifbHzkgMfc5NvV-goL-QS_dR3Jt2qgLACHM/I/Activity&quot; alt=&quot;Activity导图&quot;&gt;
    
    </summary>
    
      <category term="Android 学习" scheme="http://www.rookieyang.cn/categories/Android-%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Android" scheme="http://www.rookieyang.cn/tags/Android/"/>
    
      <category term="四大组件" scheme="http://www.rookieyang.cn/tags/%E5%9B%9B%E5%A4%A7%E7%BB%84%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>Python 下 json 模块</title>
    <link href="http://www.rookieyang.cn/2017/04/20/Python%E4%B8%8BJson%E6%A8%A1%E5%9D%97/"/>
    <id>http://www.rookieyang.cn/2017/04/20/Python下Json模块/</id>
    <published>2017-04-20T12:12:47.000Z</published>
    <updated>2017-04-20T12:28:01.000Z</updated>
    
    <content type="html"><![CDATA[<p>Python 下的 json 模块主要有 4 个函数：<a id="more"></a></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#dict 转成 str </span></div><div class="line">json.dump()</div><div class="line"><span class="comment">#将 json 数据保存到文件</span></div><div class="line">json.dumps()</div><div class="line"><span class="comment">#str 转成 dict </span></div><div class="line">json.load()</div><div class="line"><span class="comment">#从文件中读取 json 数据</span></div><div class="line">json.loads()</div></pre></td></tr></table></figure>
<p>将 Json 数据写入文件：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">try</span>:</div><div class="line">  data_result_file = <span class="string">"data_result.json"</span></div><div class="line">  <span class="keyword">with</span> open(data_result_file, <span class="string">'w'</span>) <span class="keyword">as</span> f:</div><div class="line">      data_json = json.loads(results.data)</div><div class="line">      json.dump(data_json, f, indent=<span class="number">4</span>)</div><div class="line"><span class="keyword">except</span> IOError:</div><div class="line">  print(<span class="string">"文件不存在"</span>)</div></pre></td></tr></table></figure>
<p>由于 <code>json.dump()</code> 产生的是 <code>str</code> 对象，不是 <code>bytes</code> 对象，所以写入时文件权限不能设置为 <code>wb</code>，否则会出现 <code>TypeError: a bytes-like object is required, not ‘str&#39;</code>。</p>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Python 下的 json 模块主要有 4 个函数：
    
    </summary>
    
      <category term="Python 学习" scheme="http://www.rookieyang.cn/categories/Python-%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="问题记录" scheme="http://www.rookieyang.cn/tags/%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/"/>
    
      <category term="Python" scheme="http://www.rookieyang.cn/tags/Python/"/>
    
      <category term="Json" scheme="http://www.rookieyang.cn/tags/Json/"/>
    
  </entry>
  
  <entry>
    <title>BootStrap-FileInput 的基本使用</title>
    <link href="http://www.rookieyang.cn/2017/04/20/bootstrap-fileinput%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"/>
    <id>http://www.rookieyang.cn/2017/04/20/bootstrap-fileinput的基本使用/</id>
    <published>2017-04-20T11:13:02.000Z</published>
    <updated>2017-04-20T12:11:43.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="安装与引入"><a href="#安装与引入" class="headerlink" title="安装与引入"></a>安装与引入</h4><p>在引入 File Input 之前首先需要下载下列文件：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">bootstrap-fileinput/css/fileinput.min.css</div><div class="line">bootstrap-fileinput/js/fileinput_locale_zh.js</div><div class="line">bootstrap-fileinput/js/fileinput.min.js</div></pre></td></tr></table></figure>
<p>上述文件可以在 <a href="https://github.com/kartik-v/bootstrap-fileinput" target="_blank" rel="external">File Input 的项目地址</a>找到。<a id="more"></a><br>在下载好之后就需要添加如下代码进行引入：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;link href=<span class="string">"/static/css/fileinput.min.css"</span> rel=<span class="string">"stylesheet"</span>&gt;</div><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"/static/js/fileinput.min.js"</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div><div class="line">&lt;script src=<span class="string">"/static/js/fileinput-zh.js"</span> type=<span class="string">"text/javascript"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div></pre></td></tr></table></figure>
<h4 id="File-Input-的使用"><a href="#File-Input-的使用" class="headerlink" title="File Input 的使用"></a>File Input 的使用</h4><p>首先需要在页面添加一个 File Input 控件：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"form-group"</span>&gt;</div><div class="line">    <span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"import_file"</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">multiple</span> <span class="attr">class</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"userfile"</span></span></span></div><div class="line">           <span class="attr">data-overwrite-initial</span>=<span class="string">"false"</span> <span class="attr">data-min-file-count</span>=<span class="string">"1"</span>&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li><code>data-min-file-count</code> 可以设定最少上传的文件数</li>
</ul>
<p>在添加完之后就需要对控件进行初始化：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">"#import_file"</span>).fileinput(&#123;</div><div class="line">    <span class="attr">uploadUrl</span>: <span class="string">"/upload_file"</span>, <span class="comment">//设置上传的地址</span></div><div class="line">    allowedFileExtensions: [<span class="string">'xls'</span>, <span class="string">'xlsx'</span>], <span class="comment">//设置允许上传的文件格式</span></div><div class="line">    overwriteInitial: <span class="literal">false</span>,</div><div class="line">    <span class="attr">language</span>: <span class="string">'zh'</span>, <span class="comment">//设置语言</span></div><div class="line">    maxFileSize: <span class="number">6000</span>,</div><div class="line">    <span class="attr">maxFilesNum</span>: <span class="number">10</span>, <span class="comment">//允许上传的最大文件数</span></div><div class="line">    uploadAsync: <span class="literal">true</span>, <span class="comment">//默认异步上传</span></div><div class="line">    <span class="comment">//allowedFileTypes: ['image', 'video', 'flash'],</span></div><div class="line">    allowedPreviewTypes: <span class="literal">null</span>,</div><div class="line">    <span class="attr">previewFileIconSettings</span>: &#123;</div><div class="line">        <span class="string">'xls'</span>: <span class="string">'&lt;i class="fa fa-file-excel-o text-success"&gt;&lt;/i&gt;'</span></div><div class="line">    &#125;, <span class="comment">//预览文件的图标设置</span></div><div class="line">    previewFileExtSettings: &#123;</div><div class="line">        <span class="string">'xls'</span>: <span class="function"><span class="keyword">function</span> (<span class="params">ext</span>) </span>&#123;</div><div class="line">            <span class="keyword">return</span> ext.match(<span class="regexp">/(xls|xlsx)$/i</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;, <span class="comment">//xls 和 xlsx 使用同一预览</span></div><div class="line">    slugCallback: <span class="function"><span class="keyword">function</span> (<span class="params">filename</span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> filename.replace(<span class="string">'('</span>, <span class="string">'_'</span>).replace(<span class="string">']'</span>, <span class="string">'_'</span>);</div><div class="line">    &#125; <span class="comment">//使用回调功能将文件名转换成处理之后的文件名。</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>后台处理：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@app.route('/upload_file', methods=['POST'])</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">upload_file</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        file = request.files.get(<span class="string">'userfile'</span>)</div><div class="line">        save_file_name = file.filename</div><div class="line">        file.save(save_file_name)</div><div class="line">    <span class="keyword">except</span> KeyError:</div><div class="line">        <span class="keyword">return</span> []</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">return</span> jsonify(&#123;<span class="string">'info'</span>: <span class="string">"上传成功"</span>&#125;)</div></pre></td></tr></table></figure>
<ul>
<li>这里对上传的 Excel 文件进行了保存，返回上传成功的信息。</li>
</ul>
<h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h4><ol>
<li>在对 Excel 文件进行预览图标设置之前，如果通过按钮选择文件而不是拖拽，则会出现由预览文件所导致卡顿，在将 Excel 文件的预览设置为图标之后解决。</li>
<li>从后端直接返回字符串出现错误，改为返回 Json 格式数据后解决。</li>
</ol>
<hr>
<h4 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h4><ol>
<li><a href="http://plugins.krajee.com/file-input" target="_blank" rel="external">File Input 开发文档</a></li>
<li><a href="http://plugins.krajee.com/file-basic-usage-demo" target="_blank" rel="external">File Input Demo</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;安装与引入&quot;&gt;&lt;a href=&quot;#安装与引入&quot; class=&quot;headerlink&quot; title=&quot;安装与引入&quot;&gt;&lt;/a&gt;安装与引入&lt;/h4&gt;&lt;p&gt;在引入 File Input 之前首先需要下载下列文件：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;bootstrap-fileinput/css/fileinput.min.css&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;bootstrap-fileinput/js/fileinput_locale_zh.js&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;bootstrap-fileinput/js/fileinput.min.js&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;上述文件可以在 &lt;a href=&quot;https://github.com/kartik-v/bootstrap-fileinput&quot;&gt;File Input 的项目地址&lt;/a&gt;找到。
    
    </summary>
    
      <category term="Android 学习" scheme="http://www.rookieyang.cn/categories/Android-%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="问题记录" scheme="http://www.rookieyang.cn/tags/%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/"/>
    
      <category term="BootStrap" scheme="http://www.rookieyang.cn/tags/BootStrap/"/>
    
      <category term="前端" scheme="http://www.rookieyang.cn/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>Android 自定义 View 和 ViewGroup 简要总结</title>
    <link href="http://www.rookieyang.cn/2017/04/17/Android%E8%87%AA%E5%AE%9A%E4%B9%89View%E5%92%8CViewGroup%E7%AE%80%E8%A6%81%E6%80%BB%E7%BB%93/"/>
    <id>http://www.rookieyang.cn/2017/04/17/Android自定义View和ViewGroup简要总结/</id>
    <published>2017-04-17T11:47:43.000Z</published>
    <updated>2017-04-17T13:57:32.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="主要方法及作用"><a href="#主要方法及作用" class="headerlink" title="主要方法及作用"></a>主要方法及作用</h4><ol>
<li>自定义 ViewGroup 主要涉及的方法如下：<ul>
<li><code>onMeasure()</code> 计算 childView 的测量值以及模式，以及设置自己的宽和高。</li>
<li><code>onLayout()</code> 对所有 childView 进行定位。</li>
</ul>
</li>
<li>自定义 View 主要涉及的方法如下：<ul>
<li><code>onMeasure()</code> 测量 View 的宽和高。</li>
<li><code>onDraw()</code> 将 View 绘制到屏幕上。</li>
</ul>
</li>
</ol>
<a id="more"></a>
<h4 id="测量模式"><a href="#测量模式" class="headerlink" title="测量模式"></a>测量模式</h4><p><code>onMeasure()</code> 过程和测量模式相关，而测量模式分为三种：</p>
<ol>
<li>UNSPECIFIED：父容器不对 View 有任何限制，要多大给多大。这种情况一般用于系统内部。</li>
<li>EXACTLY：父容器已经检测出 View 所需要的精确大小，这个时候 View 的最终大小就是 SpecSize 所指定的值。它对应 LayoutParams 中的 mactch_parent 和具体数值这两种模式。</li>
<li>AT_MOST 父容器指定了一个可用大小即 SpecSize，View 的大小不能大于这个值，具体值看不同 View 的具体实现。它对应于 LayoutParams 中的 wrap_content。</li>
</ol>
<h4 id="LayoutParams-和-generateLayoutParams"><a href="#LayoutParams-和-generateLayoutParams" class="headerlink" title="LayoutParams 和 generateLayoutParams"></a>LayoutParams 和 generateLayoutParams</h4><p>LayoutParams的官方文档解释如下：</p>
<blockquote>
<p>1.LayoutParams are used by views to tell their parents how they want to be laid out.<br>– LayoutParams 是 View 用来告诉它的父控件如何放置自己的。</p>
<p>2.The base LayoutParams class just describes how big the view wants to be for both width and height.<br>– 基类 LayoutParams（也就是 ViewGroup.LayoutParams）仅仅描述了这个 View 想要的宽度和高度。</p>
<p>3.There are subclasses of LayoutParams for different subclasses of ViewGroup.<br>– 不同 ViewGroup 的继承类对应着不同的 ViewGroup.LayoutParams 的子类。</p>
</blockquote>
<p>generateLayoutParams官方文档解释如下：</p>
<blockquote>
<p>Returns a new set of layout parameters based on the supplied attributes set.<br>– 根据提供的属性集返回一组新的布局参数。</p>
</blockquote>
<p>在 <code>addView()</code> 执行的过程中，如果 <code>checkLayoutParams()</code> 检测到传递过来的 <code>LayoutParams</code> 不是对应布局的 LayoutParam，则会通过 <code>generateLayoutParams()</code> 根据你传递的 LayoutParams 的属性构造一个对应布局的 LayoutParams。</p>
<hr>
<h4 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h4><ol>
<li><a href="http://blog.csdn.net/lmj623565791/article/details/38339817/" target="_blank" rel="external"> Android 手把手教您自定义ViewGroup（一）</a></li>
<li><a href="http://www.jianshu.com/p/2a938e598ec8" target="_blank" rel="external">自定义控件知识储备-LayoutParams的那些事</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;主要方法及作用&quot;&gt;&lt;a href=&quot;#主要方法及作用&quot; class=&quot;headerlink&quot; title=&quot;主要方法及作用&quot;&gt;&lt;/a&gt;主要方法及作用&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;自定义 ViewGroup 主要涉及的方法如下：&lt;ul&gt;
&lt;li&gt;&lt;code&gt;onMeasure()&lt;/code&gt; 计算 childView 的测量值以及模式，以及设置自己的宽和高。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;onLayout()&lt;/code&gt; 对所有 childView 进行定位。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;自定义 View 主要涉及的方法如下：&lt;ul&gt;
&lt;li&gt;&lt;code&gt;onMeasure()&lt;/code&gt; 测量 View 的宽和高。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;onDraw()&lt;/code&gt; 将 View 绘制到屏幕上。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="Android 学习" scheme="http://www.rookieyang.cn/categories/Android-%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Android" scheme="http://www.rookieyang.cn/tags/Android/"/>
    
      <category term="问题记录" scheme="http://www.rookieyang.cn/tags/%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>Android 中 View 的构造函数浅解</title>
    <link href="http://www.rookieyang.cn/2017/04/17/Android%E4%B8%ADView%E7%9A%84%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E6%B5%85%E8%A7%A3/"/>
    <id>http://www.rookieyang.cn/2017/04/17/Android中View的构造函数浅解/</id>
    <published>2017-04-17T02:51:23.000Z</published>
    <updated>2017-04-17T11:45:08.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="构造函数的调用时机"><a href="#构造函数的调用时机" class="headerlink" title="构造函数的调用时机"></a>构造函数的调用时机</h4><p>在自定义 View 的过程当中，不可避免的需要接触到 View 的构造函数，目前 View 具有四个构造函数，分别如下：<a id="more"></a></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">View</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">      /...../</div><div class="line">    &#125;</div><div class="line">    </div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">View</span><span class="params">(Context context, @Nullable AttributeSet attrs)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>(context, attrs, <span class="number">0</span>);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">View</span><span class="params">(Context context, @Nullable AttributeSet attrs, <span class="keyword">int</span> defStyleAttr)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>(context, attrs, defStyleAttr, <span class="number">0</span>);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">View</span><span class="params">(Context context, @Nullable AttributeSet attrs, <span class="keyword">int</span> defStyleAttr, <span class="keyword">int</span> defStyleRes)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>(context);</div><div class="line">        /...../</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<ul>
<li><code>defStyleAttr</code> 当前主题中的一个属性，其中包含对为视图提供默认值的样式资源的引用。 可以为0，不寻找默认值。</li>
<li><code>defStyleRes</code> 为视图提供默认值的样式资源的资源标识符，仅在 <code>defStyleAttr</code> 为0或在主题中找不到时使用。可以为0，不寻找默认值。</li>
</ul>
<p>第一个构造函数源码的解释如下：</p>
<blockquote>
<p>Simple constructor to use when creating a view from code.</p>
</blockquote>
<p>也就是说当在代码中创建 View 的时候会调用第一个构造函数。</p>
<p>第二个构造函数的源码解释如下：</p>
<blockquote>
<p>Constructor that is called when inflating a view from XML. This is called when a view is being constructed from an XML file, supplying attributes that were specified in the XML file. This version uses a default style of 0, so the only attribute values applied are those in the Context’s Theme and the given AttributeSet.</p>
</blockquote>
<p>也就是说当在 XML 文件中插入 View 的时候会调用第二个构造函数，并且会应用 Context 的主题以及在 XML 中给定的属性值。</p>
<p>第三个和第四个构造函数的源码解释分别如下：</p>
<blockquote>
<p>Perform inflation from XML and apply a class-specific base style from a theme attribute.</p>
<blockquote>
<p>This constructor of View allows subclasses to use their own base style when they are inflating.</p>
</blockquote>
<p>For example, a Button class’s constructor would call this version of the super class constructor and supply <code>R.attr.buttonStyle</code> for <var>defStyleAttr</var>; this (in particular its background) as well as the Button class’s attributes.</p>
</blockquote>
<hr>
<blockquote>
<p>Perform inflation from XML and apply a class-specific base style from a theme attribute or style resource. </p>
<blockquote>
<p>This constructor of View allows subclasses to use their own base style when they are inflating.</p>
</blockquote>
</blockquote>
<p>也就是说两个构造函数共同的作用是允许 View 应用自己的基础 style，那么当我们需要为 View 设置 style 的时候就可以选择去调用这两个构造函数当中的一个，调用方式一般如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">Button</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</div><div class="line">   <span class="keyword">this</span>(context, attrs, com.android.internal.R.attr.buttonStyle);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">Button</span><span class="params">(Context context, AttributeSet attrs, <span class="keyword">int</span> defStyleAttr)</span> </span>&#123;</div><div class="line">   <span class="keyword">this</span>(context, attrs, defStyleAttr, <span class="number">0</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="defStyleAttr-和-defStyleRes-的联系"><a href="#defStyleAttr-和-defStyleRes-的联系" class="headerlink" title="defStyleAttr 和 defStyleRes 的联系"></a>defStyleAttr 和 defStyleRes 的联系</h4><p>接下来的问题是这两者的区别在哪里？由于这两者都用于设置 style，而 style 里面是属性的集合，所以这里需要先了解 View 设置属性的方式，一般来说有如下五种方式：</p>
<ol>
<li>XML 中直接声明相关属性值</li>
<li>XML 中 引入 style</li>
<li>defStyleAttr</li>
<li>defStyleRes</li>
<li>theme中直接指定</li>
</ol>
<p>既然有五种方式，那么当同时应用的时候就涉及到了优先级的问题。为了了解优先级的问题，首先我们需要在 <code>attrs.xml</code> 文件中写入如下代码：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">declare-styleable</span> <span class="attr">name</span>=<span class="string">"DefAttrs"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"attr_1"</span> <span class="attr">format</span>=<span class="string">"string"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"attr_2"</span> <span class="attr">format</span>=<span class="string">"string"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"attr_3"</span> <span class="attr">format</span>=<span class="string">"string"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"attr_4"</span> <span class="attr">format</span>=<span class="string">"string"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">declare-styleable</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"defStyleAttr"</span> <span class="attr">format</span>=<span class="string">"reference"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>这里定义了四个格式为 string 的属性用于测试，定义了一个名为 <code>defStyleAttr</code> 引用。</li>
<li><p>通过 <code>declare-styleable</code> 可以为每个属性在 <code>R</code> 文件里自动生成一个 int[]，这样就可以很方便的用 <code>R.styleable.*</code> 来进行使用，当然定义的属性也可以不放在 <code>declare-styleable</code> 中，但是使用的时候就需要通过如下代码：</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span>[] attrs = &#123;R.attr.attr_1,R.attr_2&#125;;</div><div class="line">TypedArray typedArray = context.obtainStyledAttributes(set,attrs);</div></pre></td></tr></table></figure>
</li>
</ul>
<p>在创建了自定义的属性之后，还需要创建一些 style，在 <code>style.xml</code> 文件中写入如下代码：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="comment">&lt;!-- Base application theme. --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"AppTheme"</span> <span class="attr">parent</span>=<span class="string">"Theme.AppCompat.Light.DarkActionBar"</span>&gt;</span><span class="xml"></span></div><div class="line">    <span class="comment">&lt;!-- Customize your theme here. --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"colorPrimary"</span>&gt;</span>@color/colorPrimary<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"colorPrimaryDark"</span>&gt;</span>@color/colorPrimaryDark<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"colorAccent"</span>&gt;</span>@color/colorAccent<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!--Theme 直接指定--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"attr_1"</span>&gt;</span>theme_one<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"attr_2"</span>&gt;</span>theme_two<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"attr_3"</span>&gt;</span>theme_three<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"attr_4"</span>&gt;</span>theme_four<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!--defStyleAttr--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"defStyleAttr"</span>&gt;</span>@style/def_style_attr<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="comment">&lt;!--xml 中引入的 style --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"xml_style"</span>&gt;</span><span class="xml"></span></div><div class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"attr_1"</span>&gt;</span>xml_style_one<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"attr_2"</span>&gt;</span>xml_style_two<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="comment">&lt;!--defStyleAttr 引用的 style--&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"def_style_attr"</span>&gt;</span><span class="xml"></span></div><div class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"attr_1"</span>&gt;</span>def_style_one<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"attr_2"</span>&gt;</span>def_style_two<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"attr_3"</span>&gt;</span>def_style_three<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="comment">&lt;!--defStyleRes--&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"def_style_res"</span>&gt;</span><span class="xml"></span></div><div class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"attr_1"</span>&gt;</span>def_style_res_one<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"attr_2"</span>&gt;</span>def_style_res_two<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"attr_3"</span>&gt;</span>def_style_res_three<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"attr_4"</span>&gt;</span>def_style_res_four<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></div></pre></td></tr></table></figure>
<p>上述代码添加了四种 style，对应为 View 设置属性的方式中的后四种，在添加了 style 之后，我们还需要应用 style，所以需要先创建一个如下的自定义 View：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyView</span> <span class="keyword">extends</span> <span class="title">TextView</span></span>&#123;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="title">MyView</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>(context);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="title">MyView</span><span class="params">(Context context, @Nullable AttributeSet attrs)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>(context, attrs, R.attr.defStyleAttr);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="title">MyView</span><span class="params">(Context context, @Nullable AttributeSet attrs, <span class="keyword">int</span> defStyleAttr)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>(context, attrs, defStyleAttr,R.attr.defStyleAttr);</div><div class="line">    parse(context, attrs, defStyleAttr);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="meta">@TargetApi</span>(VERSION_CODES.LOLLIPOP)</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="title">MyView</span><span class="params">(Context context, @Nullable AttributeSet attrs, <span class="keyword">int</span> defStyleAttr, <span class="keyword">int</span> defStyleRes)</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>(context, attrs, defStyleAttr, defStyleRes);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">parse</span><span class="params">(Context context, AttributeSet attrs, <span class="keyword">int</span> defStyleAttr)</span> </span>&#123;</div><div class="line">    TypedArray typedArray = context.obtainStyledAttributes(attrs, R.styleable.DefAttrs, defStyleAttr, R.style.def_style_res);</div><div class="line">    String one = typedArray.getString(R.styleable.DefAttrs_attr_1);</div><div class="line">    String two = typedArray.getString(R.styleable.DefAttrs_attr_2);</div><div class="line">    String three = typedArray.getString(R.styleable.DefAttrs_attr_3);</div><div class="line">    String four = typedArray.getString(R.styleable.DefAttrs_attr_4);</div><div class="line"></div><div class="line">    log(<span class="string">"one = "</span> + one);</div><div class="line">    log(<span class="string">"two = "</span> + two);</div><div class="line">    log(<span class="string">"three = "</span> + three);</div><div class="line">    log(<span class="string">"four = "</span> + four);</div><div class="line"></div><div class="line">    typedArray.recycle();</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">log</span><span class="params">(String msg)</span> </span>&#123;</div><div class="line">    Log.i(<span class="string">"MyView"</span>, msg);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>第二个构造函数中显式调用了第三个构造函数，并设置 defStyleAttr 参数值为 <code>R.attr.defStyleAttr</code>。</li>
<li><code>parse()</code> 获取四个属性值并进行打印。</li>
</ul>
<p>创建完自定义 View 之后，现在需要在 XML 文件中添加自定义的View：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">android.support.constraint.ConstraintLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">  <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></div><div class="line">  <span class="attr">xmlns:test</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></div><div class="line">  <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">  <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">  <span class="attr">tools:context</span>=<span class="string">"com.rookieyang.test.MainActivity"</span>&gt;</div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">com.rookieyang.test.MyView</span></span></div><div class="line">    <span class="attr">test:attr_1</span>=<span class="string">"xml_attr_attr1"</span></div><div class="line">    <span class="attr">style</span>=<span class="string">"@style/xml_style"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span> /&gt;</div><div class="line"></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">android.support.constraint.ConstraintLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li><code>test:attr_1=&quot;xml_attr_attr1&quot;</code> XML 中直接指定 attr_1 属性值。</li>
<li><code>style=&quot;@style/xml_style&quot;</code> XML 中引入 style。</li>
</ul>
<h4 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h4><p>在完成上述步骤之后就可以运行，运行之后的输出如下：<br><img src="http://i.imgur.com/WqaWtza.png" alt="运行结果一"><br>上述代码中，XML 中直接声明 <code>attr_1</code> 属性值为 xml_attr_attr1，XML 中 引入的 style  中给  <code>attr_1，attr_2</code> 赋值为 xml_style_one，xml_style_two，defStyleAttr 给 <code>attr_1，attr_2，attr_3</code> 赋值为 <code>def_style_one，def_style_two，def_style_three</code>，defStyleRes 和 Theme 也分别为四个属性进行了赋值，而根据输出的结果在优先级上我们很容易得到以下结论：</p>
<blockquote>
<p>XML 中直接声明相关属性值 &gt; XML 中 引入 style &gt; defStyleAttr &gt; theme中直接指定</p>
<p>defStyleAttr &gt; defStyleRes</p>
</blockquote>
<p>从第一部分可以知道由于 defStyleAttr 的存在，defStyleRes 没有生效，所以 defStyleRes 和 theme中直接指定的优先级还不能进行判断，这个时候需要将 <code>style.xml</code> 文件中的下列代码进行注释：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;item name="defStyleAttr"&gt;@style/def_style_attr&lt;/item&gt;</div></pre></td></tr></table></figure>
<p>或者将自定义 View 中调用第三个构造函数的代码做如下修改：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//将第三个参数更改为 0</span></div><div class="line"><span class="keyword">this</span>(context, attrs, defStyleAttr,<span class="number">0</span>);</div></pre></td></tr></table></figure>
<p>修改之后运行能得到如下输出：<br><img src="http://i.imgur.com/Gp9V1qi.png" alt="运行结果二"><br>可以看到当 defStyleAttr 不存在后 defStyleRes 开始生效，并且优先级要高于theme中直接指定。<br>所以最终结论如下：</p>
<blockquote>
<p>XML 中直接声明相关属性值 &gt; XML 中 引入 style &gt; defStyleAttr &gt; defStyleRes &gt; theme中直接指定<br>仅在 <code>defStyleAttr</code> 为0或在主题中找不到时，<code>defStyleRes</code> 生效。</p>
</blockquote>
<hr>
<h4 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h4><ol>
<li><a href="http://www.jianshu.com/p/08be3c08c576" target="_blank" rel="external">深度解析View构造函数中的参数defStyleAttr</a></li>
<li><a href="http://blog.csdn.net/zhao123h/article/details/52210732" target="_blank" rel="external">Android View 四个构造函数详解</a></li>
<li><a href="http://www.jianshu.com/p/61b79e7f88fc" target="_blank" rel="external">深入理解Android 自定义attr Style styleable以及其应用</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;构造函数的调用时机&quot;&gt;&lt;a href=&quot;#构造函数的调用时机&quot; class=&quot;headerlink&quot; title=&quot;构造函数的调用时机&quot;&gt;&lt;/a&gt;构造函数的调用时机&lt;/h4&gt;&lt;p&gt;在自定义 View 的过程当中，不可避免的需要接触到 View 的构造函数，目前 View 具有四个构造函数，分别如下：
    
    </summary>
    
      <category term="Android 学习" scheme="http://www.rookieyang.cn/categories/Android-%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Android" scheme="http://www.rookieyang.cn/tags/Android/"/>
    
      <category term="问题记录" scheme="http://www.rookieyang.cn/tags/%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>getWidth() 方法和 getMeasureWidth() 方法的区别</title>
    <link href="http://www.rookieyang.cn/2017/04/16/getWidth()%E6%96%B9%E6%B3%95%E5%92%8CgetMeasureWidth()%E6%96%B9%E6%B3%95%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>http://www.rookieyang.cn/2017/04/16/getWidth()方法和getMeasureWidth()方法的区别/</id>
    <published>2017-04-16T02:05:07.000Z</published>
    <updated>2017-04-16T02:20:20.000Z</updated>
    
    <content type="html"><![CDATA[<p>首先 <code>getMeasureWidth()</code> 方法在 <code>measure()</code> 过程结束后就可以获取到了，而 <code>getWidth()</code> 方法要在 <code>layout()</code> 过程结束后才能获取到。另外  <code>getMeasureWidth()</code> 方法中的值是通过 <code>setMeasuredDimension()</code> 方法来进行设置的，而 <code>getWidth()</code> 方法中的值则是通过视图右边的坐标减去左边的坐标计算出来的。<a id="more"></a></p>
<p>观察 SimpleLayout 中 <code>onLayout()</code> 方法的代码，这里给子视图的 <code>layout()</code> 方法传入的四个参数分别是 0，0，childView.getMeasuredWidth() 和 childView.getMeasuredHeight() ，因此 <code>getWidth()</code> 方法得到的值就是 childView.getMeasuredWidth() - 0 = childView.getMeasuredWidth()，所以此时 <code>getWidth()</code> 方法和 <code>getMeasuredWidth()</code> 得到的值就是相同的。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span>  </div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onLayout</span><span class="params">(<span class="keyword">boolean</span> changed, <span class="keyword">int</span> l, <span class="keyword">int</span> t, <span class="keyword">int</span> r, <span class="keyword">int</span> b)</span> </span>&#123;  </div><div class="line">   <span class="keyword">if</span> (getChildCount() &gt; <span class="number">0</span>) &#123;  </div><div class="line">       View childView = getChildAt(<span class="number">0</span>);  </div><div class="line">       childView.layout(<span class="number">0</span>, <span class="number">0</span>, childView.getMeasuredWidth(), childView.getMeasuredHeight());  </div><div class="line">   &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>但如果你将 <code>onLayout()</code> 方法中的代码进行如下修改：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span>  </div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onLayout</span><span class="params">(<span class="keyword">boolean</span> changed, <span class="keyword">int</span> l, <span class="keyword">int</span> t, <span class="keyword">int</span> r, <span class="keyword">int</span> b)</span> </span>&#123;  </div><div class="line">    <span class="keyword">if</span> (getChildCount() &gt; <span class="number">0</span>) &#123;  </div><div class="line">        View childView = getChildAt(<span class="number">0</span>);  </div><div class="line">        childView.layout(<span class="number">0</span>, <span class="number">0</span>, <span class="number">200</span>, <span class="number">200</span>);  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这样 <code>getWidth()</code> 方法得到的值就是 200 - 0 = 200，不会再和 <code>getMeasuredWidth()</code> 的值相同了。当然这种做法充分不尊重 <code>measure()</code> 过程计算出的结果，通常情况下是不推荐这么写的。 <code>getHeight()</code> 与 <code>getMeasureHeight()</code> 方法之间的关系同上，就不再重复分析了。</p>
<hr>
<h4 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h4><p><a href="http://blog.csdn.net/guolin_blog/article/details/16330267" target="_blank" rel="external">Android视图绘制流程完全解析，带你一步步深入了解View(二)</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;首先 &lt;code&gt;getMeasureWidth()&lt;/code&gt; 方法在 &lt;code&gt;measure()&lt;/code&gt; 过程结束后就可以获取到了，而 &lt;code&gt;getWidth()&lt;/code&gt; 方法要在 &lt;code&gt;layout()&lt;/code&gt; 过程结束后才能获取到。另外  &lt;code&gt;getMeasureWidth()&lt;/code&gt; 方法中的值是通过 &lt;code&gt;setMeasuredDimension()&lt;/code&gt; 方法来进行设置的，而 &lt;code&gt;getWidth()&lt;/code&gt; 方法中的值则是通过视图右边的坐标减去左边的坐标计算出来的。
    
    </summary>
    
      <category term="Android 学习" scheme="http://www.rookieyang.cn/categories/Android-%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Android" scheme="http://www.rookieyang.cn/tags/Android/"/>
    
      <category term="问题记录" scheme="http://www.rookieyang.cn/tags/%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>d3.js 绘制柱形图</title>
    <link href="http://www.rookieyang.cn/2017/04/14/d3-js%E7%BB%98%E5%88%B6%E6%9F%B1%E5%BD%A2%E5%9B%BE/"/>
    <id>http://www.rookieyang.cn/2017/04/14/d3-js绘制柱形图/</id>
    <published>2017-04-14T15:35:28.000Z</published>
    <updated>2017-04-15T07:13:38.000Z</updated>
    
    <content type="html"><![CDATA[<p>在<a href="/2017/04/13/d3-js绘制力导向图/" title="d3.js 绘制力导向图">d3.js 绘制力导向图</a>中已经说明了如何绘制力导向图以及数据更新。本次将说明如何绘制带坐标轴的柱形图。<a id="more"></a></p>
<h4 id="确定初始数据"><a href="#确定初始数据" class="headerlink" title="确定初始数据"></a>确定初始数据</h4><p>初始数据如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> nodes = [&#123;<span class="string">'label'</span>: <span class="string">'Sort'</span>, <span class="string">'title'</span>: <span class="string">'lslamic'</span>&#125;, &#123;</div><div class="line">        <span class="string">'label'</span>: <span class="string">'GOODS'</span>,</div><div class="line">        <span class="string">'title'</span>: <span class="string">'VINTAGE OLD HAND MADE BEAUTY SILVER BROOCH PIN RED ENAMEL LEAF SIAM STERLING'</span></div><div class="line">    &#125;, &#123;<span class="string">'label'</span>: <span class="string">'Website'</span>, <span class="string">'title'</span>: <span class="string">'ebay'</span>&#125;, &#123;<span class="string">'label'</span>: <span class="string">'Sort'</span>, <span class="string">'title'</span>: <span class="string">'Antiques'</span>&#125;, &#123;</div><div class="line">        <span class="string">'label'</span>: <span class="string">'Sort'</span>,</div><div class="line">        <span class="string">'title'</span>: <span class="string">'Baby'</span></div><div class="line">    &#125;, &#123;<span class="string">'label'</span>: <span class="string">'Sort'</span>, <span class="string">'title'</span>: <span class="string">'Books'</span>&#125;, &#123;<span class="string">'label'</span>: <span class="string">'Sort'</span>, <span class="string">'title'</span>: <span class="string">'Business &amp; Industrial'</span>&#125;, &#123;</div><div class="line">        <span class="string">'label'</span>: <span class="string">'Sort'</span>,</div><div class="line">        <span class="string">'title'</span>: <span class="string">'Cameras &amp; Photo'</span></div><div class="line">    &#125;, &#123;<span class="string">'label'</span>: <span class="string">'Sort'</span>, <span class="string">'title'</span>: <span class="string">'Cell Phones &amp; Accessories'</span>&#125;, &#123;</div><div class="line">        <span class="string">'label'</span>: <span class="string">'Sort'</span>,</div><div class="line">        <span class="string">'title'</span>: <span class="string">'Clothing, Shoes &amp; Accessories'</span></div><div class="line">    &#125;, &#123;<span class="string">'label'</span>: <span class="string">'Sort'</span>, <span class="string">'title'</span>: <span class="string">'Coins &amp; Paper Money'</span>&#125;, &#123;<span class="string">'label'</span>: <span class="string">'Sort'</span>, <span class="string">'title'</span>: <span class="string">'Collectibles'</span>&#125;, &#123;</div><div class="line">        <span class="string">'label'</span>: <span class="string">'Sort'</span>,</div><div class="line">        <span class="string">'title'</span>: <span class="string">'Computers Tablets &amp; Networking'</span></div><div class="line">    &#125;, &#123;<span class="string">'label'</span>: <span class="string">'Sort'</span>, <span class="string">'title'</span>: <span class="string">'Consumer Electronics'</span>&#125;, &#123;<span class="string">'label'</span>: <span class="string">'Sort'</span>, <span class="string">'title'</span>: <span class="string">'Crafts'</span>&#125;, &#123;</div><div class="line">        <span class="string">'label'</span>: <span class="string">'Sort'</span>,</div><div class="line">        <span class="string">'title'</span>: <span class="string">'eBay Motors'</span></div><div class="line">    &#125;, &#123;<span class="string">'label'</span>: <span class="string">'Sort'</span>, <span class="string">'title'</span>: <span class="string">'Everything Else'</span>&#125;, &#123;<span class="string">'label'</span>: <span class="string">'Sort'</span>, <span class="string">'title'</span>: <span class="string">'Health &amp; Beauty'</span>&#125;, &#123;</div><div class="line">        <span class="string">'label'</span>: <span class="string">'Sort'</span>,</div><div class="line">        <span class="string">'title'</span>: <span class="string">'Home &amp; Garden'</span></div><div class="line">    &#125;, &#123;<span class="string">'label'</span>: <span class="string">'Sort'</span>, <span class="string">'title'</span>: <span class="string">'Jewelry &amp; Watches'</span>&#125;, &#123;</div><div class="line">        <span class="string">'label'</span>: <span class="string">'Sort'</span>,</div><div class="line">        <span class="string">'title'</span>: <span class="string">'Musical Instruments &amp; Gear'</span></div><div class="line">    &#125;, &#123;<span class="string">'label'</span>: <span class="string">'Sort'</span>, <span class="string">'title'</span>: <span class="string">'Sporting Goods'</span>&#125;, &#123;<span class="string">'label'</span>: <span class="string">'Sort'</span>, <span class="string">'title'</span>: <span class="string">'Antiquities'</span>&#125;, &#123;</div><div class="line">        <span class="string">'label'</span>: <span class="string">'Sort'</span>,</div><div class="line">        <span class="string">'title'</span>: <span class="string">'Architectural &amp; Garden'</span></div><div class="line">    &#125;, &#123;<span class="string">'label'</span>: <span class="string">'Sort'</span>, <span class="string">'title'</span>: <span class="string">'Asian Antiques'</span>&#125;, &#123;<span class="string">'label'</span>: <span class="string">'Sort'</span>, <span class="string">'title'</span>: <span class="string">'Decorative Arts'</span>&#125;, &#123;</div><div class="line">        <span class="string">'label'</span>: <span class="string">'Sort'</span>,</div><div class="line">        <span class="string">'title'</span>: <span class="string">'Linens &amp; Textiles (Pre-1930)'</span></div><div class="line">    &#125;, &#123;<span class="string">'label'</span>: <span class="string">'Sort'</span>, <span class="string">'title'</span>: <span class="string">'Maritime'</span>&#125;, &#123;<span class="string">'label'</span>: <span class="string">'Sort'</span>, <span class="string">'title'</span>: <span class="string">'Periods &amp; Styles'</span>&#125;, &#123;</div><div class="line">        <span class="string">'label'</span>: <span class="string">'Sort'</span>,</div><div class="line">        <span class="string">'title'</span>: <span class="string">'Primitives'</span></div><div class="line">    &#125;, &#123;<span class="string">'label'</span>: <span class="string">'Sort'</span>, <span class="string">'title'</span>: <span class="string">'Science &amp; Medicine (Pre-1930)'</span>&#125;, &#123;<span class="string">'label'</span>: <span class="string">'Sort'</span>, <span class="string">'title'</span>: <span class="string">'Silver'</span>&#125;];</div></pre></td></tr></table></figure>
<p>初始数据中每个数据具有不同的类别，本次的目的是统计不同类别的数据出现次数并进行绘制，数据处理代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> dataset = &#123;&#125;;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; nodes.length; i++) &#123;</div><div class="line">  <span class="keyword">var</span> node = nodes[i];</div><div class="line">  dataset[node[<span class="string">'label'</span>]] = <span class="number">0</span>;</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; nodes.length; j++) &#123;</div><div class="line">      <span class="keyword">if</span> (nodes[j][<span class="string">'label'</span>] == node[<span class="string">'label'</span>])</div><div class="line">          dataset[node[<span class="string">'label'</span>]] += <span class="number">1</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> data = [];</div><div class="line"><span class="keyword">var</span> labels = [];</div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> dataset) &#123;</div><div class="line">  data.push(dataset[key]);</div><div class="line">  labels.push(key);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><code>dataset</code> 用于将数据进行分类统计。</li>
<li><code>data</code> 保存每个分类出现次数。</li>
<li><code>labels</code> 保存分类名称，作为 x 轴的刻度。</li>
</ul>
<h4 id="创建-SVG"><a href="#创建-SVG" class="headerlink" title="创建 SVG"></a>创建 SVG</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> width = <span class="number">420</span>, height = <span class="number">420</span>;</div><div class="line"><span class="keyword">var</span> svg = d3.select(<span class="string">"#graph"</span>).append(<span class="string">"svg"</span>)</div><div class="line">        .attr(<span class="string">"width"</span>, width)</div><div class="line">        .attr(<span class="string">"height"</span>, height);</div></pre></td></tr></table></figure>
<h4 id="绘制坐标轴"><a href="#绘制坐标轴" class="headerlink" title="绘制坐标轴"></a>绘制坐标轴</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> padding = &#123;<span class="attr">top</span>: <span class="number">20</span>, <span class="attr">right</span>: <span class="number">20</span>, <span class="attr">bottom</span>: <span class="number">20</span>, <span class="attr">left</span>: <span class="number">30</span>&#125;;</div><div class="line"><span class="keyword">var</span> xAxisWidth = width - <span class="number">2</span> * padding.left;</div><div class="line"><span class="keyword">var</span> yAxiWidth = height - <span class="number">2</span> * padding.bottom;</div><div class="line"><span class="keyword">var</span> xAxisScale = d3.scale.ordinal()</div><div class="line">            .domain(d3.range(labels.length))</div><div class="line">            .rangeRoundBands([<span class="number">0</span>, xAxisWidth]);</div><div class="line"></div><div class="line"><span class="keyword">var</span> yAxisScale = d3.scale.linear()</div><div class="line">    .domain([<span class="number">0</span>, d3.max(data)])</div><div class="line">    .range([yAxiWidth, <span class="number">0</span>]);</div><div class="line"></div><div class="line"><span class="keyword">var</span> xAxis = d3.svg.axis()</div><div class="line">    .scale(xAxisScale)</div><div class="line">    .orient(<span class="string">"bottom"</span>)</div><div class="line">    .tickFormat(<span class="function"><span class="keyword">function</span> (<span class="params">d</span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> labels[d];</div><div class="line">    &#125;);</div><div class="line"></div><div class="line"><span class="keyword">var</span> yAxis = d3.svg.axis()</div><div class="line">    .scale(yAxisScale)</div><div class="line">    .orient(<span class="string">"left"</span>);</div><div class="line"></div><div class="line">svg.append(<span class="string">"g"</span>)</div><div class="line">    .attr(<span class="string">"class"</span>, <span class="string">"axis"</span>)</div><div class="line">    .attr(<span class="string">"transform"</span>, <span class="string">"translate("</span> + padding.left + <span class="string">","</span> +</div><div class="line">        (height - padding.bottom) + <span class="string">")"</span>)</div><div class="line">    .call(xAxis);</div><div class="line"></div><div class="line">svg.append(<span class="string">"g"</span>)</div><div class="line">    .attr(<span class="string">"class"</span>, <span class="string">"axis"</span>)</div><div class="line">    .attr(<span class="string">"transform"</span>, <span class="string">"translate("</span> + padding.left + <span class="string">","</span> +</div><div class="line">        (height - yAxiWidth - padding.bottom) + <span class="string">")"</span>)</div><div class="line">    .call(yAxis);</div></pre></td></tr></table></figure>
<ul>
<li><code>xAxisWidth，yAxiWidth</code> 代表 x 轴和 y 轴的长度。</li>
<li><code>padding</code> x 轴和 y 轴的外边距。</li>
<li><code>xAxisScale，yAxisScale</code> x 轴和 y 轴的比例尺。</li>
<li><code>ordinal().domain()</code> 设定或获取定义域。</li>
<li><code>ordinal.rangeRoundBands(interval[, padding[, outerPadding]])</code> 接收一个连续的区间，然后根据定义域中离散值的数量将其分段，分段结果会取整。</li>
<li><code>tickFormat()</code> 用于设定文字格式的刻度。</li>
</ul>
<p>这样添加之后的坐标轴，样式会比较丑，所以还需要给坐标轴增加如下样式：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&lt;style&gt;</div><div class="line">    .axis path,</div><div class="line">    .axis line &#123;</div><div class="line">        fill: none;</div><div class="line">        stroke: black;</div><div class="line">        shape-rendering: crispEdges;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    .axis text &#123;</div><div class="line">        font-family: sans-serif;</div><div class="line">        font-size: 11px;</div><div class="line">    &#125;</div><div class="line">&lt;/style&gt;</div></pre></td></tr></table></figure>
<h4 id="绘制矩形"><a href="#绘制矩形" class="headerlink" title="绘制矩形"></a>绘制矩形</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//0.05 用于设置矩形之间的间隔，由于 rangeRoundBands 选取的范围远小于 xAxisWidth，所以矩形之间的间隔远大于 0.05，该参数未起作用。</span></div><div class="line"><span class="keyword">var</span> xScale = d3.scale.ordinal()</div><div class="line">            .domain(d3.range(labels.length))</div><div class="line">            .rangeRoundBands([<span class="number">0</span>, <span class="number">100</span>], <span class="number">0.05</span>);</div><div class="line"></div><div class="line"><span class="keyword">var</span> yScale = d3.scale.linear()</div><div class="line">    .domain([<span class="number">0</span>, d3.max(data)])</div><div class="line">    .range([<span class="number">0</span>, yAxiWidth]);</div><div class="line"></div><div class="line"><span class="keyword">var</span> rect = svg.selectAll(<span class="string">"rect"</span>)</div><div class="line">    .data(data);</div><div class="line"></div><div class="line">rect.enter()</div><div class="line">    .append(<span class="string">"rect"</span>)</div><div class="line">    .attr(<span class="string">"x"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">d, i</span>) </span>&#123;</div><div class="line">        x = xAxisWidth / (<span class="number">2</span> * labels.length) * (<span class="number">2</span> * i + <span class="number">1</span>)</div><div class="line">            - xScale.rangeBand() / <span class="number">2</span> + padding.left;</div><div class="line">        <span class="keyword">return</span> x;</div><div class="line">    &#125;)</div><div class="line">    .attr(<span class="string">"y"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">d, i</span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> height - padding.bottom - yScale(d);</div><div class="line">    &#125;)</div><div class="line">    .attr(<span class="string">"width"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">d, i</span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> xScale.rangeBand();</div><div class="line">    &#125;)</div><div class="line">    .attr(<span class="string">"height"</span>, yScale)</div><div class="line">    .attr(<span class="string">"fill"</span>, <span class="string">"steelblue"</span>);</div></pre></td></tr></table></figure>
<ul>
<li><code>xScale</code> 用于控制矩形宽度， <code>yScale</code> 用于控制矩形高度。这样做可以使得矩形的宽度和高度自由伸缩。</li>
</ul>
<h4 id="给矩形增加文字描述"><a href="#给矩形增加文字描述" class="headerlink" title="给矩形增加文字描述"></a>给矩形增加文字描述</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> text = svg.selectAll(<span class="string">"text"</span>)</div><div class="line">            .data(data);</div><div class="line">text.enter().append(<span class="string">"text"</span>)</div><div class="line">            .attr(<span class="string">"x"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">d, i</span>) </span>&#123;</div><div class="line">                x = xAxisWidth / (<span class="number">2</span> * labels.length) * (<span class="number">2</span> * i + <span class="number">1</span>)</div><div class="line">                    - xScale.rangeBand() / <span class="number">2</span> + padding.left;</div><div class="line">                <span class="keyword">return</span> x;</div><div class="line">            &#125;)</div><div class="line">            .attr(<span class="string">"y"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">d, i</span>) </span>&#123;</div><div class="line">                <span class="keyword">return</span> height - padding.bottom - yScale(d);</div><div class="line">            &#125;)</div><div class="line">            .attr(<span class="string">"dx"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">d, i</span>) </span>&#123;</div><div class="line">                <span class="keyword">return</span> xScale.rangeBand() / <span class="number">4</span>;</div><div class="line">            &#125;)</div><div class="line">            .attr(<span class="string">"dy"</span>, <span class="number">-2</span>)</div><div class="line">            .attr(<span class="string">"text-anchor"</span>, <span class="string">"begin"</span>)</div><div class="line">            .attr(<span class="string">"font-size"</span>, <span class="number">14</span>)</div><div class="line">            .attr(<span class="string">"fill"</span>, <span class="string">"#000000"</span>)</div><div class="line">            .text(<span class="function"><span class="keyword">function</span> (<span class="params">d, i</span>) </span>&#123;</div><div class="line">                <span class="keyword">return</span> d;</div><div class="line">            &#125;);</div></pre></td></tr></table></figure>
<ul>
<li><code>text</code> 元素的坐标是矩形的坐标，<code>dx，dy</code> 设定了方向上的偏移量。所以最终文字位于矩形正上方。</li>
</ul>
<h4 id="柱形图动画"><a href="#柱形图动画" class="headerlink" title="柱形图动画"></a>柱形图动画</h4><p>给柱形图增加动画，需要将代码修改为：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> rect = svg.selectAll(<span class="string">"rect"</span>)</div><div class="line">    .data(data);</div><div class="line">rect.enter()</div><div class="line">    .append(<span class="string">"rect"</span>)</div><div class="line">    .attr(<span class="string">"y"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">d, i</span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> height - padding.bottom;</div><div class="line">    &#125;)</div><div class="line">    .attr(<span class="string">"height"</span>, <span class="number">0</span>)</div><div class="line">    .attr(<span class="string">"fill"</span>, <span class="string">"red"</span>)</div><div class="line">    .transition()</div><div class="line">    .duration(<span class="number">3000</span>)</div><div class="line">    .ease(<span class="string">"bounce"</span>)</div><div class="line">    .delay(<span class="function"><span class="keyword">function</span> (<span class="params">d, i</span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">200</span> * i;</div><div class="line">    &#125;)</div><div class="line">    .attr(<span class="string">"x"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">d, i</span>) </span>&#123;</div><div class="line">        x = xAxisWidth / (<span class="number">2</span> * labels.length) * (<span class="number">2</span> * i + <span class="number">1</span>)</div><div class="line">            - xScale.rangeBand() / <span class="number">2</span> + padding.left;</div><div class="line">        <span class="keyword">return</span> x;</div><div class="line">    &#125;)</div><div class="line">    .attr(<span class="string">"y"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">d, i</span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> height - padding.bottom - yScale(d);</div><div class="line">    &#125;)</div><div class="line">    .attr(<span class="string">"width"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">d, i</span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> xScale.rangeBand();</div><div class="line">    &#125;)</div><div class="line">    .attr(<span class="string">"height"</span>, yScale)</div><div class="line">    .attr(<span class="string">"fill"</span>, <span class="string">"steelblue"</span>);</div></pre></td></tr></table></figure>
<ul>
<li>上述代码设置了两个 <code>fill</code> 属性，在添加了 <code>transition()</code> 之后，D3 会自动对颜色之间的值进行线性插值，最终在动画中会看到平滑的颜色变化。</li>
<li><code>duration()</code> 动画持续时间。</li>
<li><code>ease()</code> 指定转变方式，常用的转变方式有：<ul>
<li>linear  普通的线性变化。</li>
<li>circle  慢慢地到达变换的最终状态。  </li>
<li>elastic  带有弹跳的到达最终状态。</li>
<li>bounce  在最终状态处弹跳几次。</li>
</ul>
</li>
<li><code>delay()</code> 指定延时。</li>
</ul>
<h4 id="最终效果"><a href="#最终效果" class="headerlink" title="最终效果"></a>最终效果</h4><p><img src="http://i.imgur.com/4WazYv3.png" alt="柱形图效果"><br><img src="http://i.imgur.com/7fT9upS.png" alt="坐标轴"></p>
<hr>
<h4 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h4><p><a href="http://blog.csdn.net/lzhlzz/article/details/35985907" target="_blank" rel="external">如何让图表动起来</a><br><a href="https://github.com/d3/d3-3.x-api-reference/blob/master/Ordinal-Scales.md" target="_blank" rel="external">d3-3.x-api-reference</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在&lt;a href=&quot;/2017/04/13/d3-js绘制力导向图/&quot; title=&quot;d3.js 绘制力导向图&quot;&gt;d3.js 绘制力导向图&lt;/a&gt;中已经说明了如何绘制力导向图以及数据更新。本次将说明如何绘制带坐标轴的柱形图。
    
    </summary>
    
      <category term="前端" scheme="http://www.rookieyang.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="d3.js" scheme="http://www.rookieyang.cn/tags/d3-js/"/>
    
  </entry>
  
  <entry>
    <title>d3.js 绘制力导向图</title>
    <link href="http://www.rookieyang.cn/2017/04/13/d3-js%E7%BB%98%E5%88%B6%E5%8A%9B%E5%AF%BC%E5%90%91%E5%9B%BE/"/>
    <id>http://www.rookieyang.cn/2017/04/13/d3-js绘制力导向图/</id>
    <published>2017-04-13T08:41:47.000Z</published>
    <updated>2017-04-15T07:14:20.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><blockquote>
<p>D3.js是一个JavaScript库，它可以通过数据来操作文档。D3可以通过使用HTML、SVG和CSS把数据鲜活形象地展现出来。D3严格遵循Web标准，因而可以让你的程序轻松兼容现代主流浏览器并避免对特定框架的依赖。同时，它提供了强大的可视化组件，可以让使用者以数据驱动的方式去操作DOM。</p>
</blockquote>
<a id="more"></a>
<h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><p>在 HTML 文件中引入：<br><code>&lt;script src=&quot;http://d3js.org/d3.v3.min.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;</code></p>
<h4 id="确定初始数据"><a href="#确定初始数据" class="headerlink" title="确定初始数据"></a>确定初始数据</h4><p>初始数据为节点数据 nodes 和 连线数组 links，如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">var nodes = [&#123;&apos;label&apos;: &apos;Website&apos;, &apos;title&apos;: &apos;ebay&apos;&#125;, &#123;&apos;label&apos;: &apos;Sort&apos;, &apos;title&apos;: &apos;Antiques&apos;&#125;, &#123;</div><div class="line">        &apos;label&apos;: &apos;Sort&apos;,</div><div class="line">        &apos;title&apos;: &apos;Baby&apos;</div><div class="line">    &#125;, &#123;&apos;label&apos;: &apos;Sort&apos;, &apos;title&apos;: &apos;Books&apos;&#125;, &#123;&apos;label&apos;: &apos;Sort&apos;, &apos;title&apos;: &apos;Business &amp; Industrial&apos;&#125;, &#123;</div><div class="line">        &apos;label&apos;: &apos;Sort&apos;,</div><div class="line">        &apos;title&apos;: &apos;Cameras &amp; Photo&apos;</div><div class="line">    &#125;, &#123;&apos;label&apos;: &apos;Sort&apos;, &apos;title&apos;: &apos;Cell Phones &amp; Accessories&apos;&#125;, &#123;</div><div class="line">        &apos;label&apos;: &apos;Sort&apos;,</div><div class="line">        &apos;title&apos;: &apos;Clothing, Shoes &amp; Accessories&apos;</div><div class="line">    &#125;, &#123;&apos;label&apos;: &apos;Sort&apos;, &apos;title&apos;: &apos;Coins &amp; Paper Money&apos;&#125;, &#123;&apos;label&apos;: &apos;Sort&apos;, &apos;title&apos;: &apos;Collectibles&apos;&#125;, &#123;</div><div class="line">        &apos;label&apos;: &apos;Sort&apos;,</div><div class="line">        &apos;title&apos;: &apos;Computers Tablets &amp; Networking&apos;</div><div class="line">    &#125;, &#123;&apos;label&apos;: &apos;Sort&apos;, &apos;title&apos;: &apos;Consumer Electronics&apos;&#125;, &#123;&apos;label&apos;: &apos;Sort&apos;, &apos;title&apos;: &apos;Crafts&apos;&#125;, &#123;</div><div class="line">        &apos;label&apos;: &apos;Sort&apos;,</div><div class="line">        &apos;title&apos;: &apos;eBay Motors&apos;</div><div class="line">    &#125;, &#123;&apos;label&apos;: &apos;Sort&apos;, &apos;title&apos;: &apos;Everything Else&apos;&#125;, &#123;&apos;label&apos;: &apos;Sort&apos;, &apos;title&apos;: &apos;Health &amp; Beauty&apos;&#125;, &#123;</div><div class="line">        &apos;label&apos;: &apos;Sort&apos;,</div><div class="line">        &apos;title&apos;: &apos;Home &amp; Garden&apos;</div><div class="line">    &#125;, &#123;&apos;label&apos;: &apos;Sort&apos;, &apos;title&apos;: &apos;Jewelry &amp; Watches&apos;&#125;, &#123;</div><div class="line">        &apos;label&apos;: &apos;Sort&apos;,</div><div class="line">        &apos;title&apos;: &apos;Musical Instruments &amp; Gear&apos;</div><div class="line">    &#125;, &#123;&apos;label&apos;: &apos;Sort&apos;, &apos;title&apos;: &apos;Sporting Goods&apos;&#125;];</div><div class="line">    var links = [&#123;&apos;source&apos;: 1, &apos;target&apos;: 0&#125;, &#123;&apos;source&apos;: 2, &apos;target&apos;: 0&#125;, &#123;&apos;source&apos;: 3, &apos;target&apos;: 0&#125;, &#123;</div><div class="line">        &apos;source&apos;: 4,</div><div class="line">        &apos;target&apos;: 0</div><div class="line">    &#125;, &#123;&apos;source&apos;: 5, &apos;target&apos;: 0&#125;, &#123;&apos;source&apos;: 6, &apos;target&apos;: 0&#125;, &#123;&apos;source&apos;: 7, &apos;target&apos;: 0&#125;, &#123;</div><div class="line">        &apos;source&apos;: 8,</div><div class="line">        &apos;target&apos;: 0</div><div class="line">    &#125;, &#123;&apos;source&apos;: 9, &apos;target&apos;: 0&#125;, &#123;&apos;source&apos;: 10, &apos;target&apos;: 0&#125;, &#123;&apos;source&apos;: 11, &apos;target&apos;: 0&#125;, &#123;</div><div class="line">        &apos;source&apos;: 12,</div><div class="line">        &apos;target&apos;: 0</div><div class="line">    &#125;, &#123;&apos;source&apos;: 13, &apos;target&apos;: 0&#125;, &#123;&apos;source&apos;: 14, &apos;target&apos;: 0&#125;, &#123;&apos;source&apos;: 15, &apos;target&apos;: 0&#125;, &#123;</div><div class="line">        &apos;source&apos;: 16,</div><div class="line">        &apos;target&apos;: 0</div><div class="line">    &#125;, &#123;&apos;source&apos;: 17, &apos;target&apos;: 0&#125;, &#123;&apos;source&apos;: 18, &apos;target&apos;: 0&#125;, &#123;&apos;source&apos;: 19, &apos;target&apos;: 0&#125;];</div></pre></td></tr></table></figure>
<h4 id="创建布局"><a href="#创建布局" class="headerlink" title="创建布局"></a>创建布局</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> force = d3.layout.force()</div><div class="line">   .charge(<span class="number">-300</span>).linkDistance(<span class="number">130</span>).size([width, height]);</div></pre></td></tr></table></figure>
<ul>
<li><code>d3.layout.force()</code> 创建一个力导向图布局。</li>
<li><code>charge()</code> 设定节点的电荷数，负数则排斥，正数则吸引。</li>
<li><code>linkDistance()</code> 设置连线的距离。</li>
<li><code>size([x, y])</code> 设置力导向图的作用范围，用于指定重力中心为（x/2，y/2），所有节点的初始位置限定为 [0,x] 和 [0,y] 之间。</li>
</ul>
<h4 id="创建-SVG"><a href="#创建-SVG" class="headerlink" title="创建 SVG"></a>创建 SVG</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> svg = d3.select(<span class="string">"#graph"</span>).append(<span class="string">"svg"</span>)</div><div class="line">        .attr(<span class="string">"width"</span>, <span class="string">"100%"</span>).attr(<span class="string">"height"</span>, <span class="string">"380px"</span>);</div></pre></td></tr></table></figure>
<ul>
<li><code>append()</code> 用于添加元素</li>
<li>设置 <code>svg</code> 的长宽</li>
</ul>
<h4 id="转换数据和绘制"><a href="#转换数据和绘制" class="headerlink" title="转换数据和绘制"></a>转换数据和绘制</h4><ul>
<li><p>设定节点数组和连线数组之后开启布局计算</p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">force.nodes(nodes).links(links).start();</div></pre></td></tr></table></figure>
</li>
<li><p>绘制<br>  绑定数组 nodes 和 links，分别添加节点的元素 <circle></circle> 和连线的元素 <line></line>。另外，还要添加文字元素 <text>。各元素的 CSS 样式分别为：node，link，nodeText。代码如下：</text></p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> link = svg.selectAll(<span class="string">".link"</span>)</div><div class="line">            .data(links);</div><div class="line">link.enter()</div><div class="line">            .insert(<span class="string">"line"</span>, <span class="string">".link"</span>)</div><div class="line">            .attr(<span class="string">"class"</span>, <span class="string">"link"</span>);</div><div class="line"><span class="keyword">var</span> node = svg.selectAll(<span class="string">".node"</span>)</div><div class="line">            .data(nodes);</div><div class="line">node.enter()</div><div class="line">            .append(<span class="string">"circle"</span>)</div><div class="line">            .attr(<span class="string">"class"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">d</span>) </span>&#123;</div><div class="line">                <span class="keyword">return</span> <span class="string">"node "</span> + d.label</div><div class="line">            &#125;)</div><div class="line">            .attr(<span class="string">"r"</span>, <span class="number">25</span>)</div><div class="line">            .call(force.drag);</div><div class="line"><span class="keyword">var</span> text = svg.selectAll(<span class="string">".nodeText"</span>)</div><div class="line">.data(nodes);</div><div class="line">text.enter()</div><div class="line">    .append(<span class="string">"text"</span>)</div><div class="line">    .attr(<span class="string">"class"</span>, <span class="string">"nodeText"</span>)</div><div class="line">    .attr(<span class="string">"x"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">d</span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> d.x;</div><div class="line">    &#125;)</div><div class="line">    .attr(<span class="string">"font-size"</span>, <span class="string">"10px"</span>)</div><div class="line">    .attr(<span class="string">"text-anchor"</span>, <span class="string">"middle"</span>)</div><div class="line">    .attr(<span class="string">"dy"</span>, <span class="string">".3em"</span>)</div><div class="line">    .attr(<span class="string">"y"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">d</span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> d.y;</div><div class="line">    &#125;).text(<span class="function"><span class="keyword">function</span> (<span class="params">d</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> act_title;</div><div class="line">    <span class="keyword">if</span> (d.title.length &gt; <span class="number">8</span>) &#123;</div><div class="line">        act_title = d.title.substring(<span class="number">0</span>, <span class="number">8</span>) + <span class="string">"..."</span>;</div><div class="line">        <span class="keyword">return</span> act_title;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">return</span> d.title;</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<ul>
<li>节点的选择集调用了 <code>call(force.drag)</code>，可以让节点支持鼠标拖拽。</li>
<li><p>连线的选择集调用了 <code>insert(&quot;line&quot;, &quot;.link&quot;)</code>，可以确保力导向图进行更新（移除节点后增加节点）之后连线不会覆盖在节点上。</p></li></ul><p></p>
<p>在拖动节点之后，图形元素的坐标会发生变化，所以需要设置一个监听器进行更新，代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">force.on(<span class="string">"tick"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">            link.attr(<span class="string">"x1"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">d</span>) </span>&#123;</div><div class="line">                <span class="keyword">return</span> d.source.x;</div><div class="line">            &#125;)</div><div class="line">                .attr(<span class="string">"y1"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">d</span>) </span>&#123;</div><div class="line">                    <span class="keyword">return</span> d.source.y;</div><div class="line">                &#125;)</div><div class="line">                .attr(<span class="string">"x2"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">d</span>) </span>&#123;</div><div class="line">                    <span class="keyword">return</span> d.target.x;</div><div class="line">                &#125;)</div><div class="line">                .attr(<span class="string">"y2"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">d</span>) </span>&#123;</div><div class="line">                    <span class="keyword">return</span> d.target.y;</div><div class="line">                &#125;);</div><div class="line"></div><div class="line">            node.attr(<span class="string">"transform"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">d</span>) </span>&#123;</div><div class="line">                <span class="keyword">return</span> <span class="string">"translate("</span> + d.x + <span class="string">","</span> + d.y + <span class="string">")"</span>;</div><div class="line">            &#125;);</div><div class="line"></div><div class="line"></div><div class="line">            text.attr(<span class="string">"x"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">d</span>) </span>&#123;</div><div class="line">                <span class="keyword">return</span> d.x;</div><div class="line">            &#125;)</div><div class="line">                .attr(<span class="string">"y"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">d</span>) </span>&#123;</div><div class="line">                    <span class="keyword">return</span> d.y;</div><div class="line">                &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<ul>
<li><code>force.on()</code> 可为三种事件设定监听器，start，tick，end。其中，start 是刚开始运动，end 是运动停止，tick 是表示运动的每一步。</li>
<li><p>选择集 node，link，text 上都绑定了数据，当每一次 tick 事件发生时，被绑定的数据被更新，<code>function(d)</code> 中的 d 也都更新了。</p></li></ul><br>增加样式：<p></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">&lt;style type=&quot;text/css&quot;&gt;</div><div class="line">    .node &#123;</div><div class="line">        stroke: #222;</div><div class="line">        stroke-width: 1.5px;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    .link &#123;</div><div class="line">        stroke: #707071;</div><div class="line">        stroke-opacity: .6;</div><div class="line">        stroke-width: 1px;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    .node.Website &#123;</div><div class="line">        fill: #ff756e;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    .node.Sort &#123;</div><div class="line">        fill: #de9bf9;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    .nodeText &#123;</div><div class="line">        fill: #ffffff</div><div class="line">    &#125;</div><div class="line">&lt;/style&gt;</div></pre></td></tr></table></figure>
<p>效果：<br><img src="https://lh3.googleusercontent.com/-A6JxI-hyuww/WPCrNFzHKfI/AAAAAAAAANM/g8eygh02iYo/I/%25255BUNSET%25255D.png" alt="效果"></p>
</li>
</ul>




<h4 id="绘制箭头和添加文字"><a href="#绘制箭头和添加文字" class="headerlink" title="绘制箭头和添加文字"></a>绘制箭头和添加文字</h4><ul>
<li><p>绘制箭头需要用到 SVG 中的标记（marker）。标记 <marker> 写在 <defs></defs> 中，defs 用于定义可重复利用的元素。定义箭头代码如下：</marker></p>
 <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> defs = svg.append(<span class="string">"defs"</span>);</div><div class="line"><span class="keyword">var</span> arrowMarker = defs.append(<span class="string">"marker"</span>)</div><div class="line">  .attr(<span class="string">"id"</span>, <span class="string">"arrow"</span>)</div><div class="line">  .attr(<span class="string">"markerUnits"</span>, <span class="string">"strokeWidth"</span>)</div><div class="line">  .attr(<span class="string">"markerWidth"</span>, <span class="string">"10"</span>)</div><div class="line">  .attr(<span class="string">"markerHeight"</span>, <span class="string">"10"</span>)</div><div class="line">  .attr(<span class="string">"viewBox"</span>, <span class="string">"-0 -5 10 10"</span>)</div><div class="line">  .attr(<span class="string">"refX"</span>, <span class="string">"35"</span>)</div><div class="line">  .attr(<span class="string">"refY"</span>, <span class="string">"0"</span>)</div><div class="line">  .attr(<span class="string">"orient"</span>, <span class="string">"auto"</span>);</div><div class="line"></div><div class="line"><span class="keyword">var</span> arrow_path = <span class="string">'M 0,-5 L 10 ,0 L 0,5 L5,0 L0,-5'</span>;</div><div class="line"></div><div class="line">arrowMarker.append(<span class="string">"path"</span>)</div><div class="line">  .attr(<span class="string">"d"</span>, arrow_path)</div><div class="line">  .attr(<span class="string">"fill"</span>, <span class="string">"#a6a6a6"</span>);</div></pre></td></tr></table></figure>
<ul>
<li><code>refX, refY</code> 指的是图形元素和 <code>marker</code> 连接的位置坐标，这里圆的半径设置为 25，箭头的顶点到底部垂直距离为 10，所以设置为（35，0）则箭头的顶端刚好在圆上。</li>
<li><code>markerUnits</code> 标记大小的基准，有两个值，即 strokeWidth（线的宽度）和 userSpaceOnUse（线前端的大小）。</li>
<li><code>markerWidth，markerHeight</code> 标识的大小。</li>
<li><code>orient</code> 绘制方向，可设定为 auto（自动确认方向和角度值）。</li>
<li><code>id</code> 标识的 id 号。</li>
<li>粉红色框是 viewBox 范围，黑色为 arrow_path 的轨迹：<br><img src="http://i.imgur.com/eqY9I4G.png" alt="arro"></li>
<li><code>link.attr(&#39;marker-end&#39;, &#39;url(#arrow)&#39;);</code>可以为连接线添加箭头。</li>
</ul>
</li>
<li><p>为连接线增加文字，首先需要定义 <path></path> 确定文字放在连接线路径上，再定义 <text>，之后在 <text> 添加 <textpath> 引用路径，代码如下：</textpath></text></text></p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//定义文字路径</span></div><div class="line"><span class="keyword">var</span> linkpaths = svg.selectAll(<span class="string">".linkpath"</span>)</div><div class="line">            .data(links_data);</div><div class="line">linkpaths.enter()</div><div class="line">            .append(<span class="string">'path'</span>)</div><div class="line">            .attr(<span class="string">'d'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">d</span>) </span>&#123;</div><div class="line">                <span class="keyword">return</span> <span class="string">'M '</span> + d.source.x + <span class="string">' '</span> + d.source.y + <span class="string">' L '</span> + d.target.x + <span class="string">' '</span> + d.target.y</div><div class="line">            &#125;)</div><div class="line">            .attr(<span class="string">'class'</span>, <span class="string">'linkpath'</span>)</div><div class="line">            .attr(<span class="string">'fill-opacity'</span>, <span class="number">0</span>)</div><div class="line">            .attr(<span class="string">'stroke-opacity'</span>, <span class="number">0</span>)</div><div class="line">            .attr(<span class="string">'fill'</span>, <span class="string">'#ffffff'</span>)</div><div class="line">            .attr(<span class="string">'stroke'</span>, <span class="string">'red'</span>)</div><div class="line">            .attr(<span class="string">'id'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">d, i</span>) </span>&#123;</div><div class="line">                <span class="keyword">return</span> <span class="string">'linkpath'</span> + i;</div><div class="line">            &#125;)</div><div class="line">            .style(<span class="string">"pointer-events"</span>, <span class="string">"none"</span>);</div><div class="line"></div><div class="line"><span class="comment">//定义 &lt;text&gt;            </span></div><div class="line"><span class="keyword">var</span> linklabels = svg.selectAll(<span class="string">".linklabel"</span>)</div><div class="line">        .data(links_data);</div><div class="line">linklabels.enter()</div><div class="line">        .append(<span class="string">'text'</span>)</div><div class="line">        .style(<span class="string">"pointer-events"</span>, <span class="string">"none"</span>)</div><div class="line">        .attr(<span class="string">'class'</span>, <span class="string">'linklabel'</span>)</div><div class="line">        .attr(<span class="string">'id'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">d, i</span>) </span>&#123;</div><div class="line">            <span class="keyword">return</span> <span class="string">'linklabel'</span> + i;</div><div class="line">        &#125;)</div><div class="line">        .attr(<span class="string">'dx'</span>, <span class="number">50</span>)</div><div class="line">        .attr(<span class="string">'dy'</span>, <span class="number">0</span>)</div><div class="line">        .attr(<span class="string">'font-size'</span>, <span class="number">5</span>)</div><div class="line">        .attr(<span class="string">'fill'</span>, <span class="string">'#aaa'</span>);</div><div class="line"><span class="comment">//增加 &lt;textPath&gt; 引用 path</span></div><div class="line">linklabels.append(<span class="string">'textPath'</span>)</div><div class="line">        .attr(<span class="string">'xlink:href'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">d, i</span>) </span>&#123;</div><div class="line">            <span class="keyword">return</span> <span class="string">'#linkpath'</span> + i</div><div class="line">        &#125;)</div><div class="line">        .style(<span class="string">"pointer-events"</span>, <span class="string">"none"</span>)</div><div class="line">        .text(<span class="function"><span class="keyword">function</span> (<span class="params">d, i</span>) </span>&#123;</div><div class="line">            <span class="keyword">return</span> <span class="string">'BELONG'</span>;</div><div class="line">        &#125;);</div></pre></td></tr></table></figure>
<ul>
<li><code>pointer-events</code> 设置为 none 则不在接收鼠标事件，设置为 all 则在指针在元素中或边缘时接收鼠标事件。</li>
<li><p>上述代码只是确保了初始时文字在连接线路径上，所以还需要设置对上述元素的坐标更新。在 <code>force.on()</code> 中增加如下代码：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">linkpaths.attr(<span class="string">'d'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">d</span>) </span>&#123;</div><div class="line">                <span class="keyword">var</span> path = <span class="string">'M '</span> + d.source.x + <span class="string">' '</span> + d.source.y + <span class="string">' L '</span> + d.target.x + <span class="string">' '</span> + d.target.y;</div><div class="line">                <span class="keyword">return</span> path</div><div class="line">            &#125;);</div><div class="line"></div><div class="line">linklabels.attr(<span class="string">'transform'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">d, i</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (d.target.x &lt; d.source.x) &#123;</div><div class="line">        bbox = <span class="keyword">this</span>.getBBox();</div><div class="line">        <span class="comment">//确保文字不会倒置</span></div><div class="line">        rx = bbox.x + bbox.width / <span class="number">2</span>;</div><div class="line">        ry = bbox.y + bbox.height / <span class="number">2</span>;</div><div class="line">        <span class="keyword">return</span> <span class="string">'rotate(180 '</span> + rx + <span class="string">' '</span> + ry + <span class="string">')'</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">'rotate(0)'</span>;</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<h4 id="缩放和拖动"><a href="#缩放和拖动" class="headerlink" title="缩放和拖动"></a>缩放和拖动</h4><p>要同时支持鼠标缩放以及拖动，必须处理这两者的事件冲突，代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> zoom = d3.behavior.zoom()</div><div class="line">        .scaleExtent([<span class="number">1</span>, <span class="number">10</span>])</div><div class="line">        .on(<span class="string">"zoom"</span>, <span class="function"><span class="keyword">function</span> <span class="title">zoomed</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            d3.select(<span class="keyword">this</span>).attr(<span class="string">"transform"</span>,</div><div class="line">                <span class="string">"translate("</span> + d3.event.translate + <span class="string">")scale("</span> + d3.event.scale + <span class="string">")"</span>);</div><div class="line">        &#125;);</div><div class="line">svg.call(d3.behavior.zoom().on(<span class="string">"zoom"</span>, redraw))</div><div class="line">        .append(<span class="string">'g'</span>);</div><div class="line">force.drag()</div><div class="line">        .on(<span class="string">"dragstart"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">d</span>) </span>&#123;</div><div class="line">            <span class="comment">//在拖动节点的时候阻止事件冒泡</span></div><div class="line">            d3.event.sourceEvent.stopPropagation();</div><div class="line">        &#125;);</div><div class="line"><span class="comment">// 缩放之后重绘</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">redraw</span>(<span class="params"></span>) </span>&#123;</div><div class="line">   svg.attr(<span class="string">"transform"</span>, <span class="string">"translate("</span> + d3.event.translate + <span class="string">")"</span> + <span class="string">" scale("</span> + d3.event.scale + <span class="string">")"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">dragstart</span>(<span class="params">d</span>) </span>&#123;</div><div class="line">   d3.select(<span class="keyword">this</span>).classed(<span class="string">"fixed"</span>, d.fixed = <span class="literal">true</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><code>g 元素</code> 是用来分组用的，它能把多个元素放在一组里，对 <g> 标记实施的样式和渲染会作用到这个分组内的所有元素上。组内的所有元素都会继承 <g> 标记上的所有属性。</g></g></li>
<li><code>fixed</code> 设置为 true 时，顶点固定不动。</li>
</ul>
<h4 id="更新数据"><a href="#更新数据" class="headerlink" title="更新数据"></a>更新数据</h4><p>有时候需要更新数据，更新后力导向图也会跟着变化。由于上述的选择集通过 <code>data()</code> 将数据与元素进行绑定，而绑定的情况分为以下三种：</p>
<ul>
<li>update：数组长度 = 元素数量</li>
<li>enter：数组长度 &gt; 元素数量</li>
<li>exit：数组长度 &lt; 元素数量<br>所以在更新数据的时候需要分别对这三种情况进行处理，对于 enter 这种没有足够的元素的处理办法是添加元素，对于 exit 这种存在多余元素的处理办法是删除元素，而对于 update 则是进行内容修改。<br>以节点的更新数据为例：</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> node = svg.selectAll(<span class="string">".node"</span>)</div><div class="line">    .data(nodes_data);</div><div class="line"><span class="comment">//节点数据内容修改</span></div><div class="line">node.attr(<span class="string">"class"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">d</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="string">"node "</span> + d.label</div><div class="line">&#125;)</div><div class="line">    .on(<span class="string">"dblclick"</span>, dblclick)</div><div class="line">    .attr(<span class="string">"r"</span>, <span class="number">25</span>)</div><div class="line">    .call(force.drag)</div><div class="line">    .on(<span class="string">"click"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">d</span>) </span>&#123;</div><div class="line">        keys = d3.keys(d);</div><div class="line">        delete_key = [<span class="string">"x"</span>, <span class="string">"y"</span>, <span class="string">"index"</span>, <span class="string">"weight"</span>, <span class="string">"px"</span>, <span class="string">"py"</span>, <span class="string">"fixed"</span>];</div><div class="line">        info = [];</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; delete_key.length; i++) &#123;</div><div class="line">            keys.removeByValue(delete_key[i]);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; keys.length; j++) &#123;</div><div class="line">            info.push(d[keys[j]])</div><div class="line">        &#125;</div><div class="line">        showinfo(d.label, keys, info);</div><div class="line">    &#125;);</div><div class="line"><span class="comment">//增加不足的元素</span></div><div class="line">node.enter()</div><div class="line">    .append(<span class="string">"circle"</span>)</div><div class="line">    .attr(<span class="string">"class"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">d</span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"node "</span> + d.label</div><div class="line">    &#125;)</div><div class="line">    .on(<span class="string">"dblclick"</span>, dblclick)</div><div class="line">    .attr(<span class="string">"r"</span>, <span class="number">25</span>)</div><div class="line">    .call(force.drag)</div><div class="line">    .on(<span class="string">"click"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">d</span>) </span>&#123;</div><div class="line">        keys = d3.keys(d);</div><div class="line">        delete_key = [<span class="string">"x"</span>, <span class="string">"y"</span>, <span class="string">"index"</span>, <span class="string">"weight"</span>, <span class="string">"px"</span>, <span class="string">"py"</span>, <span class="string">"fixed"</span>];</div><div class="line">        info = [];</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; delete_key.length; i++) &#123;</div><div class="line">            keys.removeByValue(delete_key[i]);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; keys.length; j++) &#123;</div><div class="line">            info.push(d[keys[j]])</div><div class="line">        &#125;</div><div class="line">        showinfo(d.label, keys, info);</div><div class="line">    &#125;);</div><div class="line"><span class="comment">//删除多余元素</span></div><div class="line">node.exit().remove();</div></pre></td></tr></table></figure>
<hr>
<h4 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h4><p><a href="http://blog.csdn.net/lzhlzz/article/details/36869567" target="_blank" rel="external">理解 update, enter, exit 的使用</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;D3.js是一个JavaScript库，它可以通过数据来操作文档。D3可以通过使用HTML、SVG和CSS把数据鲜活形象地展现出来。D3严格遵循Web标准，因而可以让你的程序轻松兼容现代主流浏览器并避免对特定框架的依赖。同时，它提供了强大的可视化组件，可以让使用者以数据驱动的方式去操作DOM。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="前端" scheme="http://www.rookieyang.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="d3.js" scheme="http://www.rookieyang.cn/tags/d3-js/"/>
    
  </entry>
  
  <entry>
    <title>Python 下 Flask 结合 Neo4j 构建管理系统（四）</title>
    <link href="http://www.rookieyang.cn/2017/04/13/Python%E4%B8%8BFlask%E7%BB%93%E5%90%88Neo4j%E6%9E%84%E5%BB%BA%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%EF%BC%88%E5%9B%9B%EF%BC%89/"/>
    <id>http://www.rookieyang.cn/2017/04/13/Python下Flask结合Neo4j构建管理系统（四）/</id>
    <published>2017-04-13T07:30:43.000Z</published>
    <updated>2017-04-14T08:05:12.000Z</updated>
    
    <content type="html"><![CDATA[<p>数据的增删改功能引入了 bootstrap table 插件进行操作。</p>
<h4 id="bootstrap-table-使用"><a href="#bootstrap-table-使用" class="headerlink" title="bootstrap table 使用"></a>bootstrap table 使用</h4><p>引入 Bootstrap 库（假如你的项目还没有使用）和 bootstrap-table.css 到 head 标签下。<a id="more"></a></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"bootstrap.min.css"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"bootstrap-table.css"</span>&gt;</span></div></pre></td></tr></table></figure>
<p>引入 jQuery 库，bootstrap 库（假如你的项目还没有使用）和 bootstrap-table.js 到 head 标签下或者在 body 标签关闭之前（一般建议这么做）。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"jquery.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"bootstrap.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"bootstrap-table.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">--</span> <span class="attr">put</span> <span class="attr">your</span> <span class="attr">locale</span> <span class="attr">files</span> <span class="attr">after</span> <span class="attr">bootstrap-table.js</span> <span class="attr">--</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"bootstrap-table-zh-CN.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="表格初始化"><a href="#表格初始化" class="headerlink" title="表格初始化"></a>表格初始化</h4><p>代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> TableInit = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> oTableInit = <span class="keyword">new</span> <span class="built_in">Object</span>();</div><div class="line">    <span class="comment">//初始化Table</span></div><div class="line"></div><div class="line">    oTableInit.Init = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        $(<span class="string">'#ta_info'</span>).bootstrapTable(&#123;</div><div class="line">            <span class="attr">url</span>: $SCRIPT_ROOT + <span class="string">"/search_table"</span>,         <span class="comment">//请求后台的URL（*）</span></div><div class="line">            method: <span class="string">'get'</span>,                      <span class="comment">//请求方式（*）</span></div><div class="line">            toolbar: <span class="string">'#toolbar'</span>,                <span class="comment">//工具按钮用哪个容器</span></div><div class="line">            striped: <span class="literal">true</span>,                      <span class="comment">//是否显示行间隔色</span></div><div class="line">            cache: <span class="literal">false</span>,                       <span class="comment">//是否使用缓存，默认为true，所以一般情况下需要设置一下这个属性（*）</span></div><div class="line">            pagination: <span class="literal">true</span>,                   <span class="comment">//是否显示分页（*）</span></div><div class="line">            sortable: <span class="literal">false</span>,                     <span class="comment">//是否启用排序</span></div><div class="line">            sortOrder: <span class="string">"asc"</span>,                   <span class="comment">//排序方式</span></div><div class="line">            queryParams: oTableInit.queryParams,<span class="comment">//传递参数（*）</span></div><div class="line">            sidePagination: <span class="string">"server"</span>,           <span class="comment">//分页方式：client客户端分页，server服务端分页（*）</span></div><div class="line">            pageNumber: <span class="number">1</span>,                       <span class="comment">//初始化加载第一页，默认第一页</span></div><div class="line">            pageSize: <span class="number">10</span>,                       <span class="comment">//每页的记录行数（*）</span></div><div class="line">            pageList: [<span class="number">10</span>, <span class="number">25</span>, <span class="number">50</span>, <span class="number">100</span>],        <span class="comment">//可供选择的每页的行数（*）</span></div><div class="line">            search: <span class="literal">false</span>,                       <span class="comment">//是否显示表格搜索，此搜索是客户端搜索，不会进服务端，所以，个人感觉意义不大</span></div><div class="line">            strictSearch: <span class="literal">false</span>,</div><div class="line">            <span class="attr">showColumns</span>: <span class="literal">true</span>,                  <span class="comment">//是否显示所有的列</span></div><div class="line">            showRefresh: <span class="literal">true</span>,                  <span class="comment">//是否显示刷新按钮</span></div><div class="line">            minimumCountColumns: <span class="number">2</span>,             <span class="comment">//最少允许的列数</span></div><div class="line">            clickToSelect: <span class="literal">true</span>,                <span class="comment">//是否启用点击选中行</span></div><div class="line">            height: <span class="number">500</span>,                        <span class="comment">//行高，如果没有设置height属性，表格自动根据记录条数觉得表格高度</span></div><div class="line">            uniqueId: <span class="string">"ID"</span>,                     <span class="comment">//每一行的唯一标识，一般为主键列</span></div><div class="line">            showToggle: <span class="literal">true</span>,                    <span class="comment">//是否显示详细视图和列表视图的切换按钮</span></div><div class="line">            cardView: <span class="literal">false</span>,                    <span class="comment">//是否显示详细视图</span></div><div class="line">            detailView: <span class="literal">false</span>,                   <span class="comment">//是否显示父子表</span></div><div class="line">            columns: [&#123;</div><div class="line">                <span class="attr">checkbox</span>: <span class="literal">true</span></div><div class="line">            &#125;, &#123;</div><div class="line">                <span class="attr">field</span>: <span class="string">'name'</span>,</div><div class="line">                <span class="attr">title</span>: <span class="string">'信息名'</span></div><div class="line">            &#125;, &#123;</div><div class="line">                <span class="attr">field</span>: <span class="string">'label'</span>,</div><div class="line">                <span class="attr">title</span>: <span class="string">'类别'</span></div><div class="line">            &#125;]</div><div class="line">        &#125;);</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="comment">//得到查询的参数</span></div><div class="line">    oTableInit.queryParams = <span class="function"><span class="keyword">function</span> (<span class="params">params</span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> temp = &#123;   <span class="comment">//这里的键的名字和控制器的变量名必须一直，这边改动，控制器也需要改成一样的</span></div><div class="line">            limit: params.limit,   <span class="comment">//页面大小</span></div><div class="line">            offset: params.offset,  <span class="comment">//页码</span></div><div class="line">            q: $(<span class="string">"#search_table"</span>).find(<span class="string">"input[name=condition]"</span>).val()</div><div class="line">        &#125;;</div><div class="line">        <span class="keyword">return</span> temp;</div><div class="line">    &#125;;</div><div class="line">    <span class="keyword">return</span> oTableInit;</div><div class="line"></div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h4 id="服务器分页"><a href="#服务器分页" class="headerlink" title="服务器分页"></a>服务器分页</h4><p>后端代码：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@app.route('/search_table')</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">search_table</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        q = request.args.get(<span class="string">'q'</span>, <span class="number">0</span>)</div><div class="line">        limit = request.args.get(<span class="string">'limit'</span>, <span class="number">1</span>)</div><div class="line">        offset = request.args.get(<span class="string">'offset'</span>, <span class="number">2</span>)</div><div class="line">    <span class="keyword">except</span> KeyError:</div><div class="line">        <span class="keyword">return</span> []</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        user = User(session.get(<span class="string">"username"</span>))</div><div class="line">        results = user.search_table(q, limit, offset)</div><div class="line">        <span class="keyword">return</span> results</div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">search_table</span><span class="params">(self, condition, limit, offset)</span>:</span></div><div class="line">    nodes = []</div><div class="line">    act_nodes = []</div><div class="line">    query = <span class="string">"MATCH (m) WHERE m.name CONTAINS \'"</span> + condition + \</div><div class="line">            <span class="string">"\' and (labels(m)='Sort' or labels(m)='GOODS' or labels(m)='Website') RETURN m, labels(m)"</span></div><div class="line">    results = graph.run(query)</div><div class="line">    <span class="keyword">for</span> result, label <span class="keyword">in</span> results:</div><div class="line">        node = &#123;&#125;</div><div class="line">        node[<span class="string">"name"</span>] = result.get(<span class="string">"name"</span>)</div><div class="line">        node[<span class="string">"label"</span>] = label[<span class="number">0</span>]</div><div class="line">        nodes.append(node)</div><div class="line">    total = len(nodes)</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(int(offset), int(offset) + int(limit)):</div><div class="line">        <span class="keyword">if</span> i &gt;= len(nodes):</div><div class="line">            <span class="keyword">break</span></div><div class="line">        act_nodes.append(nodes[i])</div><div class="line">    <span class="keyword">return</span> jsonify(&#123;<span class="string">'total'</span>: total, <span class="string">'rows'</span>: act_nodes&#125;)</div></pre></td></tr></table></figure>
<ul>
<li>服务器分页必须返回 <code>total</code> 和 <code>rows</code> 两个参数，前者代表查询数据的总长度，后者返回该页应该显示的数据。</li>
</ul>
<h4 id="增删改"><a href="#增删改" class="headerlink" title="增删改"></a>增删改</h4><p>以增加数据为例：<br><img src="http://i.imgur.com/wBAu1Ti.png" alt="增加数据"><br>由于 Neo4j 中的数据不是结构性数据，所以增加数据的基本思路是由用户选择父节点，然后向父节点增加子节点，增加子节点的过程中必须填入子节点的 <code>名字</code>，<code>类别</code>以及和父节点的<code>关系</code>属性，如果子节点还有其它属性，则可以点击增加行进行额外属性的增加。<br>前端代码：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">'#btn_add'</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> father_node = $(<span class="string">"#ta_info"</span>).bootstrapTable(<span class="string">'getSelections'</span>);</div><div class="line">    <span class="keyword">if</span> (father_node == <span class="string">""</span>) &#123;</div><div class="line">        alert(<span class="string">"请选择插入元素的父节点"</span>)</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (father_node.length &gt; <span class="number">1</span>) &#123;</div><div class="line">        alert(<span class="string">"父节点只允许一个"</span>)</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">if</span> ($(<span class="string">'.added-row'</span>).length &gt; <span class="number">0</span>)</div><div class="line">            $(<span class="string">'.added-row'</span>).remove();</div><div class="line">        $(<span class="string">'#insertModal_body'</span>).find(<span class="string">"input[name=name]"</span>).val(<span class="string">""</span>);</div><div class="line">        $(<span class="string">'#insertModal_body'</span>).find(<span class="string">"input[name=label]"</span>).val(<span class="string">""</span>);</div><div class="line">        $(<span class="string">'#insertModal_body'</span>).find(<span class="string">"input[name=relation]"</span>).val(<span class="string">""</span>);</div><div class="line">        $(<span class="string">'#insertModal'</span>).modal()</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="literal">false</span></div><div class="line">&#125;);</div><div class="line"></div><div class="line">$(<span class="string">'#add_row'</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> modal_body = <span class="built_in">document</span>.getElementById(<span class="string">"insertModal_body"</span>);</div><div class="line">    <span class="keyword">var</span> row_div = <span class="built_in">document</span>.createElement(<span class="string">"div"</span>);</div><div class="line">    <span class="keyword">var</span> row_label = <span class="built_in">document</span>.createElement(<span class="string">"input"</span>);</div><div class="line">    <span class="keyword">var</span> row_text = <span class="built_in">document</span>.createElement(<span class="string">"input"</span>);</div><div class="line">    row_div.setAttribute(<span class="string">"class"</span>, <span class="string">"input-data form-inline added-row"</span>);</div><div class="line">    row_label.setAttribute(<span class="string">"class"</span>, <span class="string">"extra-label form-control"</span>);</div><div class="line">    row_label.setAttribute(<span class="string">"type"</span>, <span class="string">"text"</span>);</div><div class="line">    row_label.setAttribute(<span class="string">"placeholder"</span>, <span class="string">"属性名"</span>);</div><div class="line">    row_label.setAttribute(<span class="string">"name"</span>, <span class="string">"attr"</span>);</div><div class="line">    row_text.setAttribute(<span class="string">"class"</span>, <span class="string">"extra-text form-control"</span>);</div><div class="line">    row_text.setAttribute(<span class="string">"placeholder"</span>, <span class="string">"属性"</span>);</div><div class="line">    row_text.setAttribute(<span class="string">"type"</span>, <span class="string">"text"</span>);</div><div class="line">    row_div.appendChild(row_label);</div><div class="line">    row_div.appendChild(row_text);</div><div class="line">    modal_body.appendChild(row_div);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">$(<span class="string">'#insert_btn'</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> data = &#123;&#125;;</div><div class="line">    <span class="keyword">var</span> father_node = $(<span class="string">"#ta_info"</span>).bootstrapTable(<span class="string">'getSelections'</span>);</div><div class="line">    <span class="keyword">var</span> insertModal = $(<span class="string">'#insertModal_body'</span>);</div><div class="line">    <span class="keyword">var</span> fa_name = father_node[<span class="number">0</span>][<span class="string">"name"</span>];</div><div class="line">    <span class="keyword">var</span> fa_label = father_node[<span class="number">0</span>][<span class="string">'label'</span>];</div><div class="line">    <span class="keyword">var</span> child_name = insertModal.find(<span class="string">"input[name=name]"</span>).val();</div><div class="line">    <span class="keyword">var</span> child_label = insertModal.find(<span class="string">"input[name=label]"</span>).val();</div><div class="line">    <span class="keyword">var</span> relation = insertModal.find(<span class="string">"input[name=relation]"</span>).val();</div><div class="line">    <span class="keyword">var</span> child_attrs_label = $(<span class="string">'.extra-label'</span>);</div><div class="line">    <span class="keyword">var</span> child_attrs = $(<span class="string">'.extra-text'</span>);</div><div class="line">    data[<span class="string">'fa_name'</span>] = fa_name;</div><div class="line">    data[<span class="string">'fa_label'</span>] = fa_label;</div><div class="line">    data[<span class="string">'name'</span>] = child_name;</div><div class="line">    data[<span class="string">'label'</span>] = child_label;</div><div class="line">    data[<span class="string">'relation'</span>] = relation;</div><div class="line">    <span class="keyword">if</span> (child_name == <span class="string">""</span> || child_label == <span class="string">""</span> || relation == <span class="string">""</span>) &#123;</div><div class="line">        alert(<span class="string">"请填写必要信息"</span>);</div><div class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (fa_name == child_name) &#123;</div><div class="line">        alert(<span class="string">"不可与父节点名称相同"</span>);</div><div class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (child_attrs.length &gt; <span class="number">0</span>) &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="number">1</span>);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; child_attrs.length; i++) &#123;</div><div class="line">            data[child_attrs_label[i].value] = child_attrs[i].value;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    data = <span class="built_in">JSON</span>.stringify(data);</div><div class="line">    $.ajax(&#123;</div><div class="line">        <span class="attr">url</span>: <span class="string">"/insert"</span>,</div><div class="line">        <span class="attr">type</span>: <span class="string">'POST'</span>,</div><div class="line">        <span class="attr">data</span>: data,</div><div class="line">        <span class="attr">contentType</span>: <span class="string">'application/json; charset=UTF-8'</span>,</div><div class="line">        <span class="attr">success</span>: <span class="function"><span class="keyword">function</span> (<span class="params">msg</span>) </span>&#123;</div><div class="line">            <span class="keyword">if</span> (msg == <span class="string">"插入成功"</span>) &#123;</div><div class="line">                $(<span class="string">'#insertModal'</span>).modal(<span class="string">'hide'</span>);</div><div class="line">                $(<span class="string">"#ta_info"</span>).bootstrapTable(<span class="string">'refresh'</span>);</div><div class="line">            &#125;</div><div class="line">            alert(msg);</div><div class="line">        &#125;</div><div class="line">    &#125;)</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>后端代码：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@app.route('/insert', methods=['POST'])</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_insert</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        data = request.get_json()</div><div class="line">    <span class="keyword">except</span> KeyError:</div><div class="line">        <span class="keyword">return</span> []</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        user = User(session.get(<span class="string">"username"</span>))</div><div class="line">        start_node = &#123;&#125;</div><div class="line">        end_node = &#123;&#125;</div><div class="line">        start_node[<span class="string">'name'</span>] = data[<span class="string">'fa_name'</span>]</div><div class="line">        start_node[<span class="string">'label'</span>] = data[<span class="string">'fa_label'</span>]</div><div class="line">        relation = data[<span class="string">'relation'</span>]</div><div class="line">        data.pop(<span class="string">'fa_name'</span>)</div><div class="line">        data.pop(<span class="string">'fa_label'</span>)</div><div class="line">        data.pop(<span class="string">'relation'</span>)</div><div class="line">        <span class="keyword">for</span> key <span class="keyword">in</span> data.keys():</div><div class="line">            end_node[key] = data[key]</div><div class="line">        results = user.insert_table(start_node, relation, end_node)</div><div class="line">        <span class="keyword">return</span> results</div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">insert_table</span><span class="params">(self, start_node, relation, end_node)</span>:</span></div><div class="line">    end_node_label = end_node[<span class="string">'label'</span>]</div><div class="line">    end_node.pop(<span class="string">"label"</span>)</div><div class="line">    data = <span class="string">""</span></div><div class="line">    <span class="keyword">for</span> key <span class="keyword">in</span> end_node.keys():</div><div class="line">        data += key + <span class="string">":"</span> + <span class="string">"\'"</span> + end_node[key] + <span class="string">"\'"</span> + <span class="string">","</span></div><div class="line">    data = data.strip(<span class="string">","</span>)</div><div class="line">    check_query = <span class="string">"MATCH (m) WHERE m.username=\'"</span> + end_node[<span class="string">'name'</span>] \</div><div class="line">                  + <span class="string">"\' and labels(m)=\'"</span> + end_node_label + <span class="string">"\' RETURN m"</span></div><div class="line">    insert_query = <span class="string">"MATCH (m) WHERE m.name=\'"</span> + start_node[<span class="string">'name'</span>] \</div><div class="line">                   + <span class="string">"\' and labels(m)=\'"</span> + start_node[<span class="string">'label'</span>] + \</div><div class="line">                   <span class="string">"\' CREATE (n:"</span> + end_node_label + <span class="string">""</span> + <span class="string">"&#123;"</span> + data + <span class="string">"&#125;)&lt;-"</span> + \</div><div class="line">                   <span class="string">"[:"</span> + relation + <span class="string">"]-(m) RETURN n"</span></div><div class="line">    check_result = graph.run(check_query)</div><div class="line">    <span class="keyword">if</span> check_result.forward():</div><div class="line">        <span class="keyword">return</span> <span class="string">"已经存在此节点"</span></div><div class="line">    print(insert_query)</div><div class="line">    insert_result = graph.run(insert_query)</div><div class="line">    <span class="keyword">if</span> insert_result.forward():</div><div class="line">        <span class="keyword">return</span> <span class="string">"插入成功"</span></div><div class="line">    <span class="keyword">return</span> <span class="string">"插入失败"</span></div></pre></td></tr></table></figure>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>利用 Neo4j 结合 Flask 构建 Web 应用的关键在于如何前端和后端如何进行数据交互，Flask 可以很方便的通过 <code>jsonify()</code> 方法返回 Json 数据，所以在构建应用的过程中可以尽可能使用 <code>ajax</code> 向后端发送 Json格式数据。 </p>
<hr>
<h4 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h4><p><a href="http://bootstrap-table.wenzhixin.net.cn/zh-cn/" target="_blank" rel="external">Bootstrap Table</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;数据的增删改功能引入了 bootstrap table 插件进行操作。&lt;/p&gt;
&lt;h4 id=&quot;bootstrap-table-使用&quot;&gt;&lt;a href=&quot;#bootstrap-table-使用&quot; class=&quot;headerlink&quot; title=&quot;bootstrap table 使用&quot;&gt;&lt;/a&gt;bootstrap table 使用&lt;/h4&gt;&lt;p&gt;引入 Bootstrap 库（假如你的项目还没有使用）和 bootstrap-table.css 到 head 标签下。
    
    </summary>
    
      <category term="Python 学习" scheme="http://www.rookieyang.cn/categories/Python-%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Python" scheme="http://www.rookieyang.cn/tags/Python/"/>
    
      <category term="Flask" scheme="http://www.rookieyang.cn/tags/Flask/"/>
    
      <category term="Neo4j" scheme="http://www.rookieyang.cn/tags/Neo4j/"/>
    
  </entry>
  
</feed>
