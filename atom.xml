<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>知北遊的博客</title>
  <subtitle>青春会老去，岁月不会停</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.rookieyang.cn/"/>
  <updated>2018-01-15T15:46:11.000Z</updated>
  <id>http://www.rookieyang.cn/</id>
  
  <author>
    <name>知北遊</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java基础之注解</title>
    <link href="http://www.rookieyang.cn/2018/01/15/Java%E5%9F%BA%E7%A1%80%E4%B9%8B%E6%B3%A8%E8%A7%A3/"/>
    <id>http://www.rookieyang.cn/2018/01/15/Java基础之注解/</id>
    <published>2018-01-15T14:07:15.000Z</published>
    <updated>2018-01-15T15:46:11.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>关于注解首先请思考一下以下问题：</p>
<ul>
<li><p>注解是什么？</p>
</li>
<li><p>注解的主要使用场景？</p>
</li>
<li><p>注解可以分为哪些类型？</p>
</li>
<li><p>注解的处理过程？</p>
</li>
</ul>
<p>接下来我们将对这几个问题进行探讨<a id="more"></a></p>
<h2 id="注解简介"><a href="#注解简介" class="headerlink" title="注解简介"></a>注解简介</h2><blockquote>
<p><em>Annotations</em>, a form of metadata, provide data about a program that is not part of the program itself. Annotations have no direct effect on the operation of the code they annotate.</p>
</blockquote>
<p>上述是官方给出的关于注解的定义，大致意思是注解是<strong>元数据</strong>（MetaData）的一种形式，它用于提供一些和程序元素有关的元数据，这些数据本身不属于程序，并且也不会直接影响程序的操作。</p>
<p>为了更直观的理解注解的概念，我们还需要进一步了解元数据这个概念，关于元数据 Wiki 上的描述如下：</p>
<blockquote>
<p><strong>Metadata</strong> is “data [information] that provides information about other data”，For example, a digital image may include metadata that describes how large the picture is, the color depth, the image resolution, when the image was created, the shutter speed, and other data.</p>
</blockquote>
<p>元数据是描述数据的数据，对于一张相片而言元数据包括相片的大小、色彩深度、图片的分辨率、图片建立时间以及快门速度等相关数据。</p>
<p>结合两者可以得到：<strong>注解是一种用于描述程序元素信息的修饰符，可以用来修饰包、类、构造器、方法、成员变量、参数、局部变量。</strong></p>
<p>这里再结合具体的场景进行理解：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@BindView</span>(R.id.toolbar)</div><div class="line"><span class="keyword">public</span> Toolbar mToolbar;</div></pre></td></tr></table></figure>
<p>对于成员变量 mToolbar 而言，其基本的信息包含 width、heigth、id，通过注解我们能够很明确的描述它的 id 信息。</p>
<h2 id="注解的主要使用场景"><a href="#注解的主要使用场景" class="headerlink" title="注解的主要使用场景"></a>注解的主要使用场景</h2><p>要明白注解的使用场景，首先需要了解的是注解的主要作用：</p>
<blockquote>
<ul>
<li><p><strong>Information for the compiler</strong>— Annotations can be used by the compiler to detect errors or suppress warnings.</p>
</li>
<li><p><strong>Compile-time and deployment-time processing</strong>— Software tools can process annotation information to generate code, XML files, and so forth.</p>
</li>
<li><p><strong>Runtime processing</strong>— Some annotations are available to be examined at runtime.</p>
</li>
</ul>
</blockquote>
<p>接下来举几个常见的例子说明：</p>
<ol>
<li><p>为编译器提供信息用于检测错误或者抑制警告</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addItems</span><span class="params">(@NonNull String item)</span> </span>&#123;</div><div class="line">  List list = <span class="keyword">new</span> ArrayList();</div><div class="line">  list.add(item);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>编译时和部署时通过对注解进行处理生成代码、XML 文件等</p>
<p>比较常见的如<a href="https://github.com/JakeWharton/butterknife" target="_blank" rel="external">butterknife</a>，butterknife 能够通过注解自动生成 findViewById 的代码，<strong>有助于减轻样板代码的负担</strong>。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@BindView</span>(R.id.toolbar)</div><div class="line"><span class="keyword">public</span> Toolbar mToolbar;</div></pre></td></tr></table></figure>
</li>
<li><p>运行时通过注解进行检查处理</p>
<p>在运行时我们可以通过反射机制对注解提供的信息进行处理，然后实现需要的功能。</p>
</li>
</ol>
<p>在明确了注解的主要作用之后，注解的使用场景就已经呼之欲出了，<strong>当我们需要为程序中的元素提供信息，并且这些信息需要得到处理的时候，就可以考虑使用注解。</strong></p>
<h2 id="注解的分类"><a href="#注解的分类" class="headerlink" title="注解的分类"></a>注解的分类</h2><h3 id="基本注解"><a href="#基本注解" class="headerlink" title="基本注解"></a>基本注解</h3><p>Java 提供了 5 个基本的 Annotation</p>
<table>
<thead>
<tr>
<th style="text-align:left">注解名</th>
<th style="text-align:left">作用</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">@Override</td>
<td style="text-align:left">限定重写父类方法</td>
</tr>
<tr>
<td style="text-align:left">@Deprecated</td>
<td style="text-align:left">表示某个程序元素已经过时</td>
</tr>
<tr>
<td style="text-align:left">@SuppressWarnings</td>
<td style="text-align:left">抑制编译器的警告</td>
</tr>
<tr>
<td style="text-align:left">@SafeVarargs</td>
<td style="text-align:left">抑制堆污染警告</td>
</tr>
<tr>
<td style="text-align:left">@FunctionalInterface</td>
<td style="text-align:left">指定某个接口必须是函数式接口</td>
</tr>
</tbody>
</table>
<p>接下来聊聊它们的使用</p>
<ol>
<li><p>Override</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FatherClass</span> </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">overridedMethod</span><span class="params">()</span> </span>&#123; </div><div class="line">  &#125; </div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseAnnotationUse</span> <span class="keyword">extends</span> <span class="title">FatherClass</span></span>&#123;</div><div class="line">  </div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">overridedMethod</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.overridedMethod();</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Override的主要作用是：</p>
<ol>
<li><p>帮助检查是否正确的复写了父类中的已有方法（如果不小心拼写错误或者方法签名对不上被覆盖的方法，编辑器都会发出警告信息）</p>
</li>
<li><p>表示当前方法定义将覆盖超类的方法。</p>
<p>如果没有正确的复写父类中的方法则会提示 <strong>Method does not override method from its superclass</strong>。</p>
<p><img src="https://ws4.sinaimg.cn/large/006tNc79gy1fnhpc8rfhvj308c028wec.jpg" alt=""></p>
<p><img src="https://ws1.sinaimg.cn/large/006tNc79gy1fnhpc8zywyj30el00qglf.jpg" alt=""></p>
</li>
</ol>
</li>
<li><p>Deprecated<br><br>在 FatherClass 增加如下方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Deprecated</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deprecatedMethod</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然后在 BaseAnnotationUse 中增加：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">useDeprecatedMethod</span><span class="params">()</span> </span>&#123;</div><div class="line"> deprecatedMethod();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这个时候将会看到 deprecatedMethod() 显示红色，并且编辑器提示<strong>deprecatedMethod() 已经过时了</strong></p>
<p><img src="https://ws1.sinaimg.cn/large/006tNc79gy1fnhpc8bslfj309j02ewec.jpg" alt=""></p>
</li>
<li><p>SuppressWarning<br><br>对 BaseAnnotationUse 中的 useDeprecatedMethod 方法进行如下修改</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"deprecation"</span>)</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">useDeprecatedMethod</span><span class="params">()</span> </span>&#123;</div><div class="line"> deprecatedMethod();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p> 通过增加 SuppressWarning 抑制了 Deprecated 的警告，deprecatedMethod() 的红色将会消失</p>
<p><img src="https://ws4.sinaimg.cn/large/006tNc79gy1fnhpc9h4f3j309q02n746.jpg" alt=""></p>
</li>
<li><p>SafeVarargs</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@SafeVarargs</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">faultyMethod</span><span class="params">(List&lt;String&gt;... listStrArray)</span> </span>&#123;</div><div class="line">	List[] listArray = listStrArray;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>当把一个不带泛型的对象赋给一个带泛型的变量的时候，往往将会导致”堆污染“，所以在 Java 7 中增加了 SafeVarargs 用于抑制堆污染的警告，SafeVarargs 只能用在参数长度可变的方法或构造方法上，且方法必须声明为static或final，否则会出现编译错误。</p>
<p><img src="https://ws2.sinaimg.cn/large/006tNc79gy1fnhpc9e5utj30es02ogli.jpg" alt=""></p>
<p><img src="https://ws2.sinaimg.cn/large/006tNc79gy1fnhpc97402j30ns00wglh.jpg" alt=""></p>
</li>
<li><p>FunctionalInterface</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@FunctionalInterface</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BaseInterface</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>FunctionalInterface 是 Java 8 专门为 Lambda 表达式新增的，通过 FunctionalInterface 可以限制接口中只能存在一个抽象方法，如果在 BaseInterface 接口中新增抽象方法，编译时将会提示 BaseInterface 不是函数式接口。</p>
<p><img src="https://ws4.sinaimg.cn/large/006tNc79gy1fnhpc8jd23j308b06maa2.jpg" alt=""></p>
<p><img src="https://ws2.sinaimg.cn/large/006tNc79gy1fnhpc8exc7j30od01vgll.jpg" alt=""></p>
</li>
</ol>
<h3 id="元注解"><a href="#元注解" class="headerlink" title="元注解"></a>元注解</h3><p>JDK 在 java.lang.annotation 中内置了 6 种元注解，除了 Native 之外都用于修饰其它的 Annotation 定义</p>
<table>
<thead>
<tr>
<th style="text-align:left">注解名</th>
<th style="text-align:left">作用</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">@Retention</td>
<td style="text-align:left">指定被修饰的注解的保留时间</td>
</tr>
<tr>
<td style="text-align:left">@Target</td>
<td style="text-align:left">指定被修饰的注解可以修饰的程序元素</td>
</tr>
<tr>
<td style="text-align:left">@Documented</td>
<td style="text-align:left">指定被修饰的注解可以被 javadoc 提取成文档</td>
</tr>
<tr>
<td style="text-align:left">@Inherited</td>
<td style="text-align:left">指定被修饰的注解具有继承性，如果某个类使用了被 @Inherited 修饰的注解，那么其子类将自动被该注解修饰</td>
</tr>
<tr>
<td style="text-align:left">@Repeatable</td>
<td style="text-align:left">用于定义重复注解</td>
</tr>
<tr>
<td style="text-align:left">@Native</td>
<td style="text-align:left">表示定义常量值的字段可以从本地代码引用。</td>
</tr>
</tbody>
</table>
<p>接下来主要介绍前五种，@Native 实在是不常用</p>
<ol>
<li><p>Retention</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Documented</span></div><div class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</div><div class="line"><span class="meta">@Target</span>(ElementType.ANNOTATION_TYPE)</div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Retention &#123;</div><div class="line">  <span class="comment">/**</span></div><div class="line">  * Returns the retention policy.</div><div class="line">  * <span class="doctag">@return</span> the retention policy</div><div class="line">  */</div><div class="line">	<span class="function">RetentionPolicy <span class="title">value</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Retention的定义如上，其拥有一个 RetentionPolicy 类型的成员变量，RetentionPolicy 是枚举类，主要有三个枚举值：</p>
<ul>
<li>RetentionPolicy.SOURCE 注解只能保留在源文件当中，编译器不会编译这种注解</li>
<li>RetentionPolicy.CLASS 注解能够保留在 class 文件当中，但是当程序运行的时候，JVM 不能够获取到注解信息</li>
<li>RetentionPolicy.RUNTIME 注解能够保留在 class 文件当中，程序运行的时候，JVM 也能够获取到注解信息，程序能够通过反射去获取到 Annotation 信息</li>
</ul>
</li>
<li><p>Target</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Documented</span></div><div class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</div><div class="line"><span class="meta">@Target</span>(ElementType.ANNOTATION_TYPE)</div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Target &#123;</div><div class="line">  <span class="comment">/**</span></div><div class="line">  * Returns an array of the kinds of elements an annotation type</div><div class="line">  * can be applied to.</div><div class="line">  * <span class="doctag">@return</span> an array of the kinds of elements an annotation type</div><div class="line">  * can be applied to</div><div class="line">  */</div><div class="line">  ElementType[] value();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>ElementType 也是一个枚举类，其枚举值和意义是：</p>
<ul>
<li>ElementType.TYPE 表明注解可以修饰类、接口或者枚举定义</li>
<li>ElementType.FIELD 表明注解可以修饰成员变量</li>
<li>ElementType.METHOD 表明注解可以修饰方法定义</li>
<li>ElementType.PARAMETER 表明注解可以修饰参数</li>
<li>ElementType.CONSTRUCTOR 表明注解可以修饰构造函数</li>
<li>ElementType.LOCAL_VARIABLE 表明注解可以修饰局部变量</li>
<li>ElementType.ANNOTATION_TYPE 表明注解可以修饰注解</li>
<li>ElementType.PACKAGE 表明注解可以修饰包定义</li>
<li>ElementType.TYPE_PARAMETER 表明注解只能定义程序元素的修饰</li>
<li>ElementType.TYPE_USE 表明注解不仅可以在定义程序元素的时候使用，还可以在<strong>创建对象、类型转换、使用 implements 实现接口、使用 throws 声明抛出异常</strong>的时候使用</li>
</ul>
</li>
<li><p>Documented<br>对于使用被 @Documented 修饰的注解和不带 @Documented 修饰的注解，其区别如下：</p>
<p><img src="https://ws1.sinaimg.cn/large/006tNc79gy1fnhpm1fxm6j308j02saa2.jpg" alt="annotation_1"></p>
<p><img src="https://ws3.sinaimg.cn/large/006tNc79gy1fnhplxhl8fj308p02hq2w.jpg" alt="annotation_2"></p>
</li>
<li><p>Inherited</p>
<p>Inherited 的继承作用可以通过以下例子来体现，首先创建一个 Interitable 注解</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Retention</span>(RetentionPolicy.CLASS)</div><div class="line"><span class="meta">@Target</span>(ElementType.TYPE)</div><div class="line"><span class="meta">@Inherited</span></div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Inheritable &#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然后创建一个由 Inheritable 修饰的 Base 类</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Inheritable</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Base</span> </span>&#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>最后创建一个继承自 Base 类的 InheritableTest 类</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InheritableTest</span> <span class="keyword">extends</span> <span class="title">Base</span> </span>&#123;</div><div class="line">  </div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">    <span class="comment">//判断是否被 Inheritable 注解</span></div><div class="line">    System.out.println(InheritableTest.class.isAnnotationPresent(Inheritable.class));</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行之后可以发现结果为 true</p>
</li>
<li><p>Repeatable</p>
<p>Repeatable 是 Java8 新增的注解，用于定义重复注解，在 Java8 之前的重复注解只能写成以下形式</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">@Infos(&#123;@Info(name = &quot;zhangsan&quot;), @Info(name = &quot;lisi&quot;)&#125;)</div><div class="line">private Person mPerson;</div><div class="line">public class Person &#123;</div><div class="line"></div><div class="line">    private String mName;</div><div class="line">    private int mAge;</div><div class="line">    private int mHeight;</div><div class="line">    private int mWeight;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>其中 Info 和 Infos 分别是</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Target</span>(ElementType.FIELD)</div><div class="line"><span class="meta">@Retention</span>(RetentionPolicy.CLASS)</div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Info &#123;</div><div class="line">  </div><div class="line">  <span class="function">String <span class="title">name</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Retention</span>(RetentionPolicy.CLASS)</div><div class="line"><span class="meta">@Target</span>(ElementType.FIELD)</div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Infos &#123;</div><div class="line">  </div><div class="line">  Info[] value();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>由于 Infos 中保留了 Info 的信息，所以 Infos 的保留时间不能比 Info 少，否则编译器将会报错。如果 Info 的保留时间是 RUNTIME，而 Infos 的保留时间是 SOURCE，那么 JVM 最终会丢弃 Infos 以及 Infos 中的 Info 信息，这与 Info 期望的保留时间相矛盾。</p>
</li>
</ol>
<h3 id="自定义注解"><a href="#自定义注解" class="headerlink" title="自定义注解"></a>自定义注解</h3><p>JDK 内置的注解并不能完全满足我们的需求，大多数情况下我们还需要学会自定义注解，定义一个注解需要用到 @Interface 关键字</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Target</span>(ElementType.FIELD)</div><div class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> BindView &#123;</div><div class="line">  </div><div class="line">  <span class="comment">/**</span></div><div class="line">  * <span class="doctag">@return</span> View 的 Id</div><div class="line">  */</div><div class="line">  <span class="function"><span class="keyword">int</span> <span class="title">value</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Target</span>(ElementType.FIELD)</div><div class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> BindOnClickListener &#123;</div><div class="line">  </div><div class="line">  <span class="comment">/**</span></div><div class="line">  * <span class="doctag">@return</span> 实现 OnClickListener 接口的类</div><div class="line">  */</div><div class="line">  Class&lt;? extends OnClickListener&gt; value();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面定义了两个注解用于绑定 View 的 id 以及 点击事件，并且指定了注解可以修饰的元素以及保留时间，可以看到定义一个注解与定义一个接口非常类似，而实际上每个注解都是继承自 Annotation 接口的接口，反编译 BindView 生成的 class 文件可以看到</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Compiled from <span class="string">"BindView.java"</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">com</span>.<span class="title">rookieyang</span>.<span class="title">runtimeannotation</span>.<span class="title">customizeannotation</span>.<span class="title">BindView</span> <span class="keyword">extends</span> <span class="title">java</span>.<span class="title">lang</span>.<span class="title">annotation</span>.<span class="title">Annotation</span> </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">int</span> <span class="title">value</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里自定义的注解都是含有成员变量的，而注解除了按照基本注解、元注解、自定义注解进行分类之外，我还可以根据是否包含成员变量将它分为两类：</p>
<ul>
<li><p>标记注解：这种注解没有成员变量，它仅仅通过是否存在来提供信息，如@Override、@Deprecated</p>
</li>
<li><p>元数据注解：这种注解包含成员变量，它通过成员变量提供更多的信息，如@Retention、@Target</p>
</li>
</ul>
<h2 id="注解的处理"><a href="#注解的处理" class="headerlink" title="注解的处理"></a>注解的处理</h2><p>在使用自定义的注解的时候，如果不提供注解的处理工具，注解是不会自动生效的，注解的处理方法主要有两种，一种是运行时处理注解，一种是编译时处理注解。</p>
<ol>
<li><p>运行时处理注解</p>
<p>运行时处理注解主要利用 Java 的反射机制，接下来将结合具体实例说明如何通过反射处理注解。</p>
<p>首先利用自定义注解部分定义的两个注解 BindView 和 BindOnClickListener 对 View 进行注解</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@BindView</span>(R.id.hello_world)</div><div class="line"><span class="meta">@BindOnClickListener</span>(CustomizeOnClickListener.class)</div><div class="line"><span class="keyword">private</span> Button mHelloWorld;</div></pre></td></tr></table></figure>
<p>然后在 Activity 中定义一个 CustomizeOnClickListener 内部类</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">class CustomizeOnClickListener implements OnClickListener &#123;</div><div class="line"></div><div class="line">  @Override</div><div class="line">  public void onClick(View view) &#123;</div><div class="line">    Toast.makeText(MainActivity.this, R.string.hello_world,</div><div class="line">    Toast.LENGTH_SHORT).show();</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>接着定义一个处理注解的类</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnnotationProcess</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(Object obj)</span> </span>&#123;</div><div class="line">    Field[] fields = obj.getClass().getDeclaredFields();</div><div class="line">    Activity activity;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (!(obj <span class="keyword">instanceof</span> Activity)) &#123;</div><div class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"传入的参数不是Activity"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    activity = (Activity) obj;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (Field field : fields) &#123;</div><div class="line">      <span class="keyword">try</span> &#123;</div><div class="line">        View view = <span class="keyword">null</span>;</div><div class="line">        field.setAccessible(<span class="keyword">true</span> );</div><div class="line">        BindView bindView = field.getAnnotation(BindView.class);</div><div class="line">        BindOnClickListener bindOnClickListener = field</div><div class="line">        .getAnnotation(BindOnClickListener.class);</div><div class="line">        <span class="comment">//判断是否是 View</span></div><div class="line">        <span class="keyword">boolean</span> isView = View.class.isAssignableFrom(field.getType());</div><div class="line">        <span class="keyword">if</span> (bindView != <span class="keyword">null</span> &amp;&amp; isView) &#123;</div><div class="line">          view = activity.findViewById(bindView.value());</div><div class="line">          <span class="comment">//设置 obj 对象当中的 field 值为 view</span></div><div class="line">          field.set(obj, view);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (bindOnClickListener != <span class="keyword">null</span> &amp;&amp; isView &amp;&amp; view != <span class="keyword">null</span>) &#123;</div><div class="line">          Class&lt;? extends OnClickListener&gt; listener = bindOnClickListener.value();</div><div class="line">          <span class="comment">//实例化 CustomizeOnClickListener 内部类</span></div><div class="line">          OnClickListener onClickListener = listener.getConstructor(</div><div class="line">          obj.getClass()).newInstance(activity);</div><div class="line">          view.setOnClickListener(onClickListener);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">      &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">        Log.i(obj.getClass().getSimpleName(), e.getMessage());</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>最后在 Activity 中调用即可：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">AnnotationProcess.process(<span class="keyword">this</span>);</div></pre></td></tr></table></figure>
</li>
<li><p>编译时处理注解</p>
<p>相对与运行时利用反射处理注解会有性能损失而言，编译时处理注解利用 APT（Annotation Processing Tool）对注解进行处理然后生成代码、XML 文件，利用 APT 去处理注解性能更好。参照 JDK 文档中对于 Processor 接口的描述，我们可以大致知道注解处理器的工作流程</p>
<blockquote>
<ol>
<li>If an existing Processor object is not being used, to create an instance of a processor the tool calls the no-arg constructor of the processor class.</li>
<li>Next, the tool calls the init method with an appropriate ProcessingEnvironment.</li>
<li>Afterwards, the tool calls getSupportedAnnotationTypes, getSupportedOptions, and getSupportedSourceVersion. These methods are only called once per run, not on each round.</li>
<li>As appropriate, the tool calls the process method on the Processor object; a new Processor object is not created for each round.</li>
</ol>
</blockquote>
<p>编译工具将会通过注解处理器的无参构造函数实例化一个注解处理器对象，然后调用注解处理器的 init 方法并传入 ProcessingEnvironment，之后则调用 getSupportedAnnotationTypes，getSupportedOptions和getSupportedSourceVersion，最后将会调用 process 方法。<br>接下来将说明如何利用 APT 生成一个类文件用于显示 HelloWorld：</p>
<p>首先需要明确希望生成的类文件：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.rookieyang.myannotationtwo;</div><div class="line"></div><div class="line"><span class="keyword">import</span> android.content.Context;</div><div class="line"><span class="keyword">import</span> android.widget.Toast;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity_HelloWorld</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">    Toast.makeText(context, <span class="string">"HelloWorld"</span>, Toast.LENGTH_SHORT).show();</div><div class="line">  &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>想要生成这个类文件需要获取到两点信息：<strong>包名和类名</strong>，通过包名可以使类文件生成在使用注解的包下，便于解析注解的时候加载类文件，通过类名加上 “_HelloWorld” 确保生成的类文件唯一存在，同时也达到了使用注解的类和生成的类绑定的效果。</p>
<p>接下来需要创建两个 Module，其中一个定义了所有的注解，另外一个定义了 APT，之所以需要定义两个 Module 的原因，其一为了让工程结构更清晰，另一方面定义 APT 需要用到 javax 包。整体的工程结构如下图所示：</p>
<p><img src="https://ws2.sinaimg.cn/large/006tNc79gy1fnhpgt6yrqj308w0aqwer.jpg" alt=""></p>
<p>之后需要为 annotations-compiler 和 app 模块引入相关依赖</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">annotations-compiler 模块</div><div class="line">compile <span class="string">'com.google.auto.service:auto-service:1.0-rc3'</span></div><div class="line"><span class="function">compile <span class="title">project</span><span class="params">(path: <span class="string">':annotations'</span>)</span></span></div><div class="line"></div><div class="line">app 模块</div><div class="line">compile <span class="title">project</span><span class="params">(path: <span class="string">':annotations'</span>)</span></div><div class="line">annotationProcessor <span class="title">project</span><span class="params">(<span class="string">':annotations-compiler'</span>)</span></div></pre></td></tr></table></figure>
<p>其中 auto-service 的作用是帮助我们生成下列文件，主要作用是声明注解处理器。</p>
<p><img src="https://ws1.sinaimg.cn/large/006tNc79gy1fnhph5udigj309q024mx0.jpg" alt=""></p>
<p>annotationProcessor 则是为模块指定注解处理器</p>
<p>配置之后首先在 annotations 模块定义一个 HelloWorld 注解</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Target</span>(ElementType.FIELD)</div><div class="line"><span class="meta">@Retention</span>(RetentionPolicy.CLASS)</div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> HelloWorld &#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然后在 annotations-compiler 模块编写对应注解处理器</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//标识一个注解处理器</span></div><div class="line"><span class="meta">@AutoService</span>(Processor.class)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnnotationsCompiler</span> <span class="keyword">extends</span> <span class="title">AbstractProcessor</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="keyword">private</span> Elements mElements;</div><div class="line">  <span class="keyword">private</span> Filer mFiler;</div><div class="line">  <span class="keyword">private</span> Messager mMessager;</div><div class="line"></div><div class="line">  <span class="comment">/*</span></div><div class="line">  * 用于初始化 mElements、mFiler、mMessager</div><div class="line">  */</div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(ProcessingEnvironment processingEnvi)</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.init(processingEnvi);</div><div class="line"></div><div class="line">    mElements = processingEnvi.getElementUtils();</div><div class="line">    mFiler = processingEnvi.getFiler();</div><div class="line">    mMessager = processingEnvi.getMessager();</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">/**</span></div><div class="line">  *</div><div class="line">  * <span class="doctag">@param</span> elements 实际上传入的都是 &#123;<span class="doctag">@link</span> #getSupportedAnnotationTypes()&#125;</div><div class="line">  * 中支持的并且被扫描到（使用过）注解元素，例如这里获取到的类元素就是 HelloWorld 注解</div><div class="line">  * <span class="doctag">@param</span> roundEnvi 一个注解处理工具框架，通过它可以查询到使用了注解的元素</div><div class="line">  * <span class="doctag">@return</span> 返回处理结果</div><div class="line">  */</div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">process</span><span class="params">(Set&lt;? extends TypeElement&gt; elements,</span></span></div><div class="line">  RoundEnvironment roundEnvi) &#123;</div><div class="line">    String packageName;</div><div class="line">    String className;</div><div class="line">    <span class="comment">//获取使用了 HelloWorld 注解的元素</span></div><div class="line">    <span class="keyword">for</span> (Element element : roundEnvi.getElementsAnnotatedWith(HelloWorld.class)) &#123;</div><div class="line">      <span class="comment">//通过 Elements 去获取包名</span></div><div class="line">      packageName = mElements.getPackageOf(element).toString();</div><div class="line">      <span class="comment">//HelloWorld 注解只能被用在成员变量，所以通过获取外层元素就可以获取到使用注解的元素所在的类</span></div><div class="line">      className = element.getEnclosingElement().getSimpleName() + <span class="string">"_HelloWorld"</span>;</div><div class="line">      <span class="keyword">try</span> &#123;</div><div class="line">        <span class="comment">//通过 Filer 指定的路径下创建一个 java 源文件，然后写入对应的代码</span></div><div class="line">        JavaFileObject javaFileObject = mFiler.createSourceFile(</div><div class="line">        packageName + <span class="string">"."</span> + className);</div><div class="line">        Writer writer = javaFileObject.openWriter();</div><div class="line">        writer.write(<span class="string">"package "</span> + packageName + <span class="string">";\n\n"</span>);</div><div class="line">        writer.write(<span class="string">"import android.content.Context;\n"</span>);</div><div class="line">        writer.write(<span class="string">"import android.widget.Toast;\n\n"</span>);</div><div class="line">        writer.write(<span class="string">"public class "</span> + className + <span class="string">" &#123;\n\n"</span>);</div><div class="line">        writer.write(<span class="string">"\tpublic static void show(Context context) &#123;\n"</span>);</div><div class="line">        writer.write(<span class="string">"\t\tToast.makeText(context,"</span></div><div class="line">        + <span class="string">" \"HelloWorld\", Toast.LENGTH_SHORT).show();\n"</span>);</div><div class="line">        writer.write(<span class="string">"\t&#125;\n"</span>);</div><div class="line">        writer.write(<span class="string">"\n&#125;"</span>);</div><div class="line">        writer.flush();</div><div class="line">        writer.close();</div><div class="line">      &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">        e.printStackTrace();</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">/**</span></div><div class="line">  *</div><div class="line">  * <span class="doctag">@return</span> 返回注解处理器支持的 Java 版本</div><div class="line">  */</div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> SourceVersion <span class="title">getSupportedSourceVersion</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> SourceVersion.latestSupported();</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">/**</span></div><div class="line">  *</div><div class="line">  * <span class="doctag">@return</span> 返回注解处理器支持的注解集合</div><div class="line">  */</div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> Set&lt;String&gt; <span class="title">getSupportedAnnotationTypes</span><span class="params">()</span> </span>&#123;</div><div class="line">    Set&lt;String&gt; annotationTypes = <span class="keyword">new</span> LinkedHashSet&lt;&gt;();</div><div class="line">    <span class="keyword">for</span> (Class&lt;? extends Annotation&gt; annotation : getSupportedAnnotations()) &#123;</div><div class="line">      annotationTypes.add(annotation.getCanonicalName());</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> annotationTypes;</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="comment">/**</span></div><div class="line">  *</div><div class="line">  * <span class="doctag">@return</span> 返回支持的注解类型集合</div><div class="line">  */</div><div class="line">  <span class="keyword">private</span> Set&lt;Class&lt;? extends Annotation&gt;&gt; getSupportedAnnotations() &#123;</div><div class="line">    Set&lt;Class&lt;? extends Annotation&gt;&gt; annotationSet = <span class="keyword">new</span> LinkedHashSet&lt;&gt;();</div><div class="line">    annotationSet.add(HelloWorld.class);</div><div class="line"> </div><div class="line">    <span class="keyword">return</span> annotationSet;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>接下来说下几个有助于理解注解处理器的点：</p>
<ul>
<li><p>Elements 是一个获取程序元素信息的接口，例如获取元素的包名、判断是否是重写方法，例如</p>
<p><img src="https://ws2.sinaimg.cn/large/006tNc79gy1fnhpc87z4nj30900bcq32.jpg" alt=""></p>
</li>
<li><p>Filer 则是一个支持通过注解处理器创建文件的接口，可以用于创建 Class文件、源文件、资源文件</p>
<p><img src="https://ws3.sinaimg.cn/large/006tNc79gy1fnhpj2enf9j308y03imx1.jpg" alt=""></p>
</li>
<li><p>Messager 则是为注解处理器提供的输出错误信息的接口。</p>
<p><img src="https://ws3.sinaimg.cn/large/006tNc79gy1fnhpjl1kmcj308z03mjr8.jpg" alt=""></p>
</li>
<li><p>Element 与 Elements 区别在于 Element 是获取单个程序元素信息的接口，而 Elements 可以获取整个程序的元素信息。除了 Element 之外，上述程序还可以看到 TypeElement，而 TypeElement 是一个继承了 Element 接口的接口，用于表示类元素。实际上 JDK 还提供了很多继承自 Element 的接口用于表示程序中的各项元素，具体的 Element 继承结构如下图所示：</p>
<p><img src="https://ws3.sinaimg.cn/large/006tNc79gy1fnhpc82cpmj30930820sz.jpg" alt=""></p>
</li>
</ul>
<p>在编写完注解处理器之后，最后在 App 模块中编写对应的调用代码即可</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</div><div class="line">  <span class="keyword">try</span> &#123;</div><div class="line">    <span class="comment">//获得生成的类的 Class 对象</span></div><div class="line">    Class&lt;?&gt; helloClass = Class.forName(getPackageName() + <span class="string">"."</span></div><div class="line">    + getClass().getSimpleName() + <span class="string">"_HelloWorld"</span>);</div><div class="line">    <span class="comment">//利用反射取得 show 方法，然后执行对应的方法即可</span></div><div class="line">    Method showMethod = helloClass.getMethod(<span class="string">"show"</span>, Context.class);</div><div class="line">    showMethod.invoke(<span class="keyword">this</span>, <span class="keyword">this</span>);</div><div class="line">  &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">    e.printStackTrace();</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>实际上编译时注解的整个处理过程是利用注解处理器对程序中使用了注解的元素进行遍历，从元素中提取所需的信息，然后生成类文件，最后在程序中加载生成的类并调用其中的方法。</p>
<p>最后给出本次测试的工程链接 <a href="https://github.com/firstdream10/Android-Study-Project/tree/master/Annotation" target="_blank" rel="external">Annotation 测试</a></p>
</li>
</ol>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>最后让我们回答开始的几个问题</p>
<ol>
<li><p>注解是一种用于描述程序元素信息的修饰符，可以用来修饰包、类、构造器、方法、成员变量、参数、局部变量。</p>
</li>
<li><p>当我们需要为程序中的元素提供信息，并且这些信息得到处理的时候，就可以考虑使用注解。</p>
</li>
<li><p>按照系统内置的注解，可以分为<strong>基本注解、元注解、自定义注解</strong>。按照是否有成员变量可以分为<strong>标记注解、元数据注解</strong>。按照处理方式，可以分为<strong>运行时注解、编译时注解</strong>。</p>
</li>
<li><p>注解的处理过程主要为运行时通过反射处理和编译时通过注解处理器进行处理。</p>
</li>
</ol>
<h2 id="Thanks"><a href="#Thanks" class="headerlink" title="Thanks"></a>Thanks</h2><ul>
<li>《Java 编程思想》</li>
<li>《疯狂 Java 讲义》</li>
<li><a href="https://docs.oracle.com/javase/tutorial/java/annotations/index.html" target="_blank" rel="external">Annotation Tutorials</a></li>
<li><a href="http://blog.csdn.net/doc_sgl/article/details/50367083" target="_blank" rel="external">自己动手实现Java注解（Java Annotation in Action）</a></li>
<li><a href="http://www.jianshu.com/p/b6b3283968e0" target="_blank" rel="external">注解处理器（Annotation Processor）原理简析</a></li>
<li><a href="http://www.cnblogs.com/whoislcj/p/6168641.html" target="_blank" rel="external">Android注解使用之通过annotationProcessor注解生成代码实现自己的ButterKnife框架</a></li>
<li><a href="http://www.cnblogs.com/whoislcj/p/6148410.html" target="_blank" rel="external">Android注解使用之注解编译android-apt如何切换到annotationProcessor</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h2&gt;&lt;p&gt;关于注解首先请思考一下以下问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;注解是什么？&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;注解的主要使用场景？&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;注解可以分为哪些类型？&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;注解的处理过程？&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;接下来我们将对这几个问题进行探讨
    
    </summary>
    
      <category term="Java基础" scheme="http://www.rookieyang.cn/categories/Java%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Java" scheme="http://www.rookieyang.cn/tags/Java/"/>
    
      <category term="注解" scheme="http://www.rookieyang.cn/tags/%E6%B3%A8%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>2018的学习计划</title>
    <link href="http://www.rookieyang.cn/2018/01/07/2018%E8%AE%A1%E5%88%92/"/>
    <id>http://www.rookieyang.cn/2018/01/07/2018计划/</id>
    <published>2018-01-07T13:48:26.000Z</published>
    <updated>2018-01-15T15:29:56.000Z</updated>
    
    <content type="html"><![CDATA[<p>拖了很久终于准备好给自己安排下新年计划了，回顾过去的这半年真的是惨不忍睹，每个方面都显得毫无章法。就技术而言，感觉不懂的很多，想学习的方面也挺多的，但是由于焦虑感却始终无法沉下心来进行学习，导致每个知识点只是蜻蜓点水般的过去了。所以 2018 想对 2017 做一个反思，顺便给自己一个明确的方向。<a id="more"></a></p>
<h4 id="2017-的缺陷"><a href="#2017-的缺陷" class="headerlink" title="2017 的缺陷"></a>2017 的缺陷</h4><ol>
<li><p>没有很好处理焦虑感</p>
<p>刚刚进入公司本身处于一种急功近利的状态，而同时感觉需要学习的方面挺多的，两者加在一起导致了始终处于一种焦虑的状态，无法沉下心的去学习。</p>
</li>
<li><p>缺乏一个明确的学习路线和执行力</p>
<p>实际上 9 月底的时候曾经制作一份粗略的学习计划表，but 自己没有很好的执行下去，尽管有这样或那样的原因，但总归还是执行力的问题。</p>
</li>
<li><p>实践问题</p>
<p>现在能够很容易感受到的一个问题是一个知识点弄懂了进行记录了，但是过段时间还是会忘记，能够确认是有效代码写的太少，必须要学着自己去做一些 demo 去实践，顺便做一些小项目，最好是模仿别人的 APP 进行制作，完全自己去思考功能的话耗费的时间太多，最好在已有 APP 上实现然后进行发散。</p>
</li>
<li><p>博客的问题</p>
<p>博客到现在停了有三四个月了，自己写博客很慢，但是这个习惯还是必须要养成，写博客的过程就是总结和整合思维的过程，而且自己的文笔本来就不好需要锻炼。</p>
</li>
</ol>
<h4 id="2018-的新希望"><a href="#2018-的新希望" class="headerlink" title="2018 的新希望"></a>2018 的新希望</h4><p>希望自己通过这一年的坚持至少能够成为一名合格的初级工程师</p>
<ol>
<li><p>状态问题</p>
<p>目前还不是最好的状态，仍然需要继续调整，具体而言需要自己对每天有个规划不能够太浪费时间，除了每天完成工作任务之外，更重要的需要具备一定的规划性，无论是看书亦或是编码皆可。</p>
</li>
<li><p>学习路线的规划和执行</p>
<p>执行力这种说是没用的，看自己的决心吧。至于学习路线，去年参考一些博客制定了整个 Android 学习计划的路线，但是个人觉得这样并不太合适，毕竟现在的目标是成为一名合格的初级工程师。所以整个的思路是：</p>
<ul>
<li>制定关于基础方面的计划，目前大致分为：Java 基础、Android 基础、数据结构和算法、网络协议、设计模式、读书笔记、常用框架。大致计划已经整理出来了</li>
<li>以周为单位尽可能解决一个大的知识点，并整理成文章发表出去（多平台希望接受别人的指正）</li>
<li>其余的小知识点和进阶知识点会将整理在 Gitbook 上</li>
<li>最后需要对笔记和文章进行良好的分类</li>
</ul>
</li>
<li><p>实践问题</p>
<p>今年可能会完成两个 APP，一个是关于单词记忆的（已经做了很久了，简直给自己挖了一个大坑，代码奇烂无比），另外一个是关于获取网络壁纸的。</p>
<p>除此之外希望每个星期能安排半天给自己单纯的编码时间（必须要平衡理论学习和实践），主要是和自己做的 APP 相关或者模仿别人的 Demo</p>
</li>
<li><p>博客问题</p>
<p>目前主要需要进行整理，之前的博客已经修正了分类，博客的分类大致与整理出来的计划表相对应，后续写博客的时候希望精益求精，看到之前写的博客真的很头痛，不在量而在质。</p>
</li>
</ol>
<p>除了上述所说，今年希望自己能够时刻保持足够的敏感度，不要陷入舒适区，编码的时候多考虑用没接触过的方式去实现。</p>
<p>当然这些都是目前自己的理想规划，最重要的是保持一颗坚持的心，然后针对当前状况及时作出调整。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;拖了很久终于准备好给自己安排下新年计划了，回顾过去的这半年真的是惨不忍睹，每个方面都显得毫无章法。就技术而言，感觉不懂的很多，想学习的方面也挺多的，但是由于焦虑感却始终无法沉下心来进行学习，导致每个知识点只是蜻蜓点水般的过去了。所以 2018 想对 2017 做一个反思，顺便给自己一个明确的方向。
    
    </summary>
    
      <category term="新年计划" scheme="http://www.rookieyang.cn/categories/%E6%96%B0%E5%B9%B4%E8%AE%A1%E5%88%92/"/>
    
    
      <category term="新年计划" scheme="http://www.rookieyang.cn/tags/%E6%96%B0%E5%B9%B4%E8%AE%A1%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>Android 启动过程简析（二）之 zygote 进程</title>
    <link href="http://www.rookieyang.cn/2017/11/05/Android%E5%90%AF%E5%8A%A8%E8%BF%87%E7%A8%8B%E7%AE%80%E6%9E%90%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <id>http://www.rookieyang.cn/2017/11/05/Android启动过程简析（二）/</id>
    <published>2017-11-05T15:30:49.000Z</published>
    <updated>2018-01-21T16:30:44.700Z</updated>
    
    <content type="html"><![CDATA[<h2 id="zygote-启动过程"><a href="#zygote-启动过程" class="headerlink" title="zygote 启动过程"></a>zygote 启动过程</h2><p>上文已经分析过，zygote 在 frameworks/base/cmds/app_process/app_main.cpp 中的 main 函数启动，但是在 zygote 启动过程中具体做了一些什么工作呢？本文将对此进行分析。<a id="more"></a></p>
<h3 id="app-main-分析"><a href="#app-main-分析" class="headerlink" title="app_main 分析"></a>app_main 分析</h3><p>首先从启动入口进行分析</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div></pre></td><td class="code"><pre><div class="line">int main(int argc, char* const argv[])</div><div class="line">&#123;</div><div class="line">    ...</div><div class="line">    //创建 AppRuntime 对象</div><div class="line">    AppRuntime runtime(argv[0], computeArgBlockSize(argc, argv));</div><div class="line">    ...</div><div class="line"></div><div class="line">    // 解析运行时参数，当遇到无法识别的选项时停止</div><div class="line">    bool zygote = false;</div><div class="line">    bool startSystemServer = false;</div><div class="line">    bool application = false;</div><div class="line">    String8 niceName;</div><div class="line">    String8 className;</div><div class="line"></div><div class="line">    ++i;  // Skip unused "parent dir" argument.</div><div class="line">    while (i &lt; argc) &#123;</div><div class="line">        const char* arg = argv[i++];</div><div class="line">      //如果传入的参数有 ”--zygote“ 则将 zygote 置为 true</div><div class="line">        if (strcmp(arg, "--zygote") == 0) &#123;</div><div class="line">            zygote = true;</div><div class="line">            niceName = ZYGOTE_NICE_NAME;</div><div class="line">          //如果传入的参数有 "--start-system-server" 则将 startSystemServer 置为 true</div><div class="line">        &#125; else if (strcmp(arg, "--start-system-server") == 0) &#123;</div><div class="line">            startSystemServer = true;</div><div class="line">        &#125; else if (strcmp(arg, "--application") == 0) &#123;</div><div class="line">            application = true;</div><div class="line">        &#125; else if (strncmp(arg, "--nice-name=", 12) == 0) &#123;</div><div class="line">            niceName.setTo(arg + 12);</div><div class="line">        &#125; else if (strncmp(arg, "--", 2) != 0) &#123;</div><div class="line">            className.setTo(arg);</div><div class="line">            break;</div><div class="line">        &#125; else &#123;</div><div class="line">            --i;</div><div class="line">            break;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    Vector&lt;String8&gt; args;</div><div class="line">  //非 zygote 模式处理</div><div class="line">    if (!className.isEmpty()) &#123;</div><div class="line">        // We're not in zygote mode, the only argument we need to pass</div><div class="line">        // to RuntimeInit is the application argument.</div><div class="line">        //</div><div class="line">        // The Remainder of args get passed to startup class main(). Make</div><div class="line">        // copies of them before we overwrite them with the process name.</div><div class="line">        args.add(application ? String8("application") : String8("tool"));</div><div class="line">        runtime.setClassNameAndArgs(className, argc - i, argv + i);</div><div class="line">    &#125; else &#123;</div><div class="line">        //zygote 模式下的处理</div><div class="line">        maybeCreateDalvikCache();</div><div class="line">      </div><div class="line">      //如果 startSystemServer 为 true 则将 "start-system-server" 添加到 args</div><div class="line">        if (startSystemServer) &#123;</div><div class="line">            args.add(String8("start-system-server"));</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        char prop[PROP_VALUE_MAX];</div><div class="line">        if (property_get(ABI_LIST_PROPERTY, prop, NULL) == 0) &#123;</div><div class="line">            LOG_ALWAYS_FATAL("app_process: Unable to determine ABI list from property %s.",</div><div class="line">                ABI_LIST_PROPERTY);</div><div class="line">            return 11;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        String8 abiFlag("--abi-list=");</div><div class="line">        abiFlag.append(prop);</div><div class="line">        args.add(abiFlag);</div><div class="line"></div><div class="line">        // In zygote mode, pass all remaining arguments to the zygote</div><div class="line">        // main() method.</div><div class="line">        for (; i &lt; argc; ++i) &#123;</div><div class="line">            args.add(String8(argv[i]));</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    if (!niceName.isEmpty()) &#123;</div><div class="line">        runtime.setArgv0(niceName.string());</div><div class="line">        set_process_name(niceName.string());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">  //如果 zygote 为 true 则启动 zygote</div><div class="line">    if (zygote) &#123;</div><div class="line">      //通过 runtime 对象启动 zygote</div><div class="line">        runtime.start("com.android.internal.os.ZygoteInit", args, zygote);</div><div class="line">    &#125; else if (className) &#123;</div><div class="line">        runtime.start("com.android.internal.os.RuntimeInit", args, zygote);</div><div class="line">    &#125; else &#123;</div><div class="line">        fprintf(stderr, "Error: no class name or --zygote supplied.\n");</div><div class="line">        app_usage();</div><div class="line">        LOG_ALWAYS_FATAL("app_process: no class name or --zygote supplied.");</div><div class="line">        return 10;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以看到在 main 函数中首先创建了一个 AppRuntime 对象，然后就会对传入的参数进行判断，之所以需要判断 – start-system-server 的原因在于  init.zygote64_32.rc 中 32 位进程没有此项参数，之后当首次启动 zygote 的时候会将 “start-system-server” 增加到 args，最后通过 AppRuntime 对象启动 zygote 并将 args 传递过去。</p>
<h3 id="AndroidRuntime-分析"><a href="#AndroidRuntime-分析" class="headerlink" title="AndroidRuntime 分析"></a>AndroidRuntime 分析</h3><p>上一部分分析了 zygote 通过 AppRuntime 对象进行启动的，而 AppRuntime 继承自 AndroidRuntime，所以想要了解启动 zygote 过程则需要继续了解 AndroidRuntime 的 start 函数</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> AppRuntime : <span class="keyword">public</span> AndroidRuntime</div></pre></td></tr></table></figure>
<p>AndroidRuntime 位于 frameworks/base/core/jni</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"> * Start the Android runtime.  This involves starting the virtual machine</div><div class="line"> * and calling the "static void main(String[] args)" method in the class</div><div class="line"> * named by "className".</div><div class="line"> *</div><div class="line"> * Passes the main function two arguments, the class name and the specified</div><div class="line"> * options string.</div><div class="line"> */</div><div class="line"><span class="keyword">void</span> AndroidRuntime::start(<span class="keyword">const</span> <span class="keyword">char</span>* className, <span class="keyword">const</span> Vector&lt;String8&gt;&amp; options, <span class="keyword">bool</span> zygote)</div><div class="line">&#123;</div><div class="line">    ...</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">const</span> String8 <span class="title">startSystemServer</span><span class="params">(<span class="string">"start-system-server"</span>)</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">/*</span></div><div class="line">     * 'startSystemServer == true' means runtime is obsolete and not run from</div><div class="line">     * init.rc anymore, so we print out the boot start event here.</div><div class="line">     */</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; options.size(); ++i) &#123;</div><div class="line">      <span class="comment">//只有 startSystemServer == true，options 才会有 start-system-server</span></div><div class="line">        <span class="keyword">if</span> (options[i] == startSystemServer) &#123;</div><div class="line">           <span class="comment">/* track our progress through the boot sequence */</span></div><div class="line">           <span class="keyword">const</span> <span class="keyword">int</span> LOG_BOOT_PROGRESS_START = <span class="number">3000</span>;</div><div class="line">           LOG_EVENT_LONG(LOG_BOOT_PROGRESS_START,  ns2ms(systemTime(SYSTEM_TIME_MONOTONIC)));</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    ...</div><div class="line"></div><div class="line">    <span class="comment">//const char* kernelHack = getenv("LD_ASSUME_KERNEL");</span></div><div class="line">    <span class="comment">//ALOGD("Found LD_ASSUME_KERNEL='%s'\n", kernelHack);</span></div><div class="line"></div><div class="line">    <span class="comment">/* start the virtual machine */</span></div><div class="line">    JniInvocation jni_invocation;</div><div class="line">    jni_invocation.Init(<span class="literal">NULL</span>);</div><div class="line">    JNIEnv* env;</div><div class="line">    <span class="comment">//创建启动 DVM</span></div><div class="line">    <span class="keyword">if</span> (startVm(&amp;mJavaVM, &amp;env, zygote) != <span class="number">0</span>) &#123;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    onVmCreated(env);</div><div class="line"></div><div class="line">    <span class="comment">/*</span></div><div class="line">     * Register android functions.</div><div class="line">     */</div><div class="line">    <span class="comment">//注册 JNI 方法</span></div><div class="line">    <span class="keyword">if</span> (startReg(env) &lt; <span class="number">0</span>) &#123;</div><div class="line">        ALOGE(<span class="string">"Unable to register all android natives\n"</span>);</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/*</span></div><div class="line">     * We want to call main() with a String array with arguments in it.</div><div class="line">     * At present we have two arguments, the class name and an option string.</div><div class="line">     * Create an array to hold them.</div><div class="line">     */</div><div class="line">    <span class="comment">//将 options 转化为 java 中的 String 数组</span></div><div class="line">    jclass stringClass;</div><div class="line">    jobjectArray strArray;</div><div class="line">    jstring classNameStr;</div><div class="line"></div><div class="line">    stringClass = env-&gt;FindClass(<span class="string">"java/lang/String"</span>);</div><div class="line">    assert(stringClass != <span class="literal">NULL</span>);</div><div class="line">    <span class="comment">//创建对象数组，类型为 stringClass（即 String 类型），长度为 options.size() + 1</span></div><div class="line">    strArray = env-&gt;NewObjectArray(options.size() + <span class="number">1</span>, stringClass, <span class="literal">NULL</span>);</div><div class="line">    assert(strArray != <span class="literal">NULL</span>);</div><div class="line">    classNameStr = env-&gt;NewStringUTF(className);</div><div class="line">    assert(classNameStr != <span class="literal">NULL</span>);</div><div class="line">    env-&gt;SetObjectArrayElement(strArray, <span class="number">0</span>, classNameStr);</div><div class="line"></div><div class="line">    <span class="comment">//将 options 逐个增加到对象数组当中</span></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; options.size(); ++i) &#123;</div><div class="line">        jstring optionsStr = env-&gt;NewStringUTF(options.itemAt(i).<span class="built_in">string</span>());</div><div class="line">        assert(optionsStr != <span class="literal">NULL</span>);</div><div class="line">        env-&gt;SetObjectArrayElement(strArray, i + <span class="number">1</span>, optionsStr);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/*</span></div><div class="line">     * Start VM.  This thread becomes the main thread of the VM, and will</div><div class="line">     * not return until the VM exits.</div><div class="line">     */</div><div class="line">    <span class="keyword">char</span>* slashClassName = toSlashClassName(className);</div><div class="line">    <span class="comment">//寻找类名为 slashClassName 的类</span></div><div class="line">    jclass startClass = env-&gt;FindClass(slashClassName);</div><div class="line">    <span class="keyword">if</span> (startClass == <span class="literal">NULL</span>) &#123;</div><div class="line">        ALOGE(<span class="string">"JavaVM unable to locate class '%s'\n"</span>, slashClassName);</div><div class="line">        <span class="comment">/* keep going */</span></div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="comment">//查找 main 方法，([Ljava/lang/String;)V 是 main 方法的签名</span></div><div class="line">        jmethodID startMeth = env-&gt;GetStaticMethodID(startClass, <span class="string">"main"</span>,</div><div class="line">            <span class="string">"([Ljava/lang/String;)V"</span>);</div><div class="line">        <span class="keyword">if</span> (startMeth == <span class="literal">NULL</span>) &#123;</div><div class="line">            ALOGE(<span class="string">"JavaVM unable to find main() in '%s'\n"</span>, className);</div><div class="line">            <span class="comment">/* keep going */</span></div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="comment">//调用 startClass 类当中的 main 方法，传入参数 strArray</span></div><div class="line">            env-&gt;CallStaticVoidMethod(startClass, startMeth, strArray);</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">if</span> 0</span></div><div class="line">            <span class="keyword">if</span> (env-&gt;ExceptionCheck())</div><div class="line">                threadExitUncaughtException(env);</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>通过 start 函数的注释我们可以大致了解到 <strong>start 函数的主要作用是启动虚拟机和名为 classname 的 main 方法</strong>。</p>
<p>首先 start 函数会判断传递进来的参数是否存在 “start-system-server” ，如果是的话就会输出启动日志，然后会通过 startVm 函数创建启动 DVM，在启动 DVM 之后会通过 startReg 函数注册 JNI 方法，注册完毕之后会将传入的 options 参数转换为 Java 的对象数组，之所以需要转换成对象数组是因为要作为 main 方法的参数传入，在完成这一切之后会通过 className 去获取到 jclass 对象，最后通过 main 方法的签名找到 main 方法并执行。具体执行的是什么类的 main 方法呢？查看 app_main 可以知道，className 是 “com.android.internal.os.ZygoteInit”， 所以最终执行的就是 ZygoteInit 的main 方法。</p>
<h3 id="ZygoteInit-分析"><a href="#ZygoteInit-分析" class="headerlink" title="ZygoteInit 分析"></a>ZygoteInit 分析</h3><p>ZygoteInit.java 位于frameworks/base/core/java/com/android/internal/os 下</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String argv[])</span> </span>&#123;</div><div class="line">    ...</div><div class="line">    String socketName = <span class="string">"zygote"</span>;</div><div class="line">    ...</div><div class="line"></div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        ...</div><div class="line">        <span class="comment">//注册 socket</span></div><div class="line">        registerZygoteSocket(socketName);</div><div class="line">        ...</div><div class="line">        <span class="comment">//预加载类和资源</span></div><div class="line">        preload();</div><div class="line">        ...</div><div class="line">        <span class="keyword">if</span> (startSystemServer) &#123;</div><div class="line">            <span class="comment">//创建 SystemServer 进程</span></div><div class="line">            startSystemServer(abiList, socketName);</div><div class="line">        &#125;</div><div class="line">      </div><div class="line">        ...</div><div class="line">        <span class="comment">//等待客户端请求</span></div><div class="line">        runSelectLoop(abiList);</div><div class="line">      	...</div><div class="line">      </div><div class="line">        closeServerSocket();</div><div class="line">    &#125; <span class="keyword">catch</span> (MethodAndArgsCaller caller) &#123;</div><div class="line">        caller.run();</div><div class="line">    &#125; <span class="keyword">catch</span> (RuntimeException ex) &#123;</div><div class="line">        Log.e(TAG, <span class="string">"Zygote died with exception"</span>, ex);</div><div class="line">        closeServerSocket();</div><div class="line">        <span class="keyword">throw</span> ex;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>main 方法中通过 registerZygoteSocket 方法对 socket 进行了注册，注册的 socket 用于和 ActivityManagerService 进行通信，然后调用 preload  方法对类和资源进行加载，之后调用 startSystemServer 创建 SystemServer 进程，最后通过 runSelectLoop 等待来自 ActivityManagerService 的请求。 这里最为关键的是 socket 以及 SystemServer 进程，所以我们需要进一步了解这两个部分。</p>
<h4 id="注册-Socket-过程"><a href="#注册-Socket-过程" class="headerlink" title="注册 Socket 过程"></a>注册 Socket 过程</h4><p>首先是注册 Socket 部分， registerZygoteSocket 主要是利用文件描述符创建了一个 LocalServerSocket 对象</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">registerZygoteSocket</span><span class="params">(String socketName)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (sServerSocket == <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">int</span> fileDesc;</div><div class="line">      <span class="comment">//socket 名为 ANDROID_SOCKET_zygote</span></div><div class="line">        <span class="keyword">final</span> String fullSocketName = ANDROID_SOCKET_PREFIX + socketName;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            String env = System.getenv(fullSocketName);</div><div class="line">            fileDesc = Integer.parseInt(env);</div><div class="line">        &#125; <span class="keyword">catch</span> (RuntimeException ex) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(fullSocketName + <span class="string">" unset or invalid"</span>, ex);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            FileDescriptor fd = <span class="keyword">new</span> FileDescriptor();</div><div class="line">            fd.setInt$(fileDesc);</div><div class="line">          <span class="comment">//创建 LocalServerSockt</span></div><div class="line">            sServerSocket = <span class="keyword">new</span> LocalServerSocket(fd);</div><div class="line">        &#125; <span class="keyword">catch</span> (IOException ex) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(</div><div class="line">                    <span class="string">"Error binding to local socket '"</span> + fileDesc + <span class="string">"'"</span>, ex);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="启动-SystemServer"><a href="#启动-SystemServer" class="headerlink" title="启动 SystemServer"></a>启动 SystemServer</h4><p>startSystemServer 主要工作是利用设置的参数通过 forkSystemServer 创建 SystemServer 进程，然后在 SystemServer 进程中调用 handleSystemServerProcess 方法</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">startSystemServer</span><span class="params">(String abiList, String socketName)</span></span></div><div class="line">        <span class="keyword">throws</span> MethodAndArgsCaller, RuntimeException &#123;</div><div class="line">...</div><div class="line">    <span class="comment">/* Hardcoded command line to start the system server */</span></div><div class="line">  <span class="comment">//设置 uid 为 1000,设置 gid 为 1000，启动 com.android.server.SystemServer</span></div><div class="line">    String args[] = &#123;</div><div class="line">        <span class="string">"--setuid=1000"</span>,</div><div class="line">        <span class="string">"--setgid=1000"</span>,</div><div class="line">        <span class="comment">/// M: ANR mechanism for system_server add shell(2000) group to access</span></div><div class="line">        <span class="comment">///    /sys/kernel/debug/tracing/tracing_on</span></div><div class="line">        <span class="string">"--setgroups=1001,1002,1003,1004,1005,1006,1007,1008,1009,1010,1018,1021,1032,2000,"</span> +</div><div class="line">            <span class="string">"3001,3002,3003,3006,3007,3009,3010"</span>,</div><div class="line">        <span class="string">"--capabilities="</span> + capabilities + <span class="string">","</span> + capabilities,</div><div class="line">        <span class="string">"--nice-name=system_server"</span>,</div><div class="line">        <span class="string">"--runtime-args"</span>,</div><div class="line">        <span class="string">"com.android.server.SystemServer"</span>,</div><div class="line">    &#125;;</div><div class="line">    ZygoteConnection.Arguments parsedArgs = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> pid;</div><div class="line"></div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">      <span class="comment">//对 args 进行解析</span></div><div class="line">        parsedArgs = <span class="keyword">new</span> ZygoteConnection.Arguments(args);</div><div class="line">        ZygoteConnection.applyDebuggerSystemProperty(parsedArgs);</div><div class="line">        ZygoteConnection.applyInvokeWithSystemProperty(parsedArgs);</div><div class="line"></div><div class="line">        <span class="comment">/* Request to fork the system server process */</span></div><div class="line">      <span class="comment">//创建 SystemServer 进程</span></div><div class="line">        pid = Zygote.forkSystemServer(</div><div class="line">                parsedArgs.uid, parsedArgs.gid,</div><div class="line">                parsedArgs.gids,</div><div class="line">                parsedArgs.debugFlags,</div><div class="line">                <span class="keyword">null</span>,</div><div class="line">                parsedArgs.permittedCapabilities,</div><div class="line">                parsedArgs.effectiveCapabilities);</div><div class="line">    &#125; <span class="keyword">catch</span> (IllegalArgumentException ex) &#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(ex);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/* For child process */</span></div><div class="line">    <span class="keyword">if</span> (pid == <span class="number">0</span>) &#123;</div><div class="line">        <span class="keyword">if</span> (hasSecondZygote(abiList)) &#123;</div><div class="line">            waitForSecondaryZygote(socketName);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        handleSystemServerProcess(parsedArgs);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="监听客户端的请求"><a href="#监听客户端的请求" class="headerlink" title="监听客户端的请求"></a>监听客户端的请求</h4><p>runSelectLoop 的主要工作是通过 ZygoteConnection 的 acceptCommandPeer 方法监听客户端的请求，然后调用 runOnce 方法对来自客户端的请求进行处理。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">runSelectLoop</span><span class="params">(String abiList)</span> <span class="keyword">throws</span> MethodAndArgsCaller </span>&#123;</div><div class="line">    ArrayList&lt;FileDescriptor&gt; fds = <span class="keyword">new</span> ArrayList&lt;FileDescriptor&gt;();</div><div class="line">    ArrayList&lt;ZygoteConnection&gt; peers = <span class="keyword">new</span> ArrayList&lt;ZygoteConnection&gt;();</div><div class="line"></div><div class="line">    fds.add(sServerSocket.getFileDescriptor());</div><div class="line">    peers.add(<span class="keyword">null</span>);</div><div class="line"></div><div class="line">  <span class="comment">//循环处理连接请求</span></div><div class="line">    <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</div><div class="line">        StructPollfd[] pollFds = <span class="keyword">new</span> StructPollfd[fds.size()];</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; pollFds.length; ++i) &#123;</div><div class="line">            pollFds[i] = <span class="keyword">new</span> StructPollfd();</div><div class="line">            pollFds[i].fd = fds.get(i);</div><div class="line">            pollFds[i].events = (<span class="keyword">short</span>) POLLIN;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            Os.poll(pollFds, -<span class="number">1</span>);<span class="comment">//无限等待能够进行 I/O 操作</span></div><div class="line">        &#125; <span class="keyword">catch</span> (ErrnoException ex) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"poll failed"</span>, ex);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = pollFds.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i) &#123;</div><div class="line">            <span class="keyword">if</span> ((pollFds[i].revents &amp; POLLIN) == <span class="number">0</span>) &#123;<span class="comment">//说明不可读跳过</span></div><div class="line">                <span class="keyword">continue</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (i == <span class="number">0</span>) &#123;<span class="comment">//不存在未处理的连接，所以可以继续等待新的连接</span></div><div class="line">                ZygoteConnection newPeer = acceptCommandPeer(abiList);<span class="comment">//等待连接</span></div><div class="line">                peers.add(newPeer);</div><div class="line">                fds.add(newPeer.getFileDesciptor());</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="keyword">boolean</span> done = peers.get(i).runOnce();<span class="comment">//处理请求，创建对应的进程</span></div><div class="line">                <span class="keyword">if</span> (done) &#123;<span class="comment">//处理完毕则进行移除</span></div><div class="line">                    peers.remove(i);</div><div class="line">                    fds.remove(i);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="处理客户端请求"><a href="#处理客户端请求" class="headerlink" title="处理客户端请求"></a>处理客户端请求</h4><p>上文说到 runOnce 负责处理来自客户端的请求，而 runOnce 方法中主要做的工作是从连接中读取参数，然后根据参数创建相应的进程。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">runOnce</span><span class="params">()</span> <span class="keyword">throws</span> ZygoteInit.MethodAndArgsCaller </span>&#123;</div><div class="line"></div><div class="line">    String args[];</div><div class="line">    Arguments parsedArgs = <span class="keyword">null</span>;</div><div class="line">        ...</div><div class="line"></div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        args = readArgumentList();<span class="comment">//读取参数</span></div><div class="line">        descriptors = mSocket.getAncillaryFileDescriptors();</div><div class="line">    &#125; <span class="keyword">catch</span> (IOException ex) &#123;</div><div class="line">        Log.w(TAG, <span class="string">"IOException on command socket "</span> + ex.getMessage());</div><div class="line">        closeSocket();</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (args == <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="comment">// EOF reached.</span></div><div class="line">        closeSocket();</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">        ...</div><div class="line"></div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        parsedArgs = <span class="keyword">new</span> Arguments(args);<span class="comment">//构造 Arguments 对象</span></div><div class="line">      </div><div class="line">        ...</div><div class="line">        <span class="comment">//创建进程</span></div><div class="line">        pid = Zygote.forkAndSpecialize(parsedArgs.uid, parsedArgs.gid, parsedArgs.gids,</div><div class="line">                parsedArgs.debugFlags, rlimits, parsedArgs.mountExternal, parsedArgs.seInfo,</div><div class="line">                parsedArgs.niceName, fdsToClose, parsedArgs.instructionSet,</div><div class="line">                parsedArgs.appDataDir);</div><div class="line">    &#125; <span class="keyword">catch</span> (ErrnoException ex) &#123;</div><div class="line">        logAndPrintError(newStderr, <span class="string">"Exception creating pipe"</span>, ex);</div><div class="line">    &#125; <span class="keyword">catch</span> (IllegalArgumentException ex) &#123;</div><div class="line">        logAndPrintError(newStderr, <span class="string">"Invalid zygote arguments"</span>, ex);</div><div class="line">    &#125; <span class="keyword">catch</span> (ZygoteSecurityException ex) &#123;</div><div class="line">        logAndPrintError(newStderr,</div><div class="line">                <span class="string">"Zygote security policy prevents request: "</span>, ex);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        <span class="keyword">if</span> (pid == <span class="number">0</span>) &#123;</div><div class="line">            <span class="comment">// in child</span></div><div class="line">            IoUtils.closeQuietly(serverPipeFd);</div><div class="line">            serverPipeFd = <span class="keyword">null</span>;</div><div class="line">            handleChildProc(parsedArgs, descriptors, childPipeFd, newStderr);</div><div class="line"></div><div class="line">            <span class="comment">// should never get here, the child is expected to either</span></div><div class="line">            <span class="comment">// throw ZygoteInit.MethodAndArgsCaller or exec().</span></div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="comment">// in parent...pid of &lt; 0 means failure</span></div><div class="line">            IoUtils.closeQuietly(childPipeFd);</div><div class="line">            childPipeFd = <span class="keyword">null</span>;</div><div class="line">            <span class="keyword">return</span> handleParentProc(pid, descriptors, serverPipeFd, parsedArgs);</div><div class="line">        &#125;</div><div class="line">    &#125; <span class="keyword">finally</span> &#123;</div><div class="line">        IoUtils.closeQuietly(childPipeFd);</div><div class="line">        IoUtils.closeQuietly(serverPipeFd);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>到这里我们大致能够知晓 Zygote 进程的启动过程和主要作用了：</p>
<ol>
<li>系统在启动 Zygote 的过程中首先启动了虚拟机，然后通过 JNI 调用了 ZygoteInit 中的 main 方法，由此系统从 C++ 的 FrameWork 层到了 Java 的 FrameWork 层，之后在则注册了用于和 ActvityManagerService 通信的 Socket，完成注册之后则会调用 startSystemServer 启动 SystemServer 进程，最后 Zygote 进程将会通过 runSelectLoop 对来自客户端的连接进行监听。</li>
<li>总的来说 Zygote 的主要作用启动 SystemServer 进程以及根据客户端的连接创建相应的进程。</li>
</ol>
<h2 id="Thanks"><a href="#Thanks" class="headerlink" title="Thanks"></a>Thanks</h2><ol>
<li><a href="http://blog.csdn.net/itachi85/article/details/55047104" target="_blank" rel="external"> Android系统启动流程（二）解析Zygote进程启动过程</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;zygote-启动过程&quot;&gt;&lt;a href=&quot;#zygote-启动过程&quot; class=&quot;headerlink&quot; title=&quot;zygote 启动过程&quot;&gt;&lt;/a&gt;zygote 启动过程&lt;/h2&gt;&lt;p&gt;上文已经分析过，zygote 在 frameworks/base/cmds/app_process/app_main.cpp 中的 main 函数启动，但是在 zygote 启动过程中具体做了一些什么工作呢？本文将对此进行分析。
    
    </summary>
    
      <category term="Android进阶" scheme="http://www.rookieyang.cn/categories/Android%E8%BF%9B%E9%98%B6/"/>
    
    
      <category term="Android" scheme="http://www.rookieyang.cn/tags/Android/"/>
    
      <category term="源码分析" scheme="http://www.rookieyang.cn/tags/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>Android 启动过程简析（一）之 init 进程</title>
    <link href="http://www.rookieyang.cn/2017/10/28/Android%E5%90%AF%E5%8A%A8%E8%BF%87%E7%A8%8B%E7%AE%80%E6%9E%90%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>http://www.rookieyang.cn/2017/10/28/Android启动过程简析（一）/</id>
    <published>2017-10-28T05:51:42.000Z</published>
    <updated>2018-01-15T14:47:36.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>在进入到 Android 启动过程之前先让我们思考以下几个问题</p>
<ol>
<li>Android 系统的启动过程是怎样的？</li>
<li>init 、zygote 进程是什么？在系统启动的过程中各自发挥了什么作用？</li>
<li>AMS、PMS 等这些服务是如何被启动的？</li>
<li>Launcher 是如何被启动的？</li>
</ol>
<p>此篇文章将针对 init 部分给出分析<a id="more"></a></p>
<h2 id="启动流程简述"><a href="#启动流程简述" class="headerlink" title="启动流程简述"></a>启动流程简述</h2><p>在了解 init 部分之前，首先简单介绍下系统的启动流程以便抓住主线，当我们通过电源键开启系统的时候，系统首先会加载 bootloader 程序到 RAM 中，然后通过 bootloader 将内核程序加载到 RAM 中，之后内核程序会创建init 进程，在 init 进程中会创建 zygote 进程，而 zygote 进程则会创建 DVM 并且启动 SystemServer 进程，通过SystemServer 系统会启动一系列的服务，包括常见的 AMS、PMS 等，最后再通过 AMS 进入到我们熟知的 Launcher 程序。</p>
<p>所以整个流程的关键点在于 <strong>init 进程如何创建 zygote、zygote 进程如何创建 SystemServer、SystemServer 进程如何启动 AMS、AMS 如何启动 Launcher。</strong></p>
<h2 id="init-启动流程分析"><a href="#init-启动流程分析" class="headerlink" title="init 启动流程分析"></a>init 启动流程分析</h2><p>由于 bootloader 和内核不是关心的重点，所以这里只是简单介绍它们的作用。</p>
<h3 id="加载运行-BootLoader"><a href="#加载运行-BootLoader" class="headerlink" title="加载运行 BootLoader"></a>加载运行 BootLoader</h3><p>在电源上电之后，CPU 中的操作控制器将发出控制信号，将程序计数器（PC）的内容送至地址寄存器（AR），之后启动对主存的读操作，最终将 BootLoader 加载到 RAM 当中。然后 BootLoader 开始执行，主要负责硬件的初始化，将内核程序加载到内存。</p>
<h3 id="init-进程的启动"><a href="#init-进程的启动" class="headerlink" title="init 进程的启动"></a>init 进程的启动</h3><p>内核启动之后将会初始化软硬件环境，加载驱动程序，挂载根文件系统，然后创建 init 进程，init 作为系统中的第一个用户进程，其进程号为 1，在创建 init 进程之时，系统会执行位于 <strong>system/core/init </strong>下的 init.cpp 程序</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>** argv)</span> </span>&#123;</div><div class="line">   ...</div><div class="line">    <span class="comment">//创建用户空间目录并挂载</span></div><div class="line">    <span class="keyword">if</span> (is_first_stage) &#123;</div><div class="line">        mount(<span class="string">"tmpfs"</span>, <span class="string">"/dev"</span>, <span class="string">"tmpfs"</span>, MS_NOSUID, <span class="string">"mode=0755"</span>);</div><div class="line">        mkdir(<span class="string">"/dev/pts"</span>, <span class="number">0755</span>);</div><div class="line">        mkdir(<span class="string">"/dev/socket"</span>, <span class="number">0755</span>);</div><div class="line">        mount(<span class="string">"devpts"</span>, <span class="string">"/dev/pts"</span>, <span class="string">"devpts"</span>, <span class="number">0</span>, <span class="literal">NULL</span>);</div><div class="line">        <span class="meta">#<span class="meta-keyword">define</span> MAKE_STR(x) __STRING(x)</span></div><div class="line">        mount(<span class="string">"proc"</span>, <span class="string">"/proc"</span>, <span class="string">"proc"</span>, <span class="number">0</span>, <span class="string">"hidepid=2,gid="</span> MAKE_STR(AID_READPROC));</div><div class="line">        mount(<span class="string">"sysfs"</span>, <span class="string">"/sys"</span>, <span class="string">"sysfs"</span>, <span class="number">0</span>, <span class="literal">NULL</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">   ...</div><div class="line"></div><div class="line">    signal_handler_init();</div><div class="line"></div><div class="line">    property_load_boot_defaults();</div><div class="line">    export_oem_lock_status();</div><div class="line">    <span class="comment">//启动属性服务</span></div><div class="line">    start_property_service();</div><div class="line">  	</div><div class="line">   ...</div><div class="line"></div><div class="line">    <span class="keyword">const</span> BuiltinFunctionMap function_map;</div><div class="line">    Action::set_function_map(&amp;function_map);</div><div class="line"></div><div class="line">    Parser&amp; parser = Parser::GetInstance();</div><div class="line">    parser.AddSectionParser(<span class="string">"service"</span>,<span class="built_in">std</span>::make_unique&lt;ServiceParser&gt;());</div><div class="line">    parser.AddSectionParser(<span class="string">"on"</span>, <span class="built_in">std</span>::make_unique&lt;ActionParser&gt;());</div><div class="line">    parser.AddSectionParser(<span class="string">"import"</span>, <span class="built_in">std</span>::make_unique&lt;ImportParser&gt;());</div><div class="line">    <span class="comment">//解析 init.rc 文件</span></div><div class="line">    parser.ParseConfig(<span class="string">"/init.rc"</span>);</div><div class="line">   ...</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以看到 init 进程主要做了三件事情：<strong>创建用户空间文件夹并挂载、启动属性服务、解析位于  system\core\rootdir 文件夹下的 init.rc 文件</strong>。</p>
<p>这里我们主要关注解析 in it.rc 文件的过程，因为 zygote 进程就是在这个过程中创建的。</p>
<h4 id="Android-Init-Language"><a href="#Android-Init-Language" class="headerlink" title="Android Init Language"></a>Android Init Language</h4><p>由于 init.rc 是一个用 Android 初始化语言（AIL）编写的文件，为了更好的理解 rc 文件的解析过程需要了解一部分 AIL 语法。</p>
<p>AIL 主要有五种类型语句 Actions、Commands、Services、Options、Imports，在 AIL 中每个部分表示为一个 Section，比如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">on boot</div><div class="line">    ifup lo</div><div class="line">    hostname localhost</div><div class="line">    domainname localdomain</div></pre></td></tr></table></figure>
<p>五种语句中只有 Actions、Services、Import 可以用于确定一个 Section。其中 Actions 由一系列 command 组成，Actions 拥有一个 trigger 用于确定何时执行这些命令。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">on &lt;trigger&gt;</div><div class="line">    &lt;command&gt;</div><div class="line">    &lt;command&gt;</div><div class="line">    &lt;command&gt;</div><div class="line"> </div><div class="line">on early-init //触发器 early-init</div><div class="line">    write /proc/1/oom_score_adj -1000 //command</div><div class="line">    write /proc/sys/kernel/sysrq 0</div></pre></td></tr></table></figure>
<p>Services 由一些 option 组成，其在初始化的时候启动，并可以在退出后重启（可选）。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">service &lt;name&gt; &lt;pathname&gt; [ &lt;argument&gt; ]*  //服务名、执行路径、参数</div><div class="line">        &lt;option&gt;  </div><div class="line">        &lt;option&gt; </div><div class="line">        </div><div class="line">service ueventd /sbin/ueventd </div><div class="line">    class core</div><div class="line">    critical</div><div class="line">    seclabel u:r:ueventd:s0</div></pre></td></tr></table></figure>
<p>Services 定义了自身的服务名、执行路径以及执行时传入的参数，option 用于指定何时和怎样启动 service，关于何时启动这里进行一下说明，Actions 中有一条命令是 class_start &lt;服务类别名&gt;  用于启动所有未运行的相同类别的 service，而 option 可以通过 class &lt;类别名&gt; 对 service 的类别名进行指定。<strong>所以 service 的启动一般是通过 action 触发之后执行 class_start 命令进行启动的。</strong></p>
<p>AIL 的介绍就到这了，<strong>如果想要详细了解请阅读 system/core/init 下的 readme.txt 文件</strong></p>
<h4 id="init-rc-解析"><a href="#init-rc-解析" class="headerlink" title="init.rc 解析"></a>init.rc 解析</h4><p>现在接着分析 init.rc 文件，在文件的首部可以看到</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">import /init.environ.rc</div><div class="line">import /init.usb.rc</div><div class="line">import /init.$&#123;ro.hardware&#125;.rc</div><div class="line">import /init.usb.configfs.rc</div><div class="line">import /init.$&#123;ro.zygote&#125;.rc</div></pre></td></tr></table></figure>
<p>在这里可以看到需要启动的 zygote，但是与其它引入的 rc 文件相比 zygote 部分并没有使用确定的值，而是使用 ${ro.zygote} 变量去替代，这是因为从 Android 在 5.0 以后开始支持 64 位程序，所以需要根据系统中 ro.zygote 属性的值动态引入。ro.zygote 的值可以通过 adb shell getprop 进行查询，我的手机查询结果是：</p>
<p><img src="https://lh3.googleusercontent.com/-e2Cr_h19sKk/WfQwoTGcmCI/AAAAAAAAApY/udev7M2sMboatGQE4Q0Nz9UxnNUQsSynQCHMYCw/I/zygote" alt="zygote值"></p>
<p>这说明手机会启动两个 zygote 进程，对应的执行程序分别是 app_process64 (主模式)、app_process32，通过 adb shell ps | grep zygote 可以看到确实存在两个 zygote 进程</p>
<p><img src="https://lh3.googleusercontent.com/-wlIkoaKOx7c/WfQxKU3M1JI/AAAAAAAAApg/_xLtrOG4nwQCQoTlPbFcaxG0t2CSQVsyQCHMYCw/I/zygote" alt="zygote进程"></p>
<p>接着查看与 init.rc 同一目录下的 init.zygote64_32.rc 文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">service zygote /system/bin/app_process64 -Xzygote /system/bin --zygote --start-system-server --socket-name=zygote</div><div class="line">    class main</div><div class="line">    socket zygote stream 660 root system</div><div class="line">    onrestart write /sys/android_power/request_state wake</div><div class="line">    onrestart write /sys/power/state on</div><div class="line">    onrestart restart audioserver</div><div class="line">    onrestart restart cameraserver</div><div class="line">    onrestart restart media</div><div class="line">    onrestart restart netd</div><div class="line">    writepid /dev/cpuset/foreground/tasks /sys/fs/cgroup/stune/foreground/tasks</div><div class="line"></div><div class="line">service zygote_secondary /system/bin/app_process32 -Xzygote /system/bin --zygote --socket-name=zygote_secondary</div><div class="line">    class main</div><div class="line">    socket zygote_secondary stream 660 root system</div><div class="line">    onrestart restart zygote</div><div class="line">    writepid /dev/cpuset/foreground/tasks /dev/stune/foreground/tasks</div></pre></td></tr></table></figure>
<p>前文说过 service 的启动和类别名相关，这里两个 zygote service 的类别名都是 main，所以要想知道 zygote 怎么被启动的我们可以在 init.rc 中搜索 class_start main，可以发现</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">on nonencrypted</div><div class="line">    # A/B update verifier that marks a successful boot.</div><div class="line">    exec - root -- /system/bin/update_verifier nonencrypted</div><div class="line">    class_start main</div><div class="line">    class_start late_start</div></pre></td></tr></table></figure>
<p>从这里我们可以了解到当 nonencrypted 这个触发器被触发的时候 zygote 就会被启动，所以启动 zygote 的问题就转变为<strong>这个触发器什么时候执行？class_start 对应的处理函数是什么？</strong>要想知道答案，必须回到 init.cpp 的解析过程当中</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Parser&amp; parser = Parser::GetInstance();</div><div class="line">parser.AddSectionParser(<span class="string">"service"</span>,<span class="built_in">std</span>::make_unique&lt;ServiceParser&gt;());</div><div class="line">parser.AddSectionParser(<span class="string">"on"</span>, <span class="built_in">std</span>::make_unique&lt;ActionParser&gt;());</div><div class="line">parser.AddSectionParser(<span class="string">"import"</span>, <span class="built_in">std</span>::make_unique&lt;ImportParser&gt;());</div><div class="line">parser.ParseConfig(<span class="string">"/init.rc"</span>);</div></pre></td></tr></table></figure>
<p>init.rc 交由一个 Parser 对象进行解析，而 Parser 的实现在 system/core/init/init_parser.cpp 文件中，让我们进入到 init_parser.cpp 中查看 AddSectionParser 的实现</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">void</span> Parser::AddSectionParser(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; name,</div><div class="line">                              <span class="built_in">std</span>::<span class="built_in">unique_ptr</span>&lt;SectionParser&gt; parser) &#123;</div><div class="line">    section_parsers_[name] = <span class="built_in">std</span>::move(parser);</div><div class="line">&#125;</div><div class="line"></div><div class="line">init_parser.h 中 section_parsers_ 的定义</div><div class="line"><span class="built_in">std</span>::<span class="built_in">map</span>&lt;<span class="built_in">std</span>::<span class="built_in">string</span>, <span class="built_in">std</span>::<span class="built_in">unique_ptr</span>&lt;SectionParser&gt;&gt; section_parsers_;</div></pre></td></tr></table></figure>
<p>可以看到每一个 parser 最终被保存在 section_parsers_ 中，section_parsers_ 是什么？查看 init_parser.h 中的定义可以知道，section<em>parsers</em> 是一个 map 集合，所以 section_parsers_ 的作用是将 parser 与对应的 Section 进行绑定。</p>
<p>在添加完所有的 parser 之后就会调用 Parser 的 ParseConfig 方法</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">bool</span> Parser::ParseConfig(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; path) &#123;</div><div class="line">    <span class="keyword">if</span> (is_dir(path.c_str())) &#123;</div><div class="line">        <span class="keyword">return</span> ParseConfigDir(path);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ParseConfigFile(path);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>ParseConfig 中会对 path 进行判断，如果是目录则调用 ParseConfigDir 进行递归然后再通过 ParseConfigFile 进行解析。</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">bool</span> Parser::ParseConfigDir(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; path) &#123;</div><div class="line">    INFO(<span class="string">"Parsing directory %s...\n"</span>, path.c_str());</div><div class="line">    <span class="built_in">std</span>::<span class="built_in">unique_ptr</span>&lt;DIR, <span class="keyword">int</span>(*)(DIR*)&gt; config_dir(opendir(path.c_str()), closedir);</div><div class="line">    <span class="keyword">if</span> (!config_dir) &#123;</div><div class="line">        ERROR(<span class="string">"Could not import directory '%s'\n"</span>, path.c_str());</div><div class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    &#125;</div><div class="line">    dirent* current_file;</div><div class="line">    <span class="keyword">while</span> ((current_file = readdir(config_dir.get()))) &#123;</div><div class="line">        <span class="built_in">std</span>::<span class="built_in">string</span> current_path =</div><div class="line">            android::base::StringPrintf(<span class="string">"%s/%s"</span>, path.c_str(), current_file-&gt;d_name);</div><div class="line">        <span class="comment">// Ignore directories and only process regular files.</span></div><div class="line">        <span class="keyword">if</span> (current_file-&gt;d_type == DT_REG) &#123;</div><div class="line">            <span class="keyword">if</span> (!ParseConfigFile(current_path)) &#123; <span class="comment">//调用 ParseConfigFile 进行解析</span></div><div class="line">                ERROR(<span class="string">"could not import file '%s'\n"</span>, current_path.c_str());</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>最终在 ParseConfigFile 中通过 ParseData 进行解析</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">bool</span> Parser::ParseConfigFile(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; path) &#123;</div><div class="line">    INFO(<span class="string">"Parsing file %s...\n"</span>, path.c_str());</div><div class="line">    Timer t;</div><div class="line">    <span class="built_in">std</span>::<span class="built_in">string</span> data;</div><div class="line">  <span class="comment">//从 rc 文件中读取内容保存在 data 中</span></div><div class="line">    <span class="keyword">if</span> (!read_file(path.c_str(), &amp;data)) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    data.push_back(<span class="string">'\n'</span>); <span class="comment">// <span class="doctag">TODO:</span> fix parse_config.</span></div><div class="line">    ParseData(path, data); <span class="comment">//调用 ParseData 进行解析</span></div><div class="line">    ...</div><div class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>ParseData 解析过程如下</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">void</span> Parser::ParseData(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; filename, <span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; data) &#123;</div><div class="line">    <span class="comment">//<span class="doctag">TODO:</span> Use a parser with const input and remove this copy</span></div><div class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt; data_copy(data.begin(), data.end()); <span class="comment">//将 rc 中的内容保存在 vector 中便于逐个字符进行解析</span></div><div class="line">    data_copy.push_back(<span class="string">'\0'</span>);</div><div class="line">  </div><div class="line">    parse_state state;</div><div class="line">    state.filename = filename.c_str();</div><div class="line">    state.line = <span class="number">0</span>;</div><div class="line">    state.ptr = &amp;data_copy[<span class="number">0</span>];</div><div class="line">    state.nexttoken = <span class="number">0</span>;</div><div class="line"></div><div class="line">    SectionParser* section_parser = <span class="literal">nullptr</span>;</div><div class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">string</span>&gt; args; <span class="comment">//存放的是每行的内容</span></div><div class="line"></div><div class="line">    <span class="keyword">for</span> (;;) &#123;</div><div class="line">        <span class="keyword">switch</span> (next_token(&amp;state)) &#123;</div><div class="line">        <span class="keyword">case</span> T_EOF:</div><div class="line">            <span class="keyword">if</span> (section_parser) &#123;</div><div class="line">                section_parser-&gt;EndSection();</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        <span class="keyword">case</span> T_NEWLINE:</div><div class="line">            state.line++;</div><div class="line">            <span class="comment">//如果 args 为空则不进行解析（rc 文件中间存在空行，所以需要判断）</span></div><div class="line">            <span class="keyword">if</span> (args.empty()) &#123;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="comment">//判断是不是一个 section 的起始位置（通过能不能获得解析器，可以判断 args[0] 是不是 service、on、import 其中一个）</span></div><div class="line">            <span class="keyword">if</span> (section_parsers_.count(args[<span class="number">0</span>])) &#123;</div><div class="line">                <span class="keyword">if</span> (section_parser) &#123;</div><div class="line">                  <span class="comment">//如果上次存在解析则结束解析</span></div><div class="line">                    section_parser-&gt;EndSection();</div><div class="line">                &#125;</div><div class="line">              <span class="comment">//取出对应的解析器</span></div><div class="line">                section_parser = section_parsers_[args[<span class="number">0</span>]].get();</div><div class="line">                <span class="built_in">std</span>::<span class="built_in">string</span> ret_err;</div><div class="line">              <span class="comment">//进行 Section 解析</span></div><div class="line">                <span class="keyword">if</span> (!section_parser-&gt;ParseSection(args, &amp;ret_err)) &#123;</div><div class="line">                    parse_error(&amp;state, <span class="string">"%s\n"</span>, ret_err.c_str());</div><div class="line">                    section_parser = <span class="literal">nullptr</span>;</div><div class="line">                &#125;</div><div class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (section_parser) &#123; <span class="comment">//不是的话说明 args 中是一个 section 的子块，则进行 Line 解析</span></div><div class="line">                <span class="built_in">std</span>::<span class="built_in">string</span> ret_err;</div><div class="line">                <span class="keyword">if</span> (!section_parser-&gt;ParseLineSection(args, state.filename,</div><div class="line">                                                      state.line, &amp;ret_err)) &#123;</div><div class="line">                    parse_error(&amp;state, <span class="string">"%s\n"</span>, ret_err.c_str());</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="comment">//解析完成后清空</span></div><div class="line">            args.clear();</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> T_TEXT:</div><div class="line">            args.emplace_back(state.text);</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>ParseData 中通过调用 system/core/init/parser.cpp 中的 next_token 函数对 rc 内容进行分析，如果是 T_TEXT 则会保存在 args 中，如果是 T_NEWLINE 则会交由对应的解析器进行解析。init.rc 的大致解析过程如此，但是到这里我们依旧没能找到所需要的答案，所以需要继续查看 ActionParser 和 ServiceParser 的解析过程。</p>
<h4 id="ActionParser-解析过程"><a href="#ActionParser-解析过程" class="headerlink" title="ActionParser 解析过程"></a>ActionParser 解析过程</h4><p>ActionParser 位于 system/core/init/ 的 action.cpp 中，从前面的解析过程来看，最后的解析总是调用了对应 parser 的 ParseSection、ParseLineSection 以及 EndSection，所以我们主要看下这两个部分</p>
<p>ParseSection 的主要工作是创建 Action 对象，为对象添加触发器，并将 action_ 移动至当前 Action 对象</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">bool</span> ActionParser::ParseSection(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">string</span>&gt;&amp; args,</div><div class="line">                                <span class="built_in">std</span>::<span class="built_in">string</span>* err) &#123;</div><div class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">string</span>&gt; triggers(args.begin() + <span class="number">1</span>, args.end());</div><div class="line">    ...</div><div class="line"></div><div class="line">    <span class="keyword">auto</span> action = <span class="built_in">std</span>::make_unique&lt;Action&gt;(<span class="literal">false</span>);</div><div class="line">  <span class="comment">//为 action 增加触发器</span></div><div class="line">    <span class="keyword">if</span> (!action-&gt;InitTriggers(triggers, err)) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    &#125;</div><div class="line">  </div><div class="line">  <span class="comment">//将 aciton_ 指针移动到当前的 action</span></div><div class="line">    action_ = <span class="built_in">std</span>::move(action);</div><div class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//action_ 在 action.h 中的定义</span></div><div class="line"><span class="keyword">private</span>:</div><div class="line">	<span class="built_in">std</span>::<span class="built_in">unique_ptr</span>&lt;Action&gt; action_;</div></pre></td></tr></table></figure>
<p>ParseLineSection 的主要工作为查找对应 command 的处理函数，将创建的 Command 对象添加到到commands_，由于 commands_ 是 Action 的一个域，所以实际上 ParseLineSection 在填充当前 Action 对象的域。</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">bool</span> ActionParser::ParseLineSection(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">string</span>&gt;&amp; args,</div><div class="line">                                    <span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; filename, <span class="keyword">int</span> line,</div><div class="line">                                    <span class="built_in">std</span>::<span class="built_in">string</span>* err) <span class="keyword">const</span> &#123;</div><div class="line">  <span class="comment">//将解析的 command 增加到当前 action 的 commands_ 中</span></div><div class="line">    <span class="keyword">return</span> action_ ? action_-&gt;AddCommand(args, filename, line, err) : <span class="literal">false</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">bool</span> Action::AddCommand(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">string</span>&gt;&amp; args,</div><div class="line">                        <span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; filename, <span class="keyword">int</span> line, <span class="built_in">std</span>::<span class="built_in">string</span>* err) &#123;</div><div class="line">    ...</div><div class="line">  <span class="comment">//查找对应的 command 的处理函数</span></div><div class="line">    <span class="keyword">auto</span> function = function_map_-&gt;FindFunction(args[<span class="number">0</span>], args.size() - <span class="number">1</span>, err);</div><div class="line">    <span class="keyword">if</span> (!function) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    AddCommand(function, args, filename, line);</div><div class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">void</span> Action::AddCommand(BuiltinFunction f,</div><div class="line">                        <span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">string</span>&gt;&amp; args,</div><div class="line">                        <span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; filename, <span class="keyword">int</span> line) &#123;</div><div class="line">  <span class="comment">//commands_ 增加 command 和对应的处理函数</span></div><div class="line">    commands_.emplace_back(f, args, filename, line);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//commands_ 在 action.h 中的定义</span></div><div class="line"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;Command&gt; commands_;</div><div class="line"></div><div class="line"><span class="comment">//Command 在 action.h 中的定义</span></div><div class="line"><span class="keyword">class</span> Command &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    Command(BuiltinFunction f, <span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">string</span>&gt;&amp; args,</div><div class="line">            <span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; filename, <span class="keyword">int</span> line);</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">InvokeFunc</span><span class="params">()</span> <span class="keyword">const</span></span>;</div><div class="line">    <span class="built_in">std</span>::<span class="function"><span class="built_in">string</span> <span class="title">BuildCommandString</span><span class="params">()</span> <span class="keyword">const</span></span>;</div><div class="line">    <span class="built_in">std</span>::<span class="function"><span class="built_in">string</span> <span class="title">BuildSourceString</span><span class="params">()</span> <span class="keyword">const</span></span>;</div><div class="line"></div><div class="line"><span class="keyword">private</span>:</div><div class="line">    BuiltinFunction func_;</div><div class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">string</span>&gt; args_;</div><div class="line">    <span class="built_in">std</span>::<span class="built_in">string</span> filename_;</div><div class="line">    <span class="keyword">int</span> line_;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>EndSection 的主要工作是将解析完成的 action （域填充完毕的 Action 对象）添加到 ActionManager 的 acitons_ 中</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">void</span> ActionParser::EndSection() &#123;</div><div class="line">    <span class="keyword">if</span> (action_ &amp;&amp; action_-&gt;NumCommands() &gt; <span class="number">0</span>) &#123;</div><div class="line">        ActionManager::GetInstance().AddAction(<span class="built_in">std</span>::move(action_));</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">void</span> ActionManager::AddAction(<span class="built_in">std</span>::<span class="built_in">unique_ptr</span>&lt;Action&gt; action) &#123;</div><div class="line">    ...</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (old_action_it != actions_.end()) &#123;</div><div class="line">        (*old_action_it)-&gt;CombineAction(*action);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      <span class="comment">//将解析之后的 action 对象增加到 actions_ 链表中，用于遍历执行。</span></div><div class="line">        actions_.emplace_back(<span class="built_in">std</span>::move(action));</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//ActionManager 在 action.h 中的定义</span></div><div class="line"><span class="keyword">class</span> ActionManager &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">static</span> ActionManager&amp; <span class="title">GetInstance</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">AddAction</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">unique_ptr</span>&lt;Action&gt; action)</span></span>;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">QueueEventTrigger</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; trigger)</span></span>;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">QueuePropertyTrigger</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; name, <span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; value)</span></span>;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">QueueAllPropertyTriggers</span><span class="params">()</span></span>;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">QueueBuiltinAction</span><span class="params">(BuiltinFunction func, <span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; name)</span></span>;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">ExecuteOneCommand</span><span class="params">()</span></span>;</div><div class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">HasMoreCommands</span><span class="params">()</span> <span class="keyword">const</span></span>;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">DumpState</span><span class="params">()</span> <span class="keyword">const</span></span>;</div><div class="line"></div><div class="line"><span class="keyword">private</span>:</div><div class="line">    ActionManager();</div><div class="line"></div><div class="line">    ActionManager(ActionManager <span class="keyword">const</span>&amp;) = <span class="keyword">delete</span>;</div><div class="line">    <span class="keyword">void</span> <span class="keyword">operator</span>=(ActionManager <span class="keyword">const</span>&amp;) = <span class="keyword">delete</span>;</div><div class="line"></div><div class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">unique_ptr</span>&lt;Action&gt;&gt; actions_; <span class="comment">//actions_ 的定义</span></div><div class="line">    <span class="built_in">std</span>::<span class="built_in">queue</span>&lt;<span class="built_in">std</span>::<span class="built_in">unique_ptr</span>&lt;Trigger&gt;&gt; trigger_queue_;</div><div class="line">    <span class="built_in">std</span>::<span class="built_in">queue</span>&lt;<span class="keyword">const</span> Action*&gt; current_executing_actions_;</div><div class="line">    <span class="built_in">std</span>::<span class="keyword">size_t</span> current_command_;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>通过以上分析我们能够知道  class_start  的处理函数和  function_map_ 相关，查看 function_map_ 在 action.h 中的定义可以看到</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">static</span> <span class="keyword">const</span> KeywordMap&lt;BuiltinFunction&gt;* function_map_;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">set_function_map</span><span class="params">(<span class="keyword">const</span> KeywordMap&lt;BuiltinFunction&gt;* function_map)</span> </span>&#123;</div><div class="line">    function_map_ = function_map;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>所以要想知道处理函数是什么只需要知道 set_function_map 在哪里调用？让我们再次回到 init.cpp 中，可以看到</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> BuiltinFunctionMap function_map;</div><div class="line">Action::set_function_map(&amp;function_map);</div></pre></td></tr></table></figure>
<p>接下来需要找到 BuiltinFunctionMap，BuiltinFunctionMap 的实现我们可以在 builtins.cpp 中找到，其具体的实现</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">BuiltinFunctionMap::Map&amp; BuiltinFunctionMap::<span class="built_in">map</span>() <span class="keyword">const</span> &#123;</div><div class="line">    <span class="keyword">constexpr</span> <span class="built_in">std</span>::<span class="keyword">size_t</span> kMax = <span class="built_in">std</span>::numeric_limits&lt;<span class="built_in">std</span>::<span class="keyword">size_t</span>&gt;::max();</div><div class="line">    <span class="keyword">static</span> <span class="keyword">const</span> Map builtin_functions = &#123;</div><div class="line">        ...</div><div class="line">        &#123;<span class="string">"class_start"</span>,             &#123;<span class="number">1</span>,     <span class="number">1</span>,    do_class_start&#125;&#125;,</div><div class="line">        &#123;<span class="string">"class_stop"</span>,              &#123;<span class="number">1</span>,     <span class="number">1</span>,    do_class_stop&#125;&#125;,</div><div class="line">        ...</div><div class="line">    &#125;;</div><div class="line">    <span class="keyword">return</span> builtin_functions;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>到这里就可以确定 class_start 对应的处理函数是 do_class_start，do_class_start 也可在  builtins.cpp 中找到。</p>
<p>简单总结下解析 Action 的过程，<strong>实际上是创建一个 Action 对象，然后为 Action 对象添加 Trigger 以及对应的 Command，其中在添加 Command 的过程中还为 Command 指定了处理函数，最后在将 Action 对象增加到 ActionManager vector 类型的 actions_ 链表当中去。</strong></p>
<h4 id="ServiceParser-解析过程"><a href="#ServiceParser-解析过程" class="headerlink" title="ServiceParser 解析过程"></a>ServiceParser 解析过程</h4><p>与前文一致，接着看那三个函数</p>
<p>ParseSection 的主要工作是创建 Service 对象，将 service_ 移动至当前 Service 对象</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">bool</span> ServiceParser::ParseSection(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">string</span>&gt;&amp; args,</div><div class="line">                                 <span class="built_in">std</span>::<span class="built_in">string</span>* err) &#123;</div><div class="line">    ...</div><div class="line">  <span class="comment">//获取服务名</span></div><div class="line">    <span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; name = args[<span class="number">1</span>];</div><div class="line">    ...</div><div class="line">  <span class="comment">//保存服务名外的参数（如执行路径等）</span></div><div class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">string</span>&gt; str_args(args.begin() + <span class="number">2</span>, args.end());</div><div class="line">  <span class="comment">//将 service_ 指针指向当前 Service 对象</span></div><div class="line">    service_ = <span class="built_in">std</span>::make_unique&lt;Service&gt;(name, <span class="string">"default"</span>, str_args);</div><div class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//service_ 在 service.h 中的定义</span></div><div class="line"><span class="built_in">std</span>::<span class="built_in">unique_ptr</span>&lt;Service&gt; service_;</div></pre></td></tr></table></figure>
<p>ParseLineSection 的主要工作是为 Service 中每个 option 指定处理函数</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">bool</span> ServiceParser::ParseLineSection(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">string</span>&gt;&amp; args,</div><div class="line">                                     <span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; filename, <span class="keyword">int</span> line,</div><div class="line">                                     <span class="built_in">std</span>::<span class="built_in">string</span>* err) <span class="keyword">const</span> &#123;</div><div class="line">  <span class="comment">//为 Service 中的每一个 Option 指定处理函数</span></div><div class="line">    <span class="keyword">return</span> service_ ? service_-&gt;HandleLine(args, err) : <span class="literal">false</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">bool</span> Service::HandleLine(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">string</span>&gt;&amp; args, <span class="built_in">std</span>::<span class="built_in">string</span>* err) &#123;</div><div class="line">    ...</div><div class="line"></div><div class="line">    <span class="keyword">static</span> <span class="keyword">const</span> OptionHandlerMap handler_map;</div><div class="line">  <span class="comment">//寻找对应 option 的处理函数</span></div><div class="line">    <span class="keyword">auto</span> handler = handler_map.FindFunction(args[<span class="number">0</span>], args.size() - <span class="number">1</span>, err);</div><div class="line"></div><div class="line">    ...</div><div class="line"></div><div class="line">    <span class="keyword">return</span> (<span class="keyword">this</span>-&gt;*handler)(args, err);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>EndSection 的主要工作是将解析完成的 service （域填充完毕的 Service 对象）添加到 ServiceManager 的 services_ 中</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line">void ServiceParser::EndSection() &#123;</div><div class="line">    if (service_) &#123;</div><div class="line">        ServiceManager::GetInstance().AddService(std::move(service_));</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">void ServiceManager::AddService(std::unique_ptr&lt;Service&gt; service) &#123;</div><div class="line">    Service* old_service = FindServiceByName(service-&gt;name());</div><div class="line">    if (old_service) &#123;</div><div class="line">        ERROR("ignored duplicate definition of service '%s'",</div><div class="line">              service-&gt;name().c_str());</div><div class="line">        return;</div><div class="line">    &#125;</div><div class="line">  //将解析之后 service 对象增加到 services_ 链表中</div><div class="line">    services_.emplace_back(std::move(service));</div><div class="line">&#125;</div><div class="line"></div><div class="line">//ServiceManager 在 service.h 中的定义</div><div class="line">class ServiceManager &#123;</div><div class="line">public:</div><div class="line">    static ServiceManager&amp; GetInstance();</div><div class="line"></div><div class="line">    void AddService(std::unique_ptr&lt;Service&gt; service);</div><div class="line">    Service* MakeExecOneshotService(const std::vector&lt;std::string&gt;&amp; args);</div><div class="line">    Service* FindServiceByName(const std::string&amp; name) const;</div><div class="line">    Service* FindServiceByPid(pid_t pid) const;</div><div class="line">    Service* FindServiceByKeychord(int keychord_id) const;</div><div class="line">    void ForEachService(std::function&lt;void(Service*)&gt; callback) const;</div><div class="line">    void ForEachServiceInClass(const std::string&amp; classname,</div><div class="line">                               void (*func)(Service* svc)) const;</div><div class="line">    void ForEachServiceWithFlags(unsigned matchflags,</div><div class="line">                             void (*func)(Service* svc)) const;</div><div class="line">    void ReapAnyOutstandingChildren();</div><div class="line">    void RemoveService(const Service&amp; svc);</div><div class="line">    void DumpState() const;</div><div class="line"></div><div class="line">private:</div><div class="line">    ServiceManager();</div><div class="line">    bool ReapOneProcess();</div><div class="line">    static int exec_count_; // Every service needs a unique name.</div><div class="line">    std::vector&lt;std::unique_ptr&lt;Service&gt;&gt; services_; //services_ 的定义</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>对应的可以看下 option 的处理函数，虽然 OptionHandlerMap 与启动 zygote 无关，但是还是看下</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">Service::OptionHandlerMap::Map&amp; Service::OptionHandlerMap::<span class="built_in">map</span>() <span class="keyword">const</span> &#123;</div><div class="line">    <span class="keyword">constexpr</span> <span class="built_in">std</span>::<span class="keyword">size_t</span> kMax = <span class="built_in">std</span>::numeric_limits&lt;<span class="built_in">std</span>::<span class="keyword">size_t</span>&gt;::max();</div><div class="line">    <span class="keyword">static</span> <span class="keyword">const</span> Map option_handlers = &#123;</div><div class="line">        &#123;<span class="string">"class"</span>,       &#123;<span class="number">1</span>,     <span class="number">1</span>,    &amp;Service::HandleClass&#125;&#125;,</div><div class="line">        &#123;<span class="string">"console"</span>,     &#123;<span class="number">0</span>,     <span class="number">0</span>,    &amp;Service::HandleConsole&#125;&#125;,</div><div class="line">        &#123;<span class="string">"critical"</span>,    &#123;<span class="number">0</span>,     <span class="number">0</span>,    &amp;Service::HandleCritical&#125;&#125;,</div><div class="line">        &#123;<span class="string">"disabled"</span>,    &#123;<span class="number">0</span>,     <span class="number">0</span>,    &amp;Service::HandleDisabled&#125;&#125;,</div><div class="line">        &#123;<span class="string">"group"</span>,       &#123;<span class="number">1</span>,     NR_SVC_SUPP_GIDS + <span class="number">1</span>, &amp;Service::HandleGroup&#125;&#125;,</div><div class="line">        &#123;<span class="string">"ioprio"</span>,      &#123;<span class="number">2</span>,     <span class="number">2</span>,    &amp;Service::HandleIoprio&#125;&#125;,</div><div class="line">        &#123;<span class="string">"keycodes"</span>,    &#123;<span class="number">1</span>,     kMax, &amp;Service::HandleKeycodes&#125;&#125;,</div><div class="line">        &#123;<span class="string">"oneshot"</span>,     &#123;<span class="number">0</span>,     <span class="number">0</span>,    &amp;Service::HandleOneshot&#125;&#125;,</div><div class="line">        &#123;<span class="string">"onrestart"</span>,   &#123;<span class="number">1</span>,     kMax, &amp;Service::HandleOnrestart&#125;&#125;,</div><div class="line">        &#123;<span class="string">"seclabel"</span>,    &#123;<span class="number">1</span>,     <span class="number">1</span>,    &amp;Service::HandleSeclabel&#125;&#125;,</div><div class="line">        &#123;<span class="string">"setenv"</span>,      &#123;<span class="number">2</span>,     <span class="number">2</span>,    &amp;Service::HandleSetenv&#125;&#125;,</div><div class="line">        &#123;<span class="string">"socket"</span>,      &#123;<span class="number">3</span>,     <span class="number">6</span>,    &amp;Service::HandleSocket&#125;&#125;,</div><div class="line">        &#123;<span class="string">"user"</span>,        &#123;<span class="number">1</span>,     <span class="number">1</span>,    &amp;Service::HandleUser&#125;&#125;,</div><div class="line">        &#123;<span class="string">"writepid"</span>,    &#123;<span class="number">1</span>,     kMax, &amp;Service::HandleWritepid&#125;&#125;,</div><div class="line">    &#125;;</div><div class="line">    <span class="keyword">return</span> option_handlers;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>与解析 Action 类似，<strong>在整个过程中先创建 Service 对象，解析出 Service 的名字和对应的参数添加到对象当中，并且给每个 Option 指定了相应的处理函数</strong></p>
<p>到这里 rc 文件的解析就结束了，通过 rc 文件的解析使得每个 action 都有了对应的执行函数，<strong>所以接下来的问题是这些 action 是如何被触发的（也即是 command 命令是如何被执行的）？</strong></p>
<h4 id="Actions-的触发"><a href="#Actions-的触发" class="headerlink" title="Actions 的触发"></a>Actions 的触发</h4><p>让我们继续回到 init.cpp 中</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">ActionManager&amp; am = ActionManager::GetInstance();</div><div class="line">....</div><div class="line"></div><div class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</div><div class="line">    <span class="keyword">if</span> (!waiting_for_exec) &#123;</div><div class="line">        am.ExecuteOneCommand();</div><div class="line">        restart_processes();</div><div class="line">    &#125;</div><div class="line">...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以看到 action 的 command 的执行是通过 ActionManager 的 ExecuteOneCommand 函数，而ActionManager 的 ExecuteOneCommand 最终调用了 Action 的 ExecuteOneCommand</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">void</span> ActionManager::ExecuteOneCommand() &#123;</div><div class="line">    <span class="keyword">while</span> (current_executing_actions_.empty() &amp;&amp; !trigger_queue_.empty()) &#123;</div><div class="line">        <span class="comment">//遍历 actions_</span></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; action : actions_) &#123;</div><div class="line">            <span class="keyword">if</span> (trigger_queue_.front()-&gt;CheckTriggers(*action)) &#123;</div><div class="line">                <span class="comment">//将 action 加入到 current_executing_actions_ 中</span></div><div class="line">                current_executing_actions_.emplace(action.get());</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        trigger_queue_.pop();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    ...</div><div class="line"></div><div class="line">    <span class="comment">//每次只执行一个 action，下次 init 进程 while 循环时，跳过上面的 while 循环，接着执行</span></div><div class="line">    <span class="keyword">auto</span> action = current_executing_actions_.front();</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (current_command_ == <span class="number">0</span>) &#123;</div><div class="line">        <span class="built_in">std</span>::<span class="built_in">string</span> trigger_name = action-&gt;BuildTriggersString();</div><div class="line">        INFO(<span class="string">"processing action (%s)\n"</span>, trigger_name.c_str());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//执行 action 的 command</span></div><div class="line">    action-&gt;ExecuteOneCommand(current_command_);</div><div class="line">  </div><div class="line">    ++current_command_;</div><div class="line">    ...</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">void</span> Action::ExecuteOneCommand(<span class="built_in">std</span>::<span class="keyword">size_t</span> command) <span class="keyword">const</span> &#123;</div><div class="line">  <span class="comment">//执行 action 对象中保存的 command</span></div><div class="line">    ExecuteCommand(commands_[command]);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">void</span> Action::ExecuteCommand(<span class="keyword">const</span> Command&amp; command) <span class="keyword">const</span> &#123;</div><div class="line">    Timer t;</div><div class="line">  <span class="comment">//调用 command 对应的处理函数</span></div><div class="line">    <span class="keyword">int</span> result = command.InvokeFunc();</div><div class="line"></div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>通过上述分析可以知道，init 进程最终进入到无限循环中，然后按照 ActionManager 中 actions_ 保存的 action 顺序依次对每个 Action 进行处理，而在这个过程中 system/core/init/builtins.cpp 下用于启动 zygote 的 do_class_start 函数将会被执行</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">do_class_start</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">string</span>&gt;&amp; args)</span> </span>&#123;</div><div class="line">    ServiceManager::GetInstance().</div><div class="line">        ForEachServiceInClass(args[<span class="number">1</span>], [] (Service* s) &#123; s-&gt;StartIfNotDisabled(); &#125;);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>do_class_start 函数中调用 Service 的 StartIfNotDisabled，StartIfNotDisabled 在 service.cpp 的实现如下</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">bool</span> Service::StartIfNotDisabled() &#123;</div><div class="line">    <span class="keyword">if</span> (!(flags_ &amp; SVC_DISABLED)) &#123;</div><div class="line">        <span class="keyword">return</span> Start();</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        flags_ |= SVC_DISABLED_START;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>StartIfNotDisabled 最终调用了 Service 的 Start 函数，Start 函数创建了 zygote 的进程，并且执行了 init.zygote64_32.rc 中定义的执行路径下的文件</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">bool</span> Service::Start() &#123;</div><div class="line">    ....</div><div class="line">   <span class="comment">//创建子进程</span></div><div class="line">    <span class="keyword">pid_t</span> pid = fork();</div><div class="line">    <span class="keyword">if</span> (pid == <span class="number">0</span>) &#123;</div><div class="line">        ...</div><div class="line">       <span class="comment">//执行对应 service 对应的执行文件，args_[0].c_str() 就是执行路径</span></div><div class="line">        <span class="keyword">if</span> (execve(args_[<span class="number">0</span>].c_str(), (<span class="keyword">char</span>**) &amp;strs[<span class="number">0</span>], (<span class="keyword">char</span>**) ENV) &lt; <span class="number">0</span>) &#123;</div><div class="line">            ERROR(<span class="string">"cannot execve('%s'): %s\n"</span>, args_[<span class="number">0</span>].c_str(), strerror(errno));</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        _exit(<span class="number">127</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    ....</div><div class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在完成这一切之后将会进入 frameworks/base/cmds/app_process/app_main.cpp 中</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* <span class="keyword">const</span> argv[])</span></span></div><div class="line">&#123;</div><div class="line">    ....</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (zygote) &#123;</div><div class="line">      <span class="comment">//启动 zygote</span></div><div class="line">        runtime.start(<span class="string">"com.android.internal.os.ZygoteInit"</span>, args, zygote);</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (className) &#123;</div><div class="line">        runtime.start(<span class="string">"com.android.internal.os.RuntimeInit"</span>, args, zygote);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Error: no class name or --zygote supplied.\n"</span>);</div><div class="line">        app_usage();</div><div class="line">        LOG_ALWAYS_FATAL(<span class="string">"app_process: no class name or --zygote supplied."</span>);</div><div class="line">        <span class="keyword">return</span> <span class="number">10</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以看到 zygote 最终在 app_main 的 main 函数中被启动。 </p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>到这里我们就能够回答对 init 部分相关的问题了</p>
<ol>
<li><p>init 的作用</p>
<p>init 是系统中的第一个用户进程，它的主要作用是<strong>创建用户空间文件夹并挂载、启动属性服务、解析 init.rc 文件并启动 zygote 进程</strong>。</p>
</li>
<li><p>init 启动 zygote 的过程</p>
<p>init 进程通过解析 init.rc 文件将 action 保存在 ActionManager 的 actions_ 链表中，然后通过遍历 actions_ 链表，执行 action 命令对应的处理函数，从而转至 builtins.cpp 的 do_class_start 函数，之后通过 Service 的 StartIfNotDisabled 调用 Service 的 Start 函数，最终通过 Start 函数创建 zygote 进程，执行对应的 app_main.cpp 文件启动 zygote。</p>
</li>
</ol>
<h2 id="Thanks"><a href="#Thanks" class="headerlink" title="Thanks"></a>Thanks</h2><ol>
<li><a href="http://blog.csdn.net/gaugamela/article/details/52133186" target="_blank" rel="external">Android7.0 init进程源码分析</a></li>
<li><a href="http://blog.csdn.net/hongbochen1223/article/details/56331690" target="_blank" rel="external">Android Init Language(android初始化语言)</a></li>
<li><a href="http://blog.csdn.net/itachi85/article/details/54783506" target="_blank" rel="external"> Android系统启动流程（一）解析init进程启动过程</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h2&gt;&lt;p&gt;在进入到 Android 启动过程之前先让我们思考以下几个问题&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Android 系统的启动过程是怎样的？&lt;/li&gt;
&lt;li&gt;init 、zygote 进程是什么？在系统启动的过程中各自发挥了什么作用？&lt;/li&gt;
&lt;li&gt;AMS、PMS 等这些服务是如何被启动的？&lt;/li&gt;
&lt;li&gt;Launcher 是如何被启动的？&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;此篇文章将针对 init 部分给出分析
    
    </summary>
    
      <category term="Android进阶" scheme="http://www.rookieyang.cn/categories/Android%E8%BF%9B%E9%98%B6/"/>
    
    
      <category term="Android" scheme="http://www.rookieyang.cn/tags/Android/"/>
    
      <category term="源码分析" scheme="http://www.rookieyang.cn/tags/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>Android Selector 的用法</title>
    <link href="http://www.rookieyang.cn/2017/09/24/Selector%E7%9A%84%E7%94%A8%E6%B3%95/"/>
    <id>http://www.rookieyang.cn/2017/09/24/Selector的用法/</id>
    <published>2017-09-24T07:58:15.000Z</published>
    <updated>2018-01-15T14:53:02.000Z</updated>
    
    <content type="html"><![CDATA[<h5 id="Selector-简介"><a href="#Selector-简介" class="headerlink" title="Selector 简介"></a>Selector 简介</h5><p>Selector（选择器）常常被用作控件的背景，是一种状态列表，一般分为 Drawable-selector 和 Color-selector，接下来分别说说这两者的使用方法。</p>
<h5 id="Drawable-selector"><a href="#Drawable-selector" class="headerlink" title="Drawable-selector"></a>Drawable-selector</h5><ol>
<li><p>首先需要在 res/drawable 文件夹下新建一个 Drawable Resource File 文件，填入文件名即可，创建之后的文件内容如下：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">selector</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">selector</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>在 selector 标签下新建一个 item 标签，item 标签表示一种状态，如果不指明状态，那么控件在任何状态下都会加载 item 内的 样式，常用的状态设置如下所示：<a id="more"></a></p>
<ol>
<li>android:state_pressed 设置为 true 时代表按压控件的时候使用 item 样式</li>
<li>android:state_selected 设置为 true 时代表控件被选中的时候使用 item 样式</li>
<li>android:state_checked 设置为 true 时代表控件处于 checked 状态的时候使用 item 样式</li>
</ol>
</li>
<li><p>接下来在 item 内部创建 shape 标签用于指定绘制的图形类别，总共有四种图形可以选择分别是：rectangle、oval、line、ring。在确定需要绘制的 shape 类型之后，就可以在 shape 标签内部对 shape 的各项属性进行配置，总共有六种标签属性。</p>
<ol>
<li>size 用来设置 shape 的大小</li>
<li>solid 用来设置填充 shape 的颜色</li>
<li>corners 用来设置 shape 的角度</li>
<li>stroke 用来给 shape 描边，可以描成虚线或实线</li>
<li>padding 设置内边距</li>
<li>gradient 设置 shape 的渐变颜色</li>
</ol>
</li>
<li><p>设置好相应的属性之后就可以通过设置控件的 android:drawble 属性进行使用了，这里给出一个例子</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">selector</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:state_pressed</span>=<span class="string">"true"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">shape</span> <span class="attr">android:shape</span>=<span class="string">"rectangle"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">corners</span> <span class="attr">android:radius</span>=<span class="string">"5dp"</span> /&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">stroke</span> <span class="attr">android:width</span>=<span class="string">"1dp"</span> <span class="attr">android:color</span>=<span class="string">"#00faff"</span> <span class="attr">android:dashGap</span>=<span class="string">"10dp"</span> 	<span class="attr">android:dashWidth</span>=<span class="string">"10dp"</span> /&gt;</span></div><div class="line"></div><div class="line">      <span class="tag">&lt;<span class="name">size</span> <span class="attr">android:width</span>=<span class="string">"150dp"</span> <span class="attr">android:height</span>=<span class="string">"150dp"</span> /&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">solid</span> <span class="attr">android:color</span>=<span class="string">"#bcb7b7"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">shape</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:state_pressed</span>=<span class="string">"false"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">shape</span> <span class="attr">android:shape</span>=<span class="string">"oval"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">corners</span> <span class="attr">android:radius</span>=<span class="string">"360dp"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">stroke</span> <span class="attr">android:width</span>=<span class="string">"1dp"</span> <span class="attr">android:color</span>=<span class="string">"#00fcb5"</span> <span class="attr">android:dashGap</span>=<span class="string">"10dp"</span> 			<span class="attr">android:dashWidth</span>=<span class="string">"10dp"</span> /&gt;</span></div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">size</span> <span class="attr">android:width</span>=<span class="string">"300dp"</span> <span class="attr">android:height</span>=<span class="string">"300dp"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">solid</span> <span class="attr">android:color</span>=<span class="string">"#ffff"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">shape</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">selector</span>&gt;</span></div></pre></td></tr></table></figure>
<p>上述代码绘制了两种状态，一种是默认状态下的圆，白色填充、虚线描边、半径是 300dp。另一种是被按下的状态，灰色填充、虚线描边、长和宽与圆一致。具体效果如下图所示：<br><img src="https://lh3.googleusercontent.com/-_xfw1AlpXMQ/Wcd9EF8Sy0I/AAAAAAAAAi0/r_0NNnlpJW0ZGmefNnxaO6cxWAwjqfj6wCHMYCw/I/a.png" alt="a"><img src="https://lh3.googleusercontent.com/-JMwx0YSIX84/Wcd9ER6fTSI/AAAAAAAAAi4/T-Ln5pZMlmsUURtqf38K8m0DBQKcnhjagCHMYCw/I/b.png" alt="b"></p>
</li>
</ol>
<h5 id="Color-selector"><a href="#Color-selector" class="headerlink" title="Color-selector"></a>Color-selector</h5><p>​    Color-selector 定义在 res\color 文件夹下，使用过程基本与 Drawable-selector 一致，不同在于 Color-selector 只是用于定义控件的颜色，所以只需要配置 item 标签的 color 属性即可，具体的例子如下：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">selector</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span>&gt;</span></div><div class="line"></div><div class="line">	<span class="tag">&lt;<span class="name">item</span> <span class="attr">android:color</span>=<span class="string">"#000000"</span> <span class="attr">android:state_pressed</span>=<span class="string">"false"</span> /&gt;</span></div><div class="line"></div><div class="line">	<span class="tag">&lt;<span class="name">item</span> <span class="attr">android:color</span>=<span class="string">"#ffff"</span> <span class="attr">android:state_pressed</span>=<span class="string">"true"</span> /&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">selector</span>&gt;</span></div></pre></td></tr></table></figure>
<p>通过指定 item 的状态和颜色，即可做到按压和松开时控件的颜色变化。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;Selector-简介&quot;&gt;&lt;a href=&quot;#Selector-简介&quot; class=&quot;headerlink&quot; title=&quot;Selector 简介&quot;&gt;&lt;/a&gt;Selector 简介&lt;/h5&gt;&lt;p&gt;Selector（选择器）常常被用作控件的背景，是一种状态列表，一般分为 Drawable-selector 和 Color-selector，接下来分别说说这两者的使用方法。&lt;/p&gt;
&lt;h5 id=&quot;Drawable-selector&quot;&gt;&lt;a href=&quot;#Drawable-selector&quot; class=&quot;headerlink&quot; title=&quot;Drawable-selector&quot;&gt;&lt;/a&gt;Drawable-selector&lt;/h5&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;首先需要在 res/drawable 文件夹下新建一个 Drawable Resource File 文件，填入文件名即可，创建之后的文件内容如下：&lt;/p&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;selector&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;xmlns:android&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;http://schemas.android.com/apk/res/android&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;selector&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在 selector 标签下新建一个 item 标签，item 标签表示一种状态，如果不指明状态，那么控件在任何状态下都会加载 item 内的 样式，常用的状态设置如下所示：
    
    </summary>
    
      <category term="Android基础" scheme="http://www.rookieyang.cn/categories/Android%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Android" scheme="http://www.rookieyang.cn/tags/Android/"/>
    
      <category term="Drawble" scheme="http://www.rookieyang.cn/tags/Drawble/"/>
    
  </entry>
  
  <entry>
    <title>面向对象的六大原则及单例模式</title>
    <link href="http://www.rookieyang.cn/2017/09/17/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%85%AD%E5%A4%A7%E5%8E%9F%E5%88%99%E5%8F%8A%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
    <id>http://www.rookieyang.cn/2017/09/17/面向对象的六大原则及单例模式/</id>
    <published>2017-09-16T17:05:58.000Z</published>
    <updated>2018-01-15T14:43:54.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h3><h4 id="面向对象的六大原则"><a href="#面向对象的六大原则" class="headerlink" title="面向对象的六大原则"></a>面向对象的六大原则</h4><h5 id="单一职责原则"><a href="#单一职责原则" class="headerlink" title="单一职责原则"></a>单一职责原则</h5><p>单一职责原则 (SRP) 是指就一个类而言，应该仅有一个引起它变化的原因</p>
<blockquote>
<p>简单而言就是一个类应该只有一项职责，而不是具有多项职责，比如一个类既负责图片缓存的处理同时还负责显示图片，实际上应该拆分成两个类，一个类负责图片的缓存，另外一个类负责图片显示。如果一个类兼具太多的职责不仅导致了耦合性，而且在一个职责发生变化的时候还可能削弱其它的职责功能。</p>
</blockquote>
<a id="more"></a>
<h5 id="开闭原则"><a href="#开闭原则" class="headerlink" title="开闭原则"></a>开闭原则</h5><p>开闭原则 (OCP) 是指软件中的对象对于修改应该是封闭的，对于扩展应该是开放的。</p>
<blockquote>
<p>如果一个类为了实现新的功能不断的对类中的原有代码进行修改和增加，不仅可能引入 Bug，还有可能会导致类越来越庞大，比如一个图片的缓存类需要实现内存缓存、SD 卡缓存、两种方式混合的缓存方法，在图片显示类中需要自由选择何种方式进行缓存显示。比较好的一种方式是：由于三种缓存方式实际上基本功能一致，所以可以定义一个接口，然后在图片显示类中义一个接口用于指向三个类实例化的对象，那么当需要采用哪种方式去进行缓存的时候，只需要使用 set 方法进行依赖注入将接口指向相应方式的对象即可，并且如果要实现其它不同的缓存方式只需要对接口进行实现即可。这样实现的代码耦合性弱扩展性强。</p>
</blockquote>
<h5 id="里氏替换原则"><a href="#里氏替换原则" class="headerlink" title="里氏替换原则"></a>里氏替换原则</h5><p>里氏替换原则是指所有引用基类的地方必须能透明地使用其子类的对象</p>
<blockquote>
<p>一个基类的子类拥有基类的属性和方法（私有的除外），所以在大多数情况下基类能干的子类都能做，这样可以保证很好的扩展性，因为可以在基类的基础上进行扩展实现不同功能的子类。因此里氏替换原则有利于提高扩展性，同时为开闭原则提供了保障。</p>
</blockquote>
<h5 id="依赖倒置原则"><a href="#依赖倒置原则" class="headerlink" title="依赖倒置原则"></a>依赖倒置原则</h5><p>依赖倒置原则是用于解耦的一种方式，主要有以下几个关键点：</p>
<ol>
<li>高层模块不应该依赖底层模块，两者都应该依赖其抽象</li>
<li>抽象不应该依赖细节</li>
<li>细节应该依赖抽象</li>
</ol>
<blockquote>
<p>第一点是指当高层的模块使用底层的模块时候，不应该直接使用底层模块类的具体对象，而应该使用其接口或者是抽象类，这样可以保证其扩展性，也就是说高层模块与底层模块之间应该通过接口发生联系，而不应该存在直接关联。</p>
</blockquote>
<h5 id="接口隔离原则"><a href="#接口隔离原则" class="headerlink" title="接口隔离原则"></a>接口隔离原则</h5><p>接口隔离原则是指类间的关系应该建立在最小的接口上</p>
<blockquote>
<p>最小的接口实际上就是抽象的一种表达，一个接口下面可能可能会实现很多种接口，或者是很多层级接口，要对这些接口相同的功能部分进行操作的时候只需要对最顶层的接口操作即可，譬如当关闭输入输出流的时候，Java 中有很多种流，字节流、字符流、缓冲流。这个时候为了减少依赖、耦合性以及增加扩展性，我们只需要利用 Cloaseable 接口指向各种流的对象进行关闭操作即可。</p>
</blockquote>
<h5 id="迪米特原则"><a href="#迪米特原则" class="headerlink" title="迪米特原则"></a>迪米特原则</h5><p>迪米特原则是指一个对象应该对其它对象有最少的了解</p>
<blockquote>
<p>一个类应该尽可能少的利用到其它类完成相同的任务，这样可以降低耦合性</p>
</blockquote>
<h4 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h4><h5 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h5><p>所谓单例也就是说在一个类在系统中只存在一个实例，并且可以自行实例化向系统提供这个实例</p>
<h5 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h5><p>适用于某个类有且仅有一个对象的场景，避免创建多个对象消耗过多的资源。</p>
<blockquote>
<ol>
<li><p>构造函数不对外开放，一般为 private</p>
</li>
<li><p>通过一个静态方法或者枚举返回单例类对象</p>
</li>
<li><p>确保单例类对象有且只有一个，尤其是在多线程环境下</p>
</li>
<li><p>确保单例类对象在反序列化时不会重新构建对象</p>
</li>
</ol>
<p>也即是说单例模式的对象必须由该类的静态方法进行实例化和提供，并且不能出现多个对象。</p>
</blockquote>
<h5 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h5><ol>
<li>优点<ul>
<li>单例模式在内存中只存在一个实例，减少了内存的开支。</li>
<li>减少了系统的性能开销，当一个对象的产生需要较多的资源的时候，这个时候可以通过产生一个单例对象，然后永驻内存来解决。</li>
<li>单例模式可以避免对资源的多重占用。</li>
<li>单例模式可以在系统设置全局的访问点，优化和共享资源访问</li>
</ul>
</li>
<li>缺点<ul>
<li><strong>单例模式一般没有接口，扩展很困难。</strong></li>
<li><strong>单例对象如果持有 Context，那么很容易引发内存泄漏，此时传递给单例对象的 Context 最好是 Application Context</strong></li>
</ul>
</li>
</ol>
<h5 id="常用的实现方式"><a href="#常用的实现方式" class="headerlink" title="常用的实现方式"></a>常用的实现方式</h5><ol>
<li><p>饿汉模式</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CEO</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> CEO sCeo = <span class="keyword">new</span> CEO();</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">CEO</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> CEO <span class="title">newInstance</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> sCeo;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>该种方式实现的单例模式当类被加载的时候就会初始化一个 CEO 对象，然后外部可以通过 newInstance 静态方法进行获取。</p>
<p>由于单例模式需要类能够自行进行实例化，所以返回值一定是类变量以及通过静态方法进行返回。</p>
</blockquote>
</li>
<li><p>懒汉模式</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingleInstance</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SingleInstance sSingleInstance;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SingleInstance</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> SingleInstance <span class="title">newInstance</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (sSingleInstance != <span class="keyword">null</span>) &#123;</div><div class="line">            sSingleInstance = <span class="keyword">new</span> SingleInstance();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> sSingleInstance;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>采用懒汉模式实现的单例模式可以在使用的时候才将对象实例化，但是由于每次调用 newInstance 方法的时候都会进行同步（比不需要同步的慢 100 倍），所以造成了不必要的同步开销，不建议使用。</p>
</blockquote>
</li>
<li><p>Double Check Lock</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingleInstance</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SingleInstance sSingleInstance = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SingleInstance</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SingleInstance <span class="title">newInstance</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (sSingleInstance != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">synchronized</span> (SingleInstance.class) &#123;</div><div class="line">                <span class="keyword">if</span> (sSingleInstance != <span class="keyword">null</span>) &#123;</div><div class="line">                    sSingleInstance = <span class="keyword">new</span> SingleInstance();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> sSingleInstance;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>第一次的判断避免了在对象非空情况下进行同步导致不必要开销的问题，第二次判断是由于可能存在线程 A，B 同时判断了对象为空，然后依次进入同步块中，如果这个时候不进行判断则可能导致创建出两个对象出来，所以需要进行第二次判断。</p>
<p>这个模式存在的一个问题是 mSingleInstance = new SingleInstance() 不是原子操作，其分为三个部分：给实例对象分配内存；调用构造函数，初始化成员字段；将实例对象指向分配的内存空间。并且后两步的执行顺序是不确定的，所以可能出现 A 线程执行完第三步，没有执行完第二步的情况下，程序切换至 B 线程，B 线程判断当前对象非空取走对象，但由于对象的成员字段没有初始化完成，所以可能出现错误。</p>
<p>解决办法是在 sInstance 前加上 volatile 关键字。</p>
</blockquote>
</li>
<li><p>静态内部类</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingleInstance</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SingleInstance</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SingleInstance <span class="title">newInstance</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> SingleHolder.sSingleInstance;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SingleHolder</span> </span>&#123;</div><div class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> SingleInstance sSingleInstance = <span class="keyword">new</span> SingleInstance();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>采用这种方式实现的单例模式很好的避免了 DCL 中可能出现的问题，由于内部类只有在使用它的成员以及方法的时候才会进行载入，所以可以做到使用的时候才实例化对象，而且能够确保线程安全。</p>
</blockquote>
</li>
<li><p>枚举单例</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">enum</span> SingletonEnum &#123;</div><div class="line">    INSTANCE;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"do sth."</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>在任何情况下枚举实例都是一个单例，而且创建过程是线程安全的。</p>
</blockquote>
</li>
<li><p>容器实现单例</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonManager</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String, Object&gt; objectMap = <span class="keyword">new</span> HashMap&lt;&gt;();</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SingletonManager</span><span class="params">()</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">registerService</span><span class="params">(String key, Object instance)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (!objectMap.containsKey(key)) &#123;</div><div class="line">            objectMap.put(key, instance);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">getService</span><span class="params">(String key)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> objectMap.get(key);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>采用容器实现的单例模式可以对多种对象的单例进行管理，例如 Android 当中的 getSystemService 就是这样实现的单例模式。</p>
</blockquote>
</li>
</ol>
<h5 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h5><ol>
<li><p>前四种方式实现的单例模式存在在反序列化（反射执行无参构造函数）的情况下可能会重新创建一个对象，为了避免这种情况的发生，我们需要重写 readResolve 方法，这样在进行反序列化的时候就会执行这个方法获取对象实例。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> Object <span class="title">readResolve</span><span class="params">()</span><span class="keyword">throws</span> ObjectStreamException</span>&#123;</div><div class="line">        <span class="keyword">return</span> sSingleInstance;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>单例模式的核心在于将构造函数进行私有化，并且通过一个静态方法返回唯一的对象实例，在这个获取的过程当中需要保证<strong>线程安全、防止反序列化</strong>导致生成实例对象等问题。</p>
</li>
</ol>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;设计模式&quot;&gt;&lt;a href=&quot;#设计模式&quot; class=&quot;headerlink&quot; title=&quot;设计模式&quot;&gt;&lt;/a&gt;设计模式&lt;/h3&gt;&lt;h4 id=&quot;面向对象的六大原则&quot;&gt;&lt;a href=&quot;#面向对象的六大原则&quot; class=&quot;headerlink&quot; title=&quot;面向对象的六大原则&quot;&gt;&lt;/a&gt;面向对象的六大原则&lt;/h4&gt;&lt;h5 id=&quot;单一职责原则&quot;&gt;&lt;a href=&quot;#单一职责原则&quot; class=&quot;headerlink&quot; title=&quot;单一职责原则&quot;&gt;&lt;/a&gt;单一职责原则&lt;/h5&gt;&lt;p&gt;单一职责原则 (SRP) 是指就一个类而言，应该仅有一个引起它变化的原因&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;简单而言就是一个类应该只有一项职责，而不是具有多项职责，比如一个类既负责图片缓存的处理同时还负责显示图片，实际上应该拆分成两个类，一个类负责图片的缓存，另外一个类负责图片显示。如果一个类兼具太多的职责不仅导致了耦合性，而且在一个职责发生变化的时候还可能削弱其它的职责功能。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="读书笔记" scheme="http://www.rookieyang.cn/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Android源码设计模式解析与实战" scheme="http://www.rookieyang.cn/tags/Android%E6%BA%90%E7%A0%81%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E8%A7%A3%E6%9E%90%E4%B8%8E%E5%AE%9E%E6%88%98/"/>
    
  </entry>
  
  <entry>
    <title>百分比圆环的实现</title>
    <link href="http://www.rookieyang.cn/2017/09/10/%E7%99%BE%E5%88%86%E6%AF%94%E5%9C%86%E7%8E%AF%E7%9A%84%E5%AE%9E%E7%8E%B0/"/>
    <id>http://www.rookieyang.cn/2017/09/10/百分比圆环的实现/</id>
    <published>2017-09-10T01:01:22.000Z</published>
    <updated>2018-01-15T15:06:58.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>最近做一个简单的测试 APP 的时候需要将手机的存储空间使用情况显示出来，刚好记得一些清理软件的存储空间都是以这种百分比圆环的方式显示出来的，所以了解了一下它的实现过程。</p>
<h3 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h3><p>最终实现的效果如下图所示：<br><img src="https://i.imgur.com/UlM8EHR.gif" alt="2017-09-10 16.01.09"></p>
<h3 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h3><p>从上图我们可以看到，绘制一个这样的百分比圆环主要有涉及到三个元素：</p>
<ol>
<li>背景空心圆：代表着总的进度</li>
<li>圆弧：代表着当前进度</li>
<li>文字：需要局中，表示具体的进度<a id="more"></a></li>
</ol>
<p>在了解到涉及到的元素之后，我们还需要了解绘制各个元素需要哪些参数，由于绘制都通过 onDraw 方法中的 canvas 对象，所以我们可以通过 canvas 对象的方法去确定所需要的参数。首先是绘制圆，查看 drawCircle 可以知道总共需要四个参数：<strong>圆心 X、Y 坐标、半径长度以及画笔 Paint</strong>；而圆弧所需要的参数略微会多一些，通过查看 drawArc 可以知道总共需要四个参数：<strong>Recf、圆弧的起始角度、从起始角度顺时针扫过的角度以及必须的 Paint</strong>，这里的 Recf 确定了一个矩形区域，然后确定了一个内接椭圆，而圆弧的绘制实际上是在椭圆上面进行截取；最后是文本的绘制，查看 drawText 可以知道，需要四个参数：<strong>文本内容、进行绘制的 X、Y 坐标点以及Paint</strong>。</p>
<h3 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h3><p>在实现思路上我们已经弄清楚了绘制元素所需要的参数，这个时候就可以一步步进行绘制了：</p>
<ol>
<li><p>首先是绘制圆，这里我们定义了四个参数分别表示圆心 X，Y 的坐标、半径以及绘制所需要的画笔，然后对这些参数进行初始化，最终在 onDraw 进行绘制。</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RingPercentDemo</span> <span class="keyword">extends</span> <span class="title">View</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mCircleX;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mCircleY;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mRadius;</div><div class="line">    <span class="keyword">private</span> Paint mCirclePaint;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RingPercentDemo</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(context);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RingPercentDemo</span><span class="params">(Context context,</span></span></div><div class="line">        @Nullable AttributeSet attrs) &#123;</div><div class="line">        <span class="keyword">super</span>(context, attrs);</div><div class="line">        mCircleX = <span class="number">300</span>;</div><div class="line">        mCircleY = <span class="number">300</span>;</div><div class="line">        mRadius = <span class="number">260</span>;</div><div class="line">        mCirclePaint = <span class="keyword">new</span> Paint();</div><div class="line">        mCirclePaint.setColor(Color.BLUE);</div><div class="line">        mCirclePaint.setStrokeWidth(<span class="number">10</span>);</div><div class="line">        mCirclePaint.setStyle(Style.STROKE); <span class="comment">//绘制空心圆所以不需要填充</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDraw</span><span class="params">(Canvas canvas)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onDraw(canvas);</div><div class="line"></div><div class="line">        canvas.drawCircle(mCircleX, mCircleY, mRadius, mCirclePaint);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>接下来是绘制圆环，从效果图上可以看出来，圆环实际上是在圆上截取一段圆弧表示，所以绘制圆环的矩形区域可以确定下来，在确定了矩形区域之后只需要自己设定起始的角度和扫过的角度即可以绘制出在圆上的圆弧。</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RingPercentDemo</span> <span class="keyword">extends</span> <span class="title">View</span> </span>&#123;</div><div class="line"></div><div class="line">    ...</div><div class="line">    <span class="keyword">private</span> RectF mRecF;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">float</span> mStartAngle;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">float</span> mSweepAngle;</div><div class="line">    <span class="keyword">private</span> Paint mRingPaint;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RingPercentDemo</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(context);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RingPercentDemo</span><span class="params">(Context context,</span></span></div><div class="line">        @Nullable AttributeSet attrs) &#123;</div><div class="line">        <span class="keyword">super</span>(context, attrs);</div><div class="line">        ...</div><div class="line"></div><div class="line">        mRecF = <span class="keyword">new</span> RectF(mCircleX - mRadius, mCircleY - mRadius,</div><div class="line">            mCircleX + mRadius, mCircleY + mRadius);</div><div class="line">        mStartAngle = -<span class="number">90f</span>;</div><div class="line">        mSweepAngle = <span class="number">120f</span>;</div><div class="line">        mRingPaint = <span class="keyword">new</span> Paint();</div><div class="line">        mRingPaint.setColor(Color.RED);</div><div class="line">        mRingPaint.setStrokeWidth(<span class="number">20</span>);</div><div class="line">        mRingPaint.setStyle(Style.STROKE);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDraw</span><span class="params">(Canvas canvas)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onDraw(canvas);</div><div class="line"></div><div class="line">        ...</div><div class="line">        canvas.drawArc(mRecF, mStartAngle, mSweepAngle,</div><div class="line">            <span class="keyword">false</span>, mRingPaint); <span class="comment">//设置为 false 不与中心点进行连接</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>最后是绘制文本，由于要绘制在圆的中心，所以文本的坐标我们首先设置为圆的中心，然后绘制的风格选为 Align.CENTER，这样文本将以设定的坐标点向两边延伸保证了 X 处于中心位置。</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RingPercentDemo</span> <span class="keyword">extends</span> <span class="title">View</span> </span>&#123;</div><div class="line"></div><div class="line">    ...</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mTextX;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mTextY;</div><div class="line">    <span class="keyword">private</span> Paint mTextPaint;</div><div class="line">    <span class="keyword">private</span> String mTextStr;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RingPercentDemo</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(context);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RingPercentDemo</span><span class="params">(Context context,</span></span></div><div class="line">        @Nullable AttributeSet attrs) &#123;</div><div class="line">        <span class="keyword">super</span>(context, attrs);</div><div class="line">        ...</div><div class="line"></div><div class="line">        mTextPaint = <span class="keyword">new</span> Paint();</div><div class="line">        mTextPaint.setColor(Color.BLACK);</div><div class="line">        mTextPaint.setStyle(Style.FILL);</div><div class="line">        mTextPaint.setTextSize(<span class="number">40</span>);</div><div class="line">        mTextPaint.setTextAlign(Align.CENTER);</div><div class="line">        mTextPaint.setTextSize(mRadius / <span class="number">2</span>);</div><div class="line">        mTextX = mCircleX;</div><div class="line">        mTextY = mCircleY;</div><div class="line">        mTextStr = <span class="string">"33%"</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDraw</span><span class="params">(Canvas canvas)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onDraw(canvas);</div><div class="line"></div><div class="line">        ...</div><div class="line">        canvas.drawText(mTextStr, mTextX, mTextY, mTextPaint);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p> 实际效果图：<br> <img src="https://i.imgur.com/9ZYvei1.jpg" alt="tips1"><br> 这个时候我们能够发现文本实质上不在中心位置，这是为什么呢？因为我们在设定的坐标是用于确定绘制的<strong>基准线</strong>而不是绘制的中心点，所以自然文本不可能绘制在正中心，具体可以借用下图来进行描述：<br> <img src="https://i.imgur.com/vOewNzN.jpg" alt=""><br> 从这就可以很明显的看到，文本的中心和设定的坐标之间是存在一个偏移量的，所以为了使文本处于真正的中心，我们需要计算得到这个偏移量，然后将之前设定的基准线下移。在计算偏移量之前首先需要了解字体是如何进行测量的，具体如下图所示：<br> <img src="https://i.imgur.com/xwZqHv9.jpg" alt=""><br> 其中 Top 表示基准线以上可绘制的最大距离（负数），Bottom 表示基准线以下可绘制的最大距离（正数），Ascent 表示基准线以上推荐的可绘制的距离，Descent 表示基准线以下推荐的可绘制的距离。<br> 了解完这一切之后如何计算偏移量就很简单了，通过 FontMetrics 获取 Bottom 和 Top，然后通过 ((Bottom - Top) / 2) - Bottom 最终取得偏移量。代码做如下修改：</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RingPercentDemo</span> <span class="keyword">extends</span> <span class="title">View</span> </span>&#123;</div><div class="line"></div><div class="line">    ...</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mTextX;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mTextY;</div><div class="line">    <span class="keyword">private</span> Paint mTextPaint;</div><div class="line">    <span class="keyword">private</span> String mTextStr;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RingPercentDemo</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(context);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RingPercentDemo</span><span class="params">(Context context,</span></span></div><div class="line">        @Nullable AttributeSet attrs) &#123;</div><div class="line">        ...</div><div class="line">        FontMetrics fontMetrics = mTextPaint.getFontMetrics();</div><div class="line">        <span class="keyword">float</span> offsetY = ((fontMetrics.bottom - fontMetrics.top) / <span class="number">2</span>) - fontMetrics.bottom;</div><div class="line">        mTextY = (<span class="keyword">int</span>) (mCircleY + offsetY);</div><div class="line">        ...</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>修改之后的效果：<br><img src="https://i.imgur.com/M9hzVs4.jpg" alt="tip2"></p>
<h3 id="改进"><a href="#改进" class="headerlink" title="改进"></a>改进</h3><p>经过上述过程，虽然圆环百分比的效果已经实现，但是跟效果图中的还是差的很远，而且也不能够灵活，所以我们需要借助自定义属性去改进我们的圆环。</p>
<ol>
<li><p>首先需要在 values 文件夹下创建 attrs.xml 文件在里面声明我们需要定义的属性：</p>
 <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">declare-styleable</span> <span class="attr">name</span>=<span class="string">"RingPercentDemo"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">attr</span> <span class="attr">format</span>=<span class="string">"integer"</span> <span class="attr">name</span>=<span class="string">"radius"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">attr</span> <span class="attr">format</span>=<span class="string">"color"</span> <span class="attr">name</span>=<span class="string">"circleColor"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">attr</span> <span class="attr">format</span>=<span class="string">"integer"</span> <span class="attr">name</span>=<span class="string">"circleStrokeWidth"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">attr</span> <span class="attr">format</span>=<span class="string">"integer"</span> <span class="attr">name</span>=<span class="string">"circleStyle"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">attr</span> <span class="attr">format</span>=<span class="string">"color"</span> <span class="attr">name</span>=<span class="string">"ringColor"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">attr</span> <span class="attr">format</span>=<span class="string">"integer"</span> <span class="attr">name</span>=<span class="string">"ringStrokeWidth"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">attr</span> <span class="attr">format</span>=<span class="string">"integer"</span> <span class="attr">name</span>=<span class="string">"startAngle"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">attr</span> <span class="attr">format</span>=<span class="string">"integer"</span> <span class="attr">name</span>=<span class="string">"sweepAngle"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">attr</span> <span class="attr">format</span>=<span class="string">"integer"</span> <span class="attr">name</span>=<span class="string">"rate"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">declare-styleable</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>然后在构造函数获取到自定义的属性的属性值</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">RingPercentDemo</span><span class="params">(Context context,</span></span></div><div class="line">        @Nullable AttributeSet attrs) &#123;</div><div class="line">        <span class="keyword">super</span>(context, attrs);</div><div class="line"></div><div class="line">        TypedArray typedArray = context.obtainStyledAttributes(</div><div class="line">            attrs, R.styleable.RingPercentDemo);</div><div class="line"></div><div class="line">        mRadius = typedArray.getInteger(R.styleable.RingPercentDemo_radius, <span class="number">60</span>);</div><div class="line">        mCircleColor = typedArray.getColor(</div><div class="line">            R.styleable.RingPercentDemo_circleColor, Color.GREEN);</div><div class="line">        mCircleStrokeWidth = typedArray.getInteger(</div><div class="line">            R.styleable.RingPercentDemo_circleStrokeWidth, <span class="number">5</span>);</div><div class="line">        mCircleStyle = typedArray.getInteger(</div><div class="line">            R.styleable.RingPercentDemo_circleStyle, <span class="number">0</span>);</div><div class="line">        mRingColor = typedArray.getColor(</div><div class="line">            R.styleable.RingPercentDemo_ringColor, Color.RED);</div><div class="line">        mRingStrokeWidth = typedArray.getColor(</div><div class="line">            R.styleable.RingPercentDemo_ringStrokeWidth, <span class="number">10</span>);</div><div class="line">        mStartAngle = typedArray.getInteger(</div><div class="line">            R.styleable.RingPercentDemo_startAngle, -<span class="number">90</span>);</div><div class="line">        mSweepAngle = typedArray.getInteger(</div><div class="line">            R.styleable.RingPercentDemo_sweepAngle, <span class="number">90</span>);</div><div class="line">        mRate = typedArray.getInteger(R.styleable.RingPercentDemo_rate, <span class="number">100</span>);</div><div class="line">        typedArray.recycle();</div><div class="line"></div><div class="line">        init();</div><div class="line"></div><div class="line">    &#125;</div></pre></td></tr></table></figure>
</li>
<li><p>在获取到这些属性值之后只需要给对应的 Paint 和变量设置对应的值即可。</p>
</li>
</ol>
<blockquote>
<p>到这里自定义 View 的灵活性就变的较高了，但事实上还存在两个问题，一个是圆心的位置还是指定的不能够自适应，另一个是圆弧没有动画效果。所以我们需要接着改进。</p>
</blockquote>
<ol>
<li><p>圆心的位置我们希望能    够一直处于 View 的中心，所以需要重写 onMeasure 方法，在 onMeasure 方法通过获取 View 的高度和宽度得到了 View 的中心点坐标，从而使得圆心一直在 View 的中心。   </p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onMeasure</span><span class="params">(<span class="keyword">int</span> widthMeasureSpec, <span class="keyword">int</span> heightMeasureSpec)</span> </span>&#123;</div><div class="line">    setMeasuredDimension(measuse(widthMeasureSpec), measuse(heightMeasureSpec));</div><div class="line"></div><div class="line">    mCircleX = getMeasuredWidth() / <span class="number">2</span>;</div><div class="line">    mCircleY = getMeasuredHeight() / <span class="number">2</span>;</div><div class="line"></div><div class="line">    <span class="comment">//判断设定的圆是否超出显示范围，如果超出需要缩小</span></div><div class="line">    <span class="keyword">if</span> (mCircleX &lt; mRadius) &#123;</div><div class="line">        mRadius = mCircleX - mCircleStrokeWidth - mRingStrokeWidth;</div><div class="line">        mTextPaint.setTextSize(mRadius / <span class="number">2</span>);</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (mCircleY &lt; mRadius) &#123;</div><div class="line">        mRadius = mCircleY - mCircleStrokeWidth - mRingStrokeWidth;</div><div class="line">        mTextPaint.setTextSize(mRadius / <span class="number">2</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    FontMetrics fontMetrics = mTextPaint.getFontMetrics();</div><div class="line">    <span class="keyword">int</span> offsetY = (<span class="keyword">int</span>) (((fontMetrics.bottom - fontMetrics.top)) / <span class="number">2</span> - fontMetrics.bottom);</div><div class="line">    mTextX = mCircleX;</div><div class="line">    mTextY = mCircleY + offsetY;</div><div class="line"></div><div class="line">    mRecF = <span class="keyword">new</span> RectF(mCircleX - mRadius, mCircleY - mRadius,</div><div class="line">        mCircleX + mRadius, mCircleY + mRadius);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>在解决了圆心的问题之    后，还需要为圆弧提供动态变化的效果，这里可以通过不断重绘达成目标。</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDraw</span><span class="params">(Canvas canvas)</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.onDraw(canvas);</div><div class="line"></div><div class="line">    canvas.drawCircle(mCircleX, mCircleY, mRadius, mCirclePaint);</div><div class="line">    canvas.drawArc(mRecF, mStartAngle, mCurrentAngle, <span class="keyword">false</span>, mRingPaint);</div><div class="line">    canvas.drawText(mTextStr, mTextX, mTextY, mTextPaint);</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (mCurrentAngle &lt; mSweepAngle) &#123;</div><div class="line">        mCurrentAngle += <span class="number">3.6</span>;</div><div class="line">        mTextStr = mCurrentAngle * <span class="number">100</span> / <span class="number">360</span> + <span class="string">"%"</span>;</div><div class="line">        postInvalidateDelayed(mRate);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<p>最终的代码已经上传到Github上<a href="https://github.com/firstdream10/RingPercent" target="_blank" rel="external">源码地址</a></p>
<hr>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>实际上自定义 View 过实际上自定义 View 过程需要将效果进行拆分，然后对拆分之后的每一个元素进行单独的处理，而为了让自定义的 View 可定制，还需要用到自定义属性。</p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ol>
<li><p><a href="http://www.cnblogs.com/slgkaifa/p/7101297.html" target="_blank" rel="external">android canvas drawText()文字居中</a></p>
</li>
<li><p><a href="http://blog.csdn.net/nugongahou110/article/details/49159189" target="_blank" rel="external">Android自定义控件之百分比圆环进度条</a></p>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;最近做一个简单的测试 APP 的时候需要将手机的存储空间使用情况显示出来，刚好记得一些清理软件的存储空间都是以这种百分比圆环的方式显示出来的，所以了解了一下它的实现过程。&lt;/p&gt;
&lt;h3 id=&quot;效果图&quot;&gt;&lt;a href=&quot;#效果图&quot; class=&quot;headerlink&quot; title=&quot;效果图&quot;&gt;&lt;/a&gt;效果图&lt;/h3&gt;&lt;p&gt;最终实现的效果如下图所示：&lt;br&gt;&lt;img src=&quot;https://i.imgur.com/UlM8EHR.gif&quot; alt=&quot;2017-09-10 16.01.09&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;实现思路&quot;&gt;&lt;a href=&quot;#实现思路&quot; class=&quot;headerlink&quot; title=&quot;实现思路&quot;&gt;&lt;/a&gt;实现思路&lt;/h3&gt;&lt;p&gt;从上图我们可以看到，绘制一个这样的百分比圆环主要有涉及到三个元素：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;背景空心圆：代表着总的进度&lt;/li&gt;
&lt;li&gt;圆弧：代表着当前进度&lt;/li&gt;
&lt;li&gt;文字：需要局中，表示具体的进度
    
    </summary>
    
      <category term="Android基础" scheme="http://www.rookieyang.cn/categories/Android%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Android" scheme="http://www.rookieyang.cn/tags/Android/"/>
    
      <category term="自定义控件" scheme="http://www.rookieyang.cn/tags/%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%A7%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>Binder 浅解</title>
    <link href="http://www.rookieyang.cn/2017/09/03/Binder%E6%B5%85%E8%A7%A3/"/>
    <id>http://www.rookieyang.cn/2017/09/03/Binder浅解/</id>
    <published>2017-09-03T13:43:27.000Z</published>
    <updated>2018-01-15T14:50:10.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="什么是-Binder"><a href="#什么是-Binder" class="headerlink" title="什么是 Binder"></a>什么是 Binder</h4><p>Binder 是 Android 中一种跨进程通信（IPC）方式。</p>
<h4 id="Binder-的原理"><a href="#Binder-的原理" class="headerlink" title="Binder 的原理"></a>Binder 的原理</h4><p>Binder通信采用C/S架构，从组件视角来说，包含 Client、Server、ServiceManager 以及 binder 驱动，其中 ServiceManager 用于管理系统中的各种服务。架构图如下所示：<br><img src="https://lh3.googleusercontent.com/-r87ZtMW666o/WXhxa-i0nJI/AAAAAAAAAX0/tPeJ1cnEgXsMc7-ogBqi15BGw5UjY60gACHMYCw/I/Binder" alt="Binder原理"></p>
<ul>
<li>此处的 Service Manager 是指 Native 层的 ServiceManager（C++）<a id="more"></a></li>
<li>注册服务(addService)：Server 进程要先注册 Service 到 ServiceManager。该过程：Server 是客户端，ServiceManager 是服务端。</li>
<li>获取服务(getService)：Client 进程使用某个 Service 前，须先向 ServiceManager 中获取相应的 Service。该过程：Client 是客户端，ServiceManager 是服务端。</li>
<li>使用服务：Client 根据得到的 Service 信息建立与 Service 所在的 Server 进程通信的通路，然后就可以直接与 Service 交互。该过程：Client 是客户端，Server 是服务端。</li>
</ul>
<h4 id="Binder-的结构"><a href="#Binder-的结构" class="headerlink" title="Binder 的结构"></a>Binder 的结构</h4><p>在学习 Binder 的结构的时候，可以利用 AIDL 去生成 Binder，这里我们首先需要创建一个实现了 Parcelable 接口的 Book 类，然后在 main 文件夹下创建 AIDL 文件夹，分别创建 Book.aidl、IBookManager.aidl。三个文件的代码分别如下：<br>    ​<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//Book.java</span></div><div class="line"><span class="keyword">package</span> com.rookieyang.aidltest;</div><div class="line"></div><div class="line"><span class="keyword">import</span> android.os.Parcel;</div><div class="line"><span class="keyword">import</span> android.os.Parcelable;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by firstdream on 2017/9/4.</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Book</span> <span class="keyword">implements</span> <span class="title">Parcelable</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mBookId;</div><div class="line">    <span class="keyword">private</span> String mBookName;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Book</span><span class="params">(<span class="keyword">int</span> mBookId, String mBookName)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.mBookId = mBookId;</div><div class="line">        <span class="keyword">this</span>.mBookName = mBookName;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">writeToParcel</span><span class="params">(Parcel parcel, <span class="keyword">int</span> i)</span> </span>&#123;</div><div class="line">        parcel.writeInt(mBookId);</div><div class="line">        parcel.writeString(mBookName);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">describeContents</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Parcelable.Creator&lt;Book&gt; CREATOR = <span class="keyword">new</span> Creator&lt;Book&gt;() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> Book <span class="title">createFromParcel</span><span class="params">(Parcel parcel)</span> </span>&#123;</div><div class="line">            Book book = <span class="keyword">new</span> Book(parcel.readInt(), parcel.readString());</div><div class="line">            <span class="keyword">return</span> book;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="keyword">public</span> Book[] newArray(<span class="keyword">int</span> size) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Book[size];</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Book.aidl</span></div><div class="line"><span class="keyword">package</span> com.rookieyang.aidltest;</div><div class="line"></div><div class="line"><span class="comment">// Declare any non-default types here with import statements</span></div><div class="line"></div><div class="line">parcelable Book;</div><div class="line"></div><div class="line"><span class="comment">// IBookManager.aidl</span></div><div class="line"><span class="keyword">package</span> com.rookieyang.aidltest;</div><div class="line"></div><div class="line"><span class="comment">//需要导入 Book 类</span></div><div class="line"><span class="keyword">import</span> com.rookieyang.aidltest.Book;</div><div class="line"></div><div class="line"><span class="comment">// Declare any non-default types here with import statements</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IBookManager</span> </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Demonstrates some basic types that you can use as parameters</div><div class="line">     * and return values in AIDL.</div><div class="line">     */</div><div class="line">    <span class="function">List&lt;Book&gt; <span class="title">getBookList</span><span class="params">()</span></span>;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addBook</span><span class="params">(in Book book)</span></span>;</div><div class="line">&#125;</div><div class="line">​</div></pre></td></tr></table></figure></p>
<p>在经过上述的过程之后，点击编译即可生成 Binder 文件，以 IBookManager.aidl 生成的 IBookManager.java 为例， IBookManager.java 中定义了一个继承自 IInterface 的 IBookManager 接口，在 IBookManager 内包含了继承自 Binder 实现了 IBookManager 接口的内部类 Stub 和 实现了 IBookManager 接口的 Stub 的内部类 Proxy。整体结构如下图所示：<br><img src="https://lh3.googleusercontent.com/-iDJyi8tBoBo/WXhxbPQ4ZqI/AAAAAAAAAX4/jxrb4SuSNIwRipZYxiKO9OuvJk9gKkwMACHMYCw/I/IBookManager" alt="IBookManager结构"><br>下面针对 IBookManager.java 进行具体的分析：</p>
<ul>
<li>IBookManager 接口，这个接口与在 IBookManager.aidl 中一致<ul>
<li>getBookList()</li>
<li>addBook(Book book)</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IBookManager</span> <span class="keyword">extends</span> <span class="title">IInterface</span> </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Demonstrates some basic types that you can use as parameters</div><div class="line">     * and return values in AIDL.</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> List&lt;Book&gt; <span class="title">getBookList</span><span class="params">()</span></span></div><div class="line">        <span class="keyword">throws</span> RemoteException;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addBook</span><span class="params">(Book book)</span> <span class="keyword">throws</span> RemoteException</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>Stub 类<ul>
<li>DESCRIPTOR <ul>
<li>Binder 的唯一标识，一般用当前 Binder 的类名表示</li>
</ul>
</li>
<li>TRANSACTION_getBookList 和 TRANSACTION_addBook<ul>
<li>两个id用于标识在transact过程中客户端所请求的到底是哪个方法</li>
</ul>
</li>
<li>asInterface(IBinder obj)<ul>
<li>用于将服务端的 Binder 对象转换成客户端所需的 AIDL 接口类型的对象，这种转换过程是区分进程的，如果客户端和服务端位于同一进程，那么此方法返回的就是服务端的 Stub 对象本身，否则返回的是系统封装后的 Stub.proxy 对象。</li>
</ul>
</li>
<li>asBinder<ul>
<li>此方法用于返回当前 Binder 对象。</li>
</ul>
</li>
<li>onTransact<ul>
<li>这个方法运行在服务端中的 Binder 线程池中，当客户端发起跨进程请求时，远程请求会通过系统底层封装后交由此方法来处理。</li>
<li>服务端通过 code 可以确定客户端所请求的目标方法是什么，接着从 data 中取出目标方法所需的参数（如果目标方法有参数的话），然后执行目标方法。当目标方法执行完毕后，就向 reply 中写入返回值（如果目标方法有返回值的话），onTransact 方法的执行过程就是这样的。</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Stub</span> <span class="keyword">extends</span> <span class="title">Binder</span> <span class="keyword">implements</span></span></div><div class="line">    <span class="title">IBookManager</span> &#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String DESCRIPTOR = <span class="string">"com.rookieyang.binderdemo.IBookManager"</span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Construct the stub at attach it to the interface.</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Stub</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.attachInterface(<span class="keyword">this</span>, DESCRIPTOR);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Cast an IBinder object into an IBookManager interface,</div><div class="line">     * generating a proxy if needed.</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IBookManager <span class="title">asInterface</span><span class="params">(IBinder obj)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> ((obj == <span class="keyword">null</span>)) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line">        IInterface iin = obj.queryLocalInterface(DESCRIPTOR);</div><div class="line">        <span class="keyword">if</span> (((iin != <span class="keyword">null</span>) &amp;&amp; (iin <span class="keyword">instanceof</span> IBookManager))) &#123;</div><div class="line">            <span class="keyword">return</span> ((IBookManager) iin);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> IBookManager.Stub.Proxy(obj);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> IBinder <span class="title">asBinder</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTransact</span><span class="params">(<span class="keyword">int</span> code, Parcel data, Parcel reply,</span></span></div><div class="line">        <span class="keyword">int</span> flags) <span class="keyword">throws</span> RemoteException &#123;</div><div class="line">        <span class="keyword">switch</span> (code) &#123;</div><div class="line">            <span class="keyword">case</span> INTERFACE_TRANSACTION: &#123;</div><div class="line">                reply.writeString(DESCRIPTOR);</div><div class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">case</span> TRANSACTION_getBookList: &#123;</div><div class="line">                data.enforceInterface(DESCRIPTOR);</div><div class="line">                List&lt;Book&gt; _result = <span class="keyword">this</span>.getBookList();</div><div class="line">                reply.writeNoException();</div><div class="line">                reply.writeTypedList(_result);</div><div class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">case</span> TRANSACTION_addBook: &#123;</div><div class="line">                data.enforceInterface(DESCRIPTOR);</div><div class="line">                Book _arg0;</div><div class="line">                <span class="keyword">if</span> ((<span class="number">0</span> != data.readInt())) &#123;</div><div class="line">                    <span class="comment">//反序列化</span></div><div class="line">                    _arg0 = Book.CREATOR.createFromParcel(data);</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    _arg0 = <span class="keyword">null</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">this</span>.addBook(_arg0);</div><div class="line">                reply.writeNoException();</div><div class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.onTransact(code, data, reply, flags);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TRANSACTION_getBookList = (IBinder.FIRST_CALL_TRANSACTION + <span class="number">0</span>);</div><div class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TRANSACTION_addBook = (IBinder.FIRST_CALL_TRANSACTION + <span class="number">1</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>Proxy 类<ul>
<li>getBookList<ul>
<li>这个方法运行在客户端，当客户端远程调用此方法时，它的内部实现是这样的：首先创建该方法所需要的输入型 Parcel 对象 _data 、输出型 Parcel 对象 _reply 和返回值对象 List；然后把该方法的参数信息写入 _data 中（如果有参数的话）；接着调用 transact 方法来发起 RPC（远程过程调用）请求，同时当前线程挂起；然后服务端的 onTransact 方法会被调用，直到 RPC 过程返回后，当前线程继续执行，并从 _reply 中取出 RPC 过程的返回结果；最后返回 _reply 中的数据。</li>
</ul>
</li>
<li>addBook<ul>
<li>这个方法运行在客户端，它的执行过程和 getBookList 是一样的，addBook 没有返回值，所以它不需要从 _reply 中取出返回值。</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Proxy</span> <span class="keyword">implements</span> <span class="title">IBookManager</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> IBinder mRemote;</div><div class="line"></div><div class="line">    Proxy(IBinder remote) &#123;</div><div class="line">        mRemote = remote;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> IBinder <span class="title">asBinder</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> mRemote;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getInterfaceDescriptor</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> DESCRIPTOR;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Demonstrates some basic types that you can use as parameters</div><div class="line">     * and return values in AIDL.</div><div class="line">     */</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> List&lt;Book&gt; <span class="title">getBookList</span><span class="params">()</span></span></div><div class="line">        <span class="keyword">throws</span> RemoteException &#123;</div><div class="line">        Parcel _data = Parcel.obtain();</div><div class="line">        Parcel _reply = Parcel.obtain();</div><div class="line">        java.util.List&lt;Book&gt; _result;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            _data.writeInterfaceToken(DESCRIPTOR);</div><div class="line">            mRemote.transact(Stub.TRANSACTION_getBookList, _data, _reply, <span class="number">0</span>);</div><div class="line">            _reply.readException();</div><div class="line">            _result = _reply.createTypedArrayList(Book.CREATOR);</div><div class="line">        &#125; <span class="keyword">finally</span> &#123;</div><div class="line">            _reply.recycle();</div><div class="line">            _data.recycle();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> _result;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addBook</span><span class="params">(Book book)</span></span></div><div class="line">        <span class="keyword">throws</span> RemoteException &#123;</div><div class="line">        Parcel _data = Parcel.obtain();</div><div class="line">        Parcel _reply = Parcel.obtain();</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            _data.writeInterfaceToken(DESCRIPTOR);</div><div class="line">            <span class="keyword">if</span> ((book != <span class="keyword">null</span>)) &#123;</div><div class="line">                _data.writeInt(<span class="number">1</span>);</div><div class="line">                book.writeToParcel(_data, <span class="number">0</span>);</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                _data.writeInt(<span class="number">0</span>);</div><div class="line">            &#125;</div><div class="line">            mRemote.transact(Stub.TRANSACTION_addBook, _data, _reply, <span class="number">0</span>);</div><div class="line">            _reply.readException();</div><div class="line">        &#125; <span class="keyword">finally</span> &#123;</div><div class="line">            _reply.recycle();</div><div class="line">            _data.recycle();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="Binder-的工作机制"><a href="#Binder-的工作机制" class="headerlink" title="Binder 的工作机制"></a>Binder 的工作机制</h4><p><img src="https://lh3.googleusercontent.com/-JrQschTl184/WXhxbX_2NHI/AAAAAAAAAX8/RJkMpmChc1s0phMV2cwx9cJ_cqJw_IF7wCHMYCw/I/Binder" alt="Binder 工作机制"></p>
<blockquote>
<p>以上述为例，客户端调用 getBookList 方法时，在方法内部定义了 Parcel 对象，然后通过调用 transact 发起远程请求，服务器端接收到后调用 onTransact 方法，根据传递过来的 Code 进行相应的处理，将结果写入 Parcel 对象当中，处理完成之后在 客户端的 transact 将结果取出来并返回。</p>
</blockquote>
<h4 id="Binder-使用的一些注意点"><a href="#Binder-使用的一些注意点" class="headerlink" title="Binder 使用的一些注意点"></a>Binder 使用的一些注意点</h4><p>Binder 一般和 Service 配合使用，作为 bindService 执行时的返回，最后在 ServiceConnect 当中获取返回的 Binder：<br>    ​<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> ServiceConnection serviceConnection = <span class="keyword">new</span> ServiceConnection() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceConnected</span><span class="params">(ComponentName componentName, IBinder iBinder)</span> </span>&#123;</div><div class="line">        mCalcAidl = ICalcAIDL.Stub.asInterface(iBinder);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceDisconnected</span><span class="params">(ComponentName componentName)</span> </span>&#123;</div><div class="line">        mCalcAidl = <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line">​</div></pre></td></tr></table></figure></p>
<blockquote>
<p>不同进程时返回的 iBinder 是 ICalcAIDL.Stub.Proxy，而相同进程中则是 ICalcAIDL.Stub。是返回 Stub 还是返回 Proxy 在底层已经做了判断，不是在 onServiceConnected 方法中进行的判断</p>
</blockquote>
<p>在服务中使用时，定义的 AIDL 文件包名必须相同，不然将无法找到对应的 AIDL，从而导致无法进行通信，并且使用时需要通过 ICalcAIDL.Stub 实现在 AIDL 中定义的接口，从而为客户端提供服务。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> ICalcAIDL.Stub mBinder = <span class="keyword">new</span> Stub() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> <span class="keyword">throws</span> RemoteException </span>&#123;</div><div class="line">        <span class="keyword">return</span> x + y;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">min</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> <span class="keyword">throws</span> RemoteException </span>&#123;</div><div class="line">        <span class="keyword">return</span> x - y;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><blockquote>
<p>粗略的说，Client 通过 Binder 当中的 Proxy 进行了 IPC 的请求，而 Server 则通过 Stub 当中的 onTransact 对跨进程请求进行处理，之所以能进行跨进程请求的原因在于底层能够通过可序列化的数据，上述的 Book 类实现了 Parcelable 接口，而基本类型是被看作可序列化的，所以这些数据在底层能够进行传输，自然就可以通过 Binder 完成 IPC。</p>
</blockquote>
<hr>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><ol>
<li>Android 开发艺术探索-IPC 机制</li>
<li><a href="http://blog.csdn.net/lmj623565791/article/details/38461079/" target="_blank" rel="external">Android aidl Binder框架浅析</a></li>
<li><a href="http://weishu.me/2016/01/12/binder-index-for-newer/" target="_blank" rel="external">Binder学习指南</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;什么是-Binder&quot;&gt;&lt;a href=&quot;#什么是-Binder&quot; class=&quot;headerlink&quot; title=&quot;什么是 Binder&quot;&gt;&lt;/a&gt;什么是 Binder&lt;/h4&gt;&lt;p&gt;Binder 是 Android 中一种跨进程通信（IPC）方式。&lt;/p&gt;
&lt;h4 id=&quot;Binder-的原理&quot;&gt;&lt;a href=&quot;#Binder-的原理&quot; class=&quot;headerlink&quot; title=&quot;Binder 的原理&quot;&gt;&lt;/a&gt;Binder 的原理&lt;/h4&gt;&lt;p&gt;Binder通信采用C/S架构，从组件视角来说，包含 Client、Server、ServiceManager 以及 binder 驱动，其中 ServiceManager 用于管理系统中的各种服务。架构图如下所示：&lt;br&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/-r87ZtMW666o/WXhxa-i0nJI/AAAAAAAAAX0/tPeJ1cnEgXsMc7-ogBqi15BGw5UjY60gACHMYCw/I/Binder&quot; alt=&quot;Binder原理&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;此处的 Service Manager 是指 Native 层的 ServiceManager（C++）
    
    </summary>
    
      <category term="Android进阶" scheme="http://www.rookieyang.cn/categories/Android%E8%BF%9B%E9%98%B6/"/>
    
    
      <category term="Android" scheme="http://www.rookieyang.cn/tags/Android/"/>
    
      <category term="IPC" scheme="http://www.rookieyang.cn/tags/IPC/"/>
    
  </entry>
  
  <entry>
    <title>Service总结</title>
    <link href="http://www.rookieyang.cn/2017/08/27/Service%E6%80%BB%E7%BB%93/"/>
    <id>http://www.rookieyang.cn/2017/08/27/Service总结/</id>
    <published>2017-08-27T10:04:55.000Z</published>
    <updated>2018-01-15T14:53:05.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Service-的含义及作用"><a href="#Service-的含义及作用" class="headerlink" title="Service 的含义及作用"></a>Service 的含义及作用</h4><p>Service 是一个可以在后台执行长时间运行操作而不需要提供用户界面的应用组件，也就是说 Service 是为了去处理那些不需要和用户交互但又耗时的操作。但是如果 Service 只是为了执行那些耗时的操作的话，其实用线程也可以达到同样的目的，之所以需要单独用 Service 来进行实现的原因在于 Service 相较之线程而言优先级比较高，如果系统不是极端不够用，一般而言是不会杀死 Service，但是线程可能存在被系统回收的可能性，所以 Service 的可靠性要比线程高。<a id="more"></a><br>另外关于 Service，官网上还有如下的提示：</p>
<blockquote>
<p>服务在其托管进程的主线程中运行，它既不创建自己的线程，也不在单独的进程中运行（除非另行指定）。 这意味着，如果服务将执行任何 CPU 密集型工作或阻止性操作（例如 MP3 播放或联网），则应在服务内创建新线程来完成这项工作。通过使用单独的线程，可以降低发生“应用无响应”(ANR) 错误的风险，而应用的主线程仍可继续专注于运行用户与 Activity 之间的交互</p>
</blockquote>
<h4 id="Service-的生命周期"><a href="#Service-的生命周期" class="headerlink" title="Service 的生命周期"></a>Service 的生命周期</h4><p>Service 的生命周期主要和服务的使用方式有关，使用服务主要分为启动和绑定两种方式，其生命周期如下图所示：<br><img src="media/https://lh3.googleusercontent.com/-8_ilqWBW5y8/WaLgz_KuoeI/AAAAAAAAAbc/BYeSBXsoVssQchMiul3janGZGY4XEIMrwCHMYCw/I/15038466780030.jpg" alt=""></p>
<h4 id="Service-的基本使用"><a href="#Service-的基本使用" class="headerlink" title="Service 的基本使用"></a>Service 的基本使用</h4><ol>
<li>创建服务<br> 系统提供了一个 Service 抽象类，所以我们自己实现一个继承自 Service 的类，然后在 AndroidManifest.xml 注册即可。</li>
<li>运行服务<br> 运行服务主要方法有两种，一种是调用<br> startService()，第二种则是 bindService()。实际上这两个方法可以同时调用。</li>
<li>服务中处理事件<br> startService 启动服务，事件的处理一般在服务的 onStartCommand 方法进行的，bindService 绑定服务之后，将会在 ServiceConnection 的 onServiceConnected 中返回一个 Binder 对象，利用返回的 Binder 对象可以调用相关的事件处理方法。</li>
<li>停止服务<br> 服务的运行条件是服务被绑定或者被启动，所以想让服务不运行则需要破坏这两个条件，可以通过调用 stopService 和 unbindService 实现。</li>
</ol>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;Service-的含义及作用&quot;&gt;&lt;a href=&quot;#Service-的含义及作用&quot; class=&quot;headerlink&quot; title=&quot;Service 的含义及作用&quot;&gt;&lt;/a&gt;Service 的含义及作用&lt;/h4&gt;&lt;p&gt;Service 是一个可以在后台执行长时间运行操作而不需要提供用户界面的应用组件，也就是说 Service 是为了去处理那些不需要和用户交互但又耗时的操作。但是如果 Service 只是为了执行那些耗时的操作的话，其实用线程也可以达到同样的目的，之所以需要单独用 Service 来进行实现的原因在于 Service 相较之线程而言优先级比较高，如果系统不是极端不够用，一般而言是不会杀死 Service，但是线程可能存在被系统回收的可能性，所以 Service 的可靠性要比线程高。
    
    </summary>
    
      <category term="Android基础" scheme="http://www.rookieyang.cn/categories/Android%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Android" scheme="http://www.rookieyang.cn/tags/Android/"/>
    
      <category term="Service" scheme="http://www.rookieyang.cn/tags/Service/"/>
    
  </entry>
  
  <entry>
    <title>BroastCasts 总结</title>
    <link href="http://www.rookieyang.cn/2017/08/26/Android%E4%B9%8BBroastCastReceiver/"/>
    <id>http://www.rookieyang.cn/2017/08/26/Android之BroastCastReceiver/</id>
    <published>2017-08-26T15:06:37.000Z</published>
    <updated>2018-01-15T14:48:27.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="BroadCasts-定义及其作用"><a href="#BroadCasts-定义及其作用" class="headerlink" title="BroadCasts 定义及其作用"></a>BroadCasts 定义及其作用</h4><p>BroadCasts 是一种广播机制，类似于发布-订阅这种机制，当发生一些事件的时候，系统或程序就会发送（发布）一些相关的广播，而注册（订阅）了这些广播的程序就会通过广播接收器去响应这些广播。<br><a id="more"></a></p>
<h4 id="BroadCasts-的分类"><a href="#BroadCasts-的分类" class="headerlink" title="BroadCasts 的分类"></a>BroadCasts 的分类</h4><ol>
<li>按作用范围来分：<ul>
<li>全局广播</li>
<li>本地广播<br>  本地主要为了解决全局广播的安全性问题，由于全局广播是面向系统中所有应用的，所以当携带一些关键数据时可能会导致数据的泄漏。</li>
</ul>
</li>
<li>按接收顺序来分：<ul>
<li>标准广播<br>  标准广播在发出之后，所有相关的广播接收器几乎能够一次性接收到该条广播。</li>
<li>有序广播<br>  有序广播发出后，同一时间只有一个广播接收器能够接收到这条广播消息，只有当该广播接收器当中的处理逻辑处理完成之后，广播才能向下传递，并且优先级高的广播能够截断正在传递的广播。如果多个应用程序设置的优先级别相同，则谁先注册的广播，谁就可以优先接收到广播。</li>
</ul>
</li>
</ol>
<h4 id="BroadCasts-的使用"><a href="#BroadCasts-的使用" class="headerlink" title="BroadCasts 的使用"></a>BroadCasts 的使用</h4><p>广播机制的使用方法大体按照如下步骤：</p>
<ol>
<li><p>创建广播接收器<br> Android 系统提供了一个 BroadCastReciver 的抽象类，所以需要创建自己的广播接收器，然后重写当中的 onReceive 方法，在当中编写事件的处理逻辑。</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ForceReceiver</span> <span class="keyword">extends</span> <span class="title">BroadcastReceiver</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceive</span><span class="params">(<span class="keyword">final</span> Context context, Intent intent)</span> </span>&#123;</div><div class="line">        AlertDialog.Builder builder = <span class="keyword">new</span> AlertDialog.Builder(context);</div><div class="line">        builder.setTitle(<span class="string">"提示"</span>);</div><div class="line">        builder.setMessage(<span class="string">"已经被退出"</span>);</div><div class="line">        builder.setCancelable(<span class="keyword">false</span>);</div><div class="line">        builder.setPositiveButton(<span class="string">"OK"</span>, <span class="keyword">new</span> DialogInterface.OnClickListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(DialogInterface dialogInterface, <span class="keyword">int</span> i)</span> </span>&#123;</div><div class="line">                ActivityCollector.finishActivities();</div><div class="line">                Intent intent = <span class="keyword">new</span> Intent(context, LoginActivity.class);</div><div class="line">                context.startActivity(intent);</div><div class="line">            &#125;</div><div class="line">        &#125;).show();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>注册广播<br> 为了进行广播的接收还需要对需要接收的广播进行注册，注册方式可以分为两种：<br> 第一种是动态注册，如果是全局广播则在 Activity 中直接调用 registerReceiver 方法即可，该方法主要接收两个参数，一个是 BroadCastReceiver，第二个则是 IntentFilter。如果是本地广播则需要借助系统提供的 LocalBroadCastManager 去进行注册，方法名与注册全局广播的方法名一致。<br> 全局广播：</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">IntentFilter intentFilter = <span class="keyword">new</span> IntentFilter(<span class="string">"com.rookieyang.forcelogin"</span>);</div><div class="line">forceReceiver = <span class="keyword">new</span> ForceReceiver();</div><div class="line">registerReceiver(forceReceiver, intentFilter);</div></pre></td></tr></table></figure>
<p> 本地广播：</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">IntentFilter intentFilter = <span class="keyword">new</span> IntentFilter(<span class="string">"com.rookieyang.forcelogin"</span>);</div><div class="line">forceReceiver = <span class="keyword">new</span> ForceReceiver();</div><div class="line">LocalBroadcastManager localBroadcastManager = LocalBroadcastManager.getInstance(<span class="keyword">this</span>);</div><div class="line">localBroadcastManager.registerReceiver(forceReceiver, intentFilter);</div></pre></td></tr></table></figure>
<p> 第二种是静态注册，静态注册可以实现在程序未启动的情况下接收到广播，静态注册的广播是全局广播。</p>
 <figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;uses-permission android:name="android.permission.RECEIVE_BOOT_COMPLETED"/&gt;</div><div class="line">&lt;receiver</div><div class="line">    android:name=".BootCompleteReceiver"</div><div class="line">    android:enabled="true"</div><div class="line">    android:exported="true"&gt;</div><div class="line">    &lt;intent-filter&gt;</div><div class="line">        &lt;action android:name="android.intent.action.BOOT_COMPLETED" /&gt;</div><div class="line">    &lt;/intent-filter&gt;</div><div class="line">&lt;/receiver&gt;</div></pre></td></tr></table></figure>
<blockquote>
<p>监听系统的开机广播是需要添加权限的，动态注册相比较于静态注册而言更为灵活，但是静态注册能够实现在应用未启动的情况下接收广播。而且动态注册的广播最后必须要取消注册。</p>
</blockquote>
</li>
<li><p>发送广播<br> 发送广播需要主要通过 Intent 传递信息，如果是是系统广播则不需要我们去编码去发送广播，如果是自定义的广播，发送标准广播则调用 sendBroadCast 方法，发送有序广播则调用 sendOrderedBroadcast 方法。如果是本地广播则和上文一致需要借助 LocalBroadCastManager 进行发送，本地广播没有有序广播。</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Intent intent = <span class="keyword">new</span> Intent(<span class="string">"com.rookieyang.forcelogin"</span>);</div><div class="line">sendBroadcast(intent);</div><div class="line"><span class="comment">//sendOrderedBroadcast(intent);</span></div><div class="line">localBroadcastManager.sendBroadcast();</div></pre></td></tr></table></figure>
</li>
<li><p>接收处理<br> 接收处理在广播接收器的 onReceive 方法中进行，创建广播接收器中已经说明，在此不再赘述。</p>
</li>
<li>取消注册<br> 静态注册的不需要我们编码去取消注册，对于动态注册的则需要编码去取消注册，如果是全局广播则调用 unregisterReceiver 方法即可，如果是本地广播则调用 LocalBroadCastManager 对象的该方法即可。 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">unregisterReceiver(forceReceiver);</div><div class="line">localBroadcastManager.unregisterReceiver(forceReceiver);</div></pre></td></tr></table></figure>
</li>
</ol>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;BroadCasts-定义及其作用&quot;&gt;&lt;a href=&quot;#BroadCasts-定义及其作用&quot; class=&quot;headerlink&quot; title=&quot;BroadCasts 定义及其作用&quot;&gt;&lt;/a&gt;BroadCasts 定义及其作用&lt;/h4&gt;&lt;p&gt;BroadCasts 是一种广播机制，类似于发布-订阅这种机制，当发生一些事件的时候，系统或程序就会发送（发布）一些相关的广播，而注册（订阅）了这些广播的程序就会通过广播接收器去响应这些广播。&lt;br&gt;
    
    </summary>
    
      <category term="Android基础" scheme="http://www.rookieyang.cn/categories/Android%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Android" scheme="http://www.rookieyang.cn/tags/Android/"/>
    
      <category term="BroatCasts" scheme="http://www.rookieyang.cn/tags/BroatCasts/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu 14.04下AVD的创建以及闪退问题</title>
    <link href="http://www.rookieyang.cn/2017/08/24/14-04%E4%B8%8BAVD%E7%9A%84%E5%88%9B%E5%BB%BA%E4%BB%A5%E5%8F%8A%E9%97%AA%E9%80%80%E9%97%AE%E9%A2%98/"/>
    <id>http://www.rookieyang.cn/2017/08/24/14-04下AVD的创建以及闪退问题/</id>
    <published>2017-08-24T15:15:12.000Z</published>
    <updated>2018-01-15T15:07:02.000Z</updated>
    
    <content type="html"><![CDATA[<p>在 Ubuntu 14.04 下创建 Android 虚拟机时可能会出现下列错误：</p>
<blockquote>
<p>An error occurred while creating the AVD. See idea.log for details</p>
</blockquote>
<p>在网上查找之后很多人建议使用 sudo apt-get install lib32stdc++6 这条命令，但是实际上采用这条命令去安装会出现依赖冲突的问题，所以需要借助 sudo aptitude -f install lib32stdc++6 去解决依赖问题，这条语句使用一次可能并不能解决问题，实际当中我运行了三次才解决了依赖的冲突的问题，每一次运行的时候依次选择 no-&gt;yes-&gt;yes。具体要运行几次，必须看 lib32stdc++6 库是否安装成功。<a id="more"></a></p>
<p>在经过上述的操作之后，虽然 AVD 可能能成功创建，但实际可能还是无法启动，无法启动的原因可能是需要安装 Intel’s KVM，具体步骤可以参考<a href="https://github.com/uw-it-aca/spacescout-android/wiki/1.-Setting-Up-Android-Studio-on-Ubuntu#install-intels-kvm-for-better-avd-performance" target="_blank" rel="external">Setting Up Android Studio on Ubuntu</a>当中的 Install Intel’s KVM for Better AVD Performance 部分，在这部分当中只需做到第七步即可，由于我使用的 AndroidStudio 2.3，无法找到第八步所说的选项。</p>
<p>在安装好所需要的一切库之后，接下来的步骤如下：</p>
<ol>
<li>创建虚拟机，记下虚拟机名称</li>
<li>进入到 Sdk 路径下的 tools 目录，执行以下指令<blockquote>
<p>sudo chmod +x emulator<br>./emulator -avd 虚拟机名称 -qemu -m 2047 -enable-kvm</p>
</blockquote>
</li>
</ol>
<p>在经过上述的两个步骤之后基本上是能够成功启动了的。</p>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在 Ubuntu 14.04 下创建 Android 虚拟机时可能会出现下列错误：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;An error occurred while creating the AVD. See idea.log for details&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在网上查找之后很多人建议使用 sudo apt-get install lib32stdc++6 这条命令，但是实际上采用这条命令去安装会出现依赖冲突的问题，所以需要借助 sudo aptitude -f install lib32stdc++6 去解决依赖问题，这条语句使用一次可能并不能解决问题，实际当中我运行了三次才解决了依赖的冲突的问题，每一次运行的时候依次选择 no-&amp;gt;yes-&amp;gt;yes。具体要运行几次，必须看 lib32stdc++6 库是否安装成功。
    
    </summary>
    
      <category term="Android问题记录" scheme="http://www.rookieyang.cn/categories/Android%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/"/>
    
    
      <category term="Android" scheme="http://www.rookieyang.cn/tags/Android/"/>
    
      <category term="工具问题" scheme="http://www.rookieyang.cn/tags/%E5%B7%A5%E5%85%B7%E9%97%AE%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>Java 线程简述</title>
    <link href="http://www.rookieyang.cn/2017/08/22/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%80%BB%E7%BB%93/"/>
    <id>http://www.rookieyang.cn/2017/08/22/Java多线程总结/</id>
    <published>2017-08-22T00:41:38.000Z</published>
    <updated>2018-01-15T14:51:45.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="线程的作用"><a href="#线程的作用" class="headerlink" title="线程的作用"></a>线程的作用</h4><blockquote>
<p>线程（英语：Thread）是操作系统能够进行运算调度的最小单位。它被包含在进程之中，是进程中的实际运作单位。一条线程指的是进程中一个单一顺序的控制流，一个进程中可以并发多个线程，每条线程并行执行不同的任务。</p>
</blockquote>
<p>简而言之，线程的存在是为了实现程序的并发操作，提高执行效率。<br><a id="more"></a></p>
<h4 id="线程的生命周期"><a href="#线程的生命周期" class="headerlink" title="线程的生命周期"></a>线程的生命周期</h4><p><img src="https://lh3.googleusercontent.com/-3VjAes2Q55I/WZ2bm0Md6_I/AAAAAAAAAa8/aJ6l7WMWz7YoZ3CyWI2EqE6NdsgsksA0wCHMYCw/I/%255BUNSET%255D" alt="线程状态"><br>线程的主要生命周期如上图所示，主要分为五个状态：</p>
<ol>
<li>新建态（New）：Java 中使用 new 关键字创建线程之后，这时线程即处于新建态。</li>
<li>就绪态（Runnable）：在线程调用 start() 方法之后，线程即处于就绪态。</li>
<li>运行态（Running）：当就绪态的线程获得 CPU 并且开始执行 run() 方法之后，线程就会处于运行状态。</li>
<li>阻塞态（Blocked）：在处于运行态的线程调用了 sleep() 或 wait() 又或者是调用了一个阻塞式的 IO 方法之后，线程将会处于阻塞状态。</li>
<li>死亡态（Dead）：在线程中的 run() 方法执行完毕、线程抛出异常、调用线程的 stop() 这几种情形下线程将会进入死亡态。</li>
</ol>
<h4 id="线程的实现方法"><a href="#线程的实现方法" class="headerlink" title="线程的实现方法"></a>线程的实现方法</h4><p>Java 中线程的实现主要是通过 Thread 类和 Runnable 接口。</p>
<ol>
<li><p>通过 Thread 类实现：</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Thread thread = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">/** do some things **/</span></div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
</li>
<li><p>通过 Runnable 接口实现：</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">/** do some things **/</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">MyThread myThread = <span class="keyword">new</span> MyThread();</div><div class="line">Thread thread = <span class="keyword">new</span> Thread(myThread);</div></pre></td></tr></table></figure>
</li>
</ol>
<blockquote>
<p>相对而言第二种方式更为合理一些，第二种方式创建的线程类只实现了 Runnable 接口，还可以再继承其它的父类。</p>
</blockquote>
<hr>
<h4 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h4><p><a href="http://blog.csdn.net/ns_code/article/details/17161237" target="_blank" rel="external">【Java并发编程】之六：Runnable和Thread实现多线程的区别（含代码）</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;线程的作用&quot;&gt;&lt;a href=&quot;#线程的作用&quot; class=&quot;headerlink&quot; title=&quot;线程的作用&quot;&gt;&lt;/a&gt;线程的作用&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;线程（英语：Thread）是操作系统能够进行运算调度的最小单位。它被包含在进程之中，是进程中的实际运作单位。一条线程指的是进程中一个单一顺序的控制流，一个进程中可以并发多个线程，每条线程并行执行不同的任务。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;简而言之，线程的存在是为了实现程序的并发操作，提高执行效率。&lt;br&gt;
    
    </summary>
    
      <category term="Java基础" scheme="http://www.rookieyang.cn/categories/Java%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Java" scheme="http://www.rookieyang.cn/tags/Java/"/>
    
      <category term="Thread" scheme="http://www.rookieyang.cn/tags/Thread/"/>
    
  </entry>
  
  <entry>
    <title>LayoutInflater 总结</title>
    <link href="http://www.rookieyang.cn/2017/07/22/LayoutInflater%E6%80%BB%E7%BB%93/"/>
    <id>http://www.rookieyang.cn/2017/07/22/LayoutInflater总结/</id>
    <published>2017-07-22T15:01:23.000Z</published>
    <updated>2018-01-15T14:51:56.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="LayoutInflater-的获取"><a href="#LayoutInflater-的获取" class="headerlink" title="LayoutInflater 的获取"></a>LayoutInflater 的获取</h4><p>获取 LayoutInflater 的方式一般有三种：</p>
<ol>
<li><code>getLayoutInflater()</code></li>
<li><code>LayoutInflater.from(Context context)</code></li>
<li><code>context.getSystemService(Context.LAYOUT_INFLATER_SERVICE)</code></li>
</ol>
<p>这三种获取方式本质上都是一样的</p>
<ul>
<li>getLayoutInflater() 通过 getWindow().getLayoutInflater() 进行获取，getWindow() 获取的是 PhoneWindow，然后 PhoneWindow 通过 mLayoutInflater = LayoutInflater.from(context) 获取 LayoutInflater。</li>
<li><p>LayoutInflater.from(Context context) 内部通过以下代码获取 LayoutInflater。<a id="more"></a></p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> LayoutInflater <span class="title">from</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">    LayoutInflater LayoutInflater =</div><div class="line">            (LayoutInflater) context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);</div><div class="line">    <span class="keyword">if</span> (LayoutInflater == <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> AssertionError(<span class="string">"LayoutInflater not found."</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> LayoutInflater;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>  <strong>结论：所以这三种方式最终都调用了 Context.getSystemService()</strong></p>
</li>
</ul>
<h4 id="LayoutInflater-的-inflater-方法"><a href="#LayoutInflater-的-inflater-方法" class="headerlink" title="LayoutInflater 的 inflater 方法"></a>LayoutInflater 的 inflater 方法</h4><p>inflater 作为 LayoutInflater 中最常用的方法，用于从 xml 的布局文件得到一个 View 对象，加载到 Activity 用于动态创建布局。inflater 总共重载了 4 种调用方式：</p>
<ol>
<li><code>public View inflate(@LayoutRes int resource, @Nullable ViewGroup root)</code></li>
<li><code>public View inflate(@LayoutRes int resource, @Nullable ViewGroup root, boolean attachToRoot)</code></li>
<li><code>public View inflate(XmlPullParser parser, @Nullable ViewGroup root)</code></li>
<li><p><code>public View inflate(XmlPullParser parser, @Nullable ViewGroup root, boolean attachToRoot)</code></p>
<ul>
<li><code>resource</code> 指的是布局文件的 ID</li>
<li><code>root</code> 填充的根视图</li>
<li><code>attachToRoot</code> 决定是否将载入的视图附加到根视图上，如果为 false 则仅用于为 XML 中的根视图创建正确的 LayoutParams 的子类</li>
<li>前三个 inflater 方法最终都会调用第四个 inflater 方法，采用了 pull 解析</li>
<li>避免将 null 作为 ViewGroup 传入</li>
<li>当不需要将返回的 View 添加入 ViewGroup 时应该设置attachToRoot 为 false</li>
<li>避免在 View 已经被添加入 ViewGroup 时将 attachToRoot 设置为 True</li>
<li>自定义 View 时非常适合将 attachToRoot 设置为 True</li>
</ul>
</li>
</ol>
<h4 id="LayoutInflater-基本使用"><a href="#LayoutInflater-基本使用" class="headerlink" title="LayoutInflater 基本使用"></a>LayoutInflater 基本使用</h4><p>由于 LayoutInflater 主要用于布局填充，所以主要涉及到的是 inflater 方法，inflater 返回了一个 View，其调用方式是：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">LayoutInflater inflater = (LayoutInflater) context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);</div><div class="line">View view = inflater.inflate(R.layout.first_fragment, container, <span class="keyword">false</span>);</div></pre></td></tr></table></figure>
<hr>
<h4 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h4><ol>
<li><a href="http://blog.chengdazhi.com/index.php/110" target="_blank" rel="external">深入理解 LayoutInflater.inflate()</a></li>
<li><a href="http://blog.csdn.net/guolin_blog/article/details/12921889/" target="_blank" rel="external">Android LayoutInflater 原理分析，带你一步步深入了解 View (一)</a></li>
<li><a href="http://www.2cto.com/kf/201407/313054.html" target="_blank" rel="external">LayoutInflater——80%的Android程序员对它并不了解甚至错误使用</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;LayoutInflater-的获取&quot;&gt;&lt;a href=&quot;#LayoutInflater-的获取&quot; class=&quot;headerlink&quot; title=&quot;LayoutInflater 的获取&quot;&gt;&lt;/a&gt;LayoutInflater 的获取&lt;/h4&gt;&lt;p&gt;获取 LayoutInflater 的方式一般有三种：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;getLayoutInflater()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;LayoutInflater.from(Context context)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;context.getSystemService(Context.LAYOUT_INFLATER_SERVICE)&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这三种获取方式本质上都是一样的&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;getLayoutInflater() 通过 getWindow().getLayoutInflater() 进行获取，getWindow() 获取的是 PhoneWindow，然后 PhoneWindow 通过 mLayoutInflater = LayoutInflater.from(context) 获取 LayoutInflater。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;LayoutInflater.from(Context context) 内部通过以下代码获取 LayoutInflater。
    
    </summary>
    
      <category term="Android基础" scheme="http://www.rookieyang.cn/categories/Android%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Android" scheme="http://www.rookieyang.cn/tags/Android/"/>
    
      <category term="LayoutInflater" scheme="http://www.rookieyang.cn/tags/LayoutInflater/"/>
    
  </entry>
  
  <entry>
    <title>AsyncTask 总结</title>
    <link href="http://www.rookieyang.cn/2017/07/11/AsyncTask%E6%80%BB%E7%BB%93/"/>
    <id>http://www.rookieyang.cn/2017/07/11/AsyncTask总结/</id>
    <published>2017-07-11T04:49:39.000Z</published>
    <updated>2018-01-15T14:49:56.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="AsyncTask-的作用"><a href="#AsyncTask-的作用" class="headerlink" title="AsyncTask 的作用"></a>AsyncTask 的作用</h4><blockquote>
<p>AsyncTask 允许对用户界面执行异步操作。 它会先阻塞工作线程中的操作，然后在 UI 线程中发布结果，而无需您亲自处理线程和/或处理程序。</p>
</blockquote>
<p>AsyncTask 基于异步消息处理机制进行实现，通过 AsyncTask 能够很简单的从子线程切换至主线程。<br><a id="more"></a></p>
<h4 id="AsyncTask-的基本使用"><a href="#AsyncTask-的基本使用" class="headerlink" title="AsyncTask 的基本使用"></a>AsyncTask 的基本使用</h4><ol>
<li><p>由于 AsyncTask 是抽象类，所以首先需要创建一个继承它的子类。</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAsyncTask</span> <span class="keyword">extends</span> <span class="title">AsyncTask</span>&lt;<span class="title">Void</span>, <span class="title">Integer</span>, <span class="title">Boolean</span>&gt;</span></div></pre></td></tr></table></figure>
<p> 其中可以为 AsyncTask 指定三个泛型参数</p>
<ul>
<li>Params：执行 Task 时传递的参数，在后台任务中使用，这里指定为 Void</li>
<li>Progress：指定进度单位，这里指定为 Integer</li>
<li>Result：执行完任务后返回的类型，这里指定为 Boolean</li>
</ul>
</li>
<li><p>重写 AsyncTask 的一些方法，主要是下面四个：</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onPreExecute</span><span class="params">()</span> </span>&#123;</div><div class="line">    progressDialog.show();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> Boolean <span class="title">doInBackground</span><span class="params">(Void... voids)</span> </span>&#123;</div><div class="line">    <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</div><div class="line">        <span class="keyword">int</span> percent = doDownload();</div><div class="line">        publishProgress(percent);</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            Thread.sleep(<span class="number">1000</span>);</div><div class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (percent &gt;= <span class="number">100</span>) &#123;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onProgressUpdate</span><span class="params">(Integer... values)</span> </span>&#123;</div><div class="line">    progressDialog.setMessage(<span class="string">"Downloaded "</span> + values[<span class="number">0</span>] + <span class="string">"%"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onPostExecute</span><span class="params">(Boolean result)</span> </span>&#123;</div><div class="line">    progressDialog.dismiss();</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (result) &#123;</div><div class="line">        Toast.makeText(MainActivity.getCurrentContext(),</div><div class="line">            <span class="string">"Download Succeeded"</span>, Toast.LENGTH_LONG).show();</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        Toast.makeText(MainActivity.getCurrentContext(),</div><div class="line">            <span class="string">"Download Failed"</span>, Toast.LENGTH_LONG).show();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>onPreExecute()：任务执行之前在 UI 线程当中进行调用，通常用于进行一些界面的初始化工作，譬如显示一个进度条。</li>
<li>doInBackground(Params…)：必须实现的方法，在 onPreExecute() 方法执行完毕之后运行在子线程上，通常用于执行耗时任务，Params 参数将会传递至该方法。执行完任务之后将会通过 return 语句返回执行结果，如果 Result 设定为 Void 则可以不进行返回。同时在该方法中可以通过 publishProgress(Progress…) 方法对任务执行进度进行反馈。</li>
<li>onProgressUpdate(Progress…)：publishProgress(Progress…) 被调用之后执行在 UI 线程当中，在该方法中可以展示任务执行的进度及对进度进行更新，譬如可以对进度条进行动画处理。</li>
<li>onPostExecute(Result)：任务执行完之后的返回结果将会传递至该方法，可以利用返回的结果进行一些 UI 操作，譬如提醒任务执行的结果，该方法运行在 UI 线程中。</li>
</ul>
</li>
</ol>
<h4 id="AsyncTask-源码浅解"><a href="#AsyncTask-源码浅解" class="headerlink" title="AsyncTask 源码浅解"></a>AsyncTask 源码浅解</h4><h5 id="执行过程图"><a href="#执行过程图" class="headerlink" title="执行过程图"></a>执行过程图</h5><p><img src="https://lh3.googleusercontent.com/-MmpRFoM9LfE/WWR_EqDwUYI/AAAAAAAAAW4/IY7xCH9t700PzA5Mo7eOxRVrtme6-RifACHMYCw/I/AsyncTask.png" alt="AsyncTask"></p>
<h5 id="执行过程"><a href="#执行过程" class="headerlink" title="执行过程"></a>执行过程</h5><ol>
<li>首先通过调用 execute(Params… params) 方法执行任务<br> 内部执行了 executeOnExecutor(sDefaultExecutor, params)，sDefaultExecutor 是内部定义的 SerialExecutor 类的对象，主要的方法是 execute(final Runnable r) 用于启动一个线程。</li>
<li><p>executeOnExecutor(Executor exec, Params… params)<br> 作为第一步中执行的方法，首先会判断任务的运行状态，如果是 PENDING 则表明没有运行，然后便会执行 onPreExecute() 方法，之后将 params 传递给 mWorker 对象，mWorker 是一个实现了 Callable 接口的 WorkerRunnable 对象，最后调用 exec.execute(mFuture) 去启动线程。其中 mWorker 和 mFuture 对象在构造函数中完成了初始化过程。mFuture 是一个实现了 RunnableFuture 接口的 FutureTask 对象，FutureTask 的 run() 方法将会调用 Callable 接口的 call() 方法。也即是说 exec.execute(mFuture) 调用了 mFuture 的 run() 方法从而调用了 mWorker 的 call() 方法。</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//execute 的执行过程</span></div><div class="line">exec.execute(mFuture);</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(<span class="keyword">final</span> Runnable r)</span> </span>&#123;</div><div class="line">mTasks.offer(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            r.run();</div><div class="line">        &#125; <span class="keyword">finally</span> &#123;</div><div class="line">            scheduleNext();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line"><span class="keyword">if</span> (mActive == <span class="keyword">null</span>) &#123;</div><div class="line">    scheduleNext();</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<p>//mFuture 调用 mWorker.call() 的过程<br>mFuture = new FutureTask<result>(mWorker)<br>public FutureTask(Callable<v> callable) {<br>    if (callable == null)<br>        throw new NullPointerException();<br>    this.callable = callable;<br>    this.state = NEW;       // ensure visibility of callable<br>}<br>public void run() {<br>    if (state != NEW ||<br>        !U.compareAndSwapObject(this, RUNNER, null, Thread.currentThread()))<br>        return;<br>    try {<br>        Callable<v> c = callable;<br>        if (c != null &amp;&amp; state == NEW) {<br>            V result;<br>            boolean ran;<br>            try {<br>                result = c.call();<br>                ran = true;<br>            } catch (Throwable ex) {<br>                result = null;<br>                ran = false;<br>                setException(ex);<br>            }<br>            if (ran)<br>                set(result);<br>        }<br>    } finally {<br>        // runner must be non-null until state is settled to<br>        // prevent concurrent calls to run()<br>        runner = null;<br>        // state must be re-read after nulling runner to prevent<br>        // leaked interrupts<br>        int s = state;<br>        if (s &gt;= INTERRUPTING)<br>            handlePossibleCancellationInterrupt(s);<br>    }<br>}<br>    ​<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">3. 执行完上述两步之后 mWorker.call() 得到了调用，任务开始启动。</div><div class="line">    在 call() 方法中调用了 doInBackground(mParams) 并将结果保存在 result 变量当中，然后在 postResult(result) 中通过 getHandler() 获取到 InternalHandler 对象，通过 obtainMessage() 方法将结果发送出去，之后在 handleMessage(Message msg) 中调用了 finish() 方法。finish() 方法中最终调用了 onPostExecute(result) 方法。</div><div class="line">    如果在 doInBackground(mParams) 调用了 publishProgress(Progress... values)，则在 publishProgress(Progress... values) 中也会通过 getHandler() 发送 Message，然后在 handleMessage(Message msg) 中调用 onProgressUpdate(Progress... values) 方法。</div><div class="line">    ```JAVA</div><div class="line">    private Result postResult(Result result) &#123;</div><div class="line">    @SuppressWarnings(&quot;unchecked&quot;)</div><div class="line">    Message message = getHandler().obtainMessage(MESSAGE_POST_RESULT,</div><div class="line">           new AsyncTaskResult&lt;Result&gt;(this, result));</div><div class="line">    message.sendToTarget();</div><div class="line">    return result;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></v></v></result></p>
<p>protected final void publishProgress(Progress… values) {<br>    if (!isCancelled()) {<br>        getHandler().obtainMessage(MESSAGE_POST_PROGRESS,<br>                new AsyncTaskResult<progress>(this, values)).sendToTarget();<br>    }<br>}</progress></p>
<p>public void handleMessage(Message msg) {<br>    AsyncTaskResult&lt;?&gt; result = (AsyncTaskResult&lt;?&gt;) msg.obj;<br>    switch (msg.what) {<br>        case MESSAGE_POST_RESULT:<br>            // There is only one result<br>            result.mTask.finish(result.mData[0]);<br>            break;<br>        case MESSAGE_POST_PROGRESS:<br>            result.mTask.onProgressUpdate(result.mData);<br>            break;<br>    }<br>}</p>
<p>private void finish(Result result) {<br>    if (isCancelled()) {<br>        onCancelled(result);<br>    } else {<br>        onPostExecute(result);<br>    }<br>    mStatus = Status.FINISHED;<br>}</p>
<pre><code>​```
</code></pre><hr>
<p>​    </p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;AsyncTask-的作用&quot;&gt;&lt;a href=&quot;#AsyncTask-的作用&quot; class=&quot;headerlink&quot; title=&quot;AsyncTask 的作用&quot;&gt;&lt;/a&gt;AsyncTask 的作用&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;AsyncTask 允许对用户界面执行异步操作。 它会先阻塞工作线程中的操作，然后在 UI 线程中发布结果，而无需您亲自处理线程和/或处理程序。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;AsyncTask 基于异步消息处理机制进行实现，通过 AsyncTask 能够很简单的从子线程切换至主线程。&lt;br&gt;
    
    </summary>
    
      <category term="Android进阶" scheme="http://www.rookieyang.cn/categories/Android%E8%BF%9B%E9%98%B6/"/>
    
    
      <category term="Android" scheme="http://www.rookieyang.cn/tags/Android/"/>
    
      <category term="源码分析" scheme="http://www.rookieyang.cn/tags/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>Gallery 的三种实现方式</title>
    <link href="http://www.rookieyang.cn/2017/05/08/Gallery%E7%9A%84%E4%B8%89%E7%A7%8D%E5%AE%9E%E7%8E%B0%E6%96%B9%E5%BC%8F/"/>
    <id>http://www.rookieyang.cn/2017/05/08/Gallery的三种实现方式/</id>
    <published>2017-05-08T11:17:49.000Z</published>
    <updated>2018-01-15T14:51:20.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Gallery"><a href="#Gallery" class="headerlink" title="Gallery"></a>Gallery</h3><p>主要内容：<br><img src="https://lh3.googleusercontent.com/-3IROg74w7R0/WRBUvh7PYFI/AAAAAAAAAOg/HI89jtOkwlU-ipkBv1wpqsX_Z7ZHCKHngCHM/I/%255BUNSET%255D" alt="总结"><a id="more"></a><br>目标效果：<br><img src="https://lh3.googleusercontent.com/-XZzYHp3cr00/WRBfR0_cunI/AAAAAAAAAO8/ZM3ADS1SYp8b2N6w7axgphN6X0uZM8T1gCHM/I/2017-05-08%2B20.00.05.gif" alt="2017-05-08 20.00.05"></p>
<h4 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h4><p>从目标效果上来看主要考虑以下几个点：</p>
<ol>
<li>图片如何切换和切换动画<ul>
<li>ImageSwitcher 提供了 <code>setImageResource (int resid)</code> 方法对下一个 ImageView 进行图片加载和切换，切换的动画效果需要自定义</li>
<li>ViewPager 的切换和切换动画内部处理</li>
<li>HorizontalScrollView 可以通过 <code>smoothScrollBy (int dx, int dy)</code> 方法进行平滑切换</li>
</ul>
</li>
<li>图片的切换方向<ul>
<li>ImageSwitcher 的切换方向需要自己判断</li>
<li>HorizontalScrollView 的切换方向虽然不用判断，但是滑动距离需要自己控制</li>
<li>ViewPager 的切换方向无需处理</li>
</ul>
</li>
<li>确定切换时应该加载的图片<ul>
<li>ImageSwitcher 和 HorizontalScrollView 加载图片需要自己判断</li>
<li>ViewPager 的加载图片无需处理</li>
</ul>
</li>
<li>图片下方的圆点效果，与图片数量一致</li>
<li>圆点和图片的同步切换</li>
</ol>
<h4 id="ImageSwitcher-实现"><a href="#ImageSwitcher-实现" class="headerlink" title="ImageSwitcher 实现"></a>ImageSwitcher 实现</h4><ol>
<li><p>ImageSwitcher 的特点<br>首先查看 ImageSwitcher 和 ViewSwitcher 的官方 API：</p>
<blockquote>
<p>ViewSwitcher that switches between two ImageViews when a new image is set on it. The views added to an ImageSwitcher must all be ImageViews.</p>
<p>ViewAnimator that switches between two views, and has a factory from which these views are created. You can either use the factory to create the views, or add them yourself. A ViewSwitcher can only have two child views, of which only one is shown at a time.</p>
</blockquote>
<p> 官方给出的 API 说明了，ImageSwitcher 里最多只能由两个 ImageView，同一时间只能显示一个，在两个 ImageView 之间能够设置视图切换动画，并且提供了 factory 用于创建两个 ImageView（当然也可以选择自行添加）。</p>
</li>
<li><p>实现过程<br> 首先我们需要在布局文件中添加 ImageSwitcher 控件：</p>
 <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">FrameLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">  <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></div><div class="line">  <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></div><div class="line">  <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">  <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">  <span class="attr">tools:context</span>=<span class="string">"com.rookieyang.gallerytest.ImageSwitcherTest"</span>&gt;</div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">ImageSwitcher</span></span></div><div class="line">    <span class="attr">android:id</span>=<span class="string">"@+id/imageSwitcher"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span> /&gt;</div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">RelativeLayout</span></span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_marginBottom</span>=<span class="string">"30dp"</span>&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">LinearLayout</span></span></div><div class="line">      <span class="attr">android:id</span>=<span class="string">"@+id/tipsLayout"</span></div><div class="line">      <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">      <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">      <span class="attr">android:layout_alignParentBottom</span>=<span class="string">"true"</span></div><div class="line">      <span class="attr">android:gravity</span>=<span class="string">"center_horizontal"</span></div><div class="line">      <span class="attr">android:orientation</span>=<span class="string">"horizontal"</span>/&gt;</div><div class="line">  <span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">FrameLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<blockquote>
<p>采用 FrameLayout 将圆点部分置于图片的上方，RelativeLayout 用于控制原点部分在底部，LinearLayout 中的属性设置用于将圆点水平居中放置。</p>
</blockquote>
<p> 在添加完 ImageSwiter 之后，通过 <code>setFactory(ViewFactory factory)</code> 函数为 ImageSwiter 添加 ImageView：</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">mImageSwitcher.setFactory(<span class="keyword">new</span> ViewFactory() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> View <span class="title">makeView</span><span class="params">()</span> </span>&#123;</div><div class="line">        ImageView imageView = <span class="keyword">new</span> ImageView(ImageSwitcherTest.<span class="keyword">this</span>);</div><div class="line">        ImageSwitcher.LayoutParams layoutParams = <span class="keyword">new</span> ImageSwitcher.LayoutParams(</div><div class="line">            ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT);</div><div class="line">        imageView.setScaleType(ScaleType.CENTER_CROP);</div><div class="line">        imageView.setLayoutParams(layoutParams);</div><div class="line">        <span class="keyword">return</span> imageView;</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<blockquote>
<p>这里为 ImageSwitcher 设置了一个 factory，在 <code>setFactory(ViewFactory factory)</code> 内部会执行两次 <code>obtainView()</code> 完成 View 的增加。</p>
</blockquote>
<p>   上述过程只是完成了 ImageView 的添加，实际的图片还没有被加载，由于 ImageSwitcher 的限制，所以我们不能直接将 ImageView 一次性添加进去（这样性能也不高），可以选择用一个数组对图片资源进行保存，在调用 <code>setImageResource()</code> 时进行加载：</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">int</span>[] mImageId = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;R.drawable.pic1, R.drawable.pic2, R.drawable.pic3&#125;;</div><div class="line">mImageSwitcher.setImageResource(mImageId[<span class="number">0</span>]);</div></pre></td></tr></table></figure>
<p> 在解决了如何加载图片之后，还需要为图片下方添加圆点效果，圆点的个数由图片的个数决定，代码如下：</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> ImageView[] mTips;</div><div class="line"></div><div class="line">mTips = <span class="keyword">new</span> ImageView[mImageId.length];</div><div class="line">LinearLayout tipsLinearLayout = (LinearLayout) findViewById(R.id.tipsLayout);</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; mImageId.length; i++) &#123;</div><div class="line">    mTips[i] = <span class="keyword">new</span> ImageView(<span class="keyword">this</span>);</div><div class="line">    LinearLayout.LayoutParams layoutParams = <span class="keyword">new</span> LayoutParams(</div><div class="line">        <span class="keyword">new</span> ViewGroup.LayoutParams(ViewGroup.LayoutParams.WRAP_CONTENT,</div><div class="line">            ViewGroup.LayoutParams.WRAP_CONTENT));</div><div class="line">    layoutParams.leftMargin = <span class="number">5</span>;</div><div class="line">    layoutParams.rightMargin = <span class="number">5</span>;</div><div class="line">    tipsLinearLayout.addView(mTips[i], layoutParams);</div><div class="line">&#125;</div><div class="line"></div><div class="line">setTipsImage(<span class="number">0</span>);</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setTipsImage</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; mImageId.length; i++) &#123;</div><div class="line">        <span class="keyword">if</span> (i == position) &#123;</div><div class="line">            mTips[i].setImageResource(R.drawable.page_indicator_focused);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            mTips[i].setImageResource(R.drawable.page_indicator_unfocused);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p> 在完成上述步骤之后我们还需要完成的是让图片和圆点同时进行切换、确定切换方向和应该加载的图片以及切换的动画，对于图片的切换方向可以依据第一次按住屏幕和离开屏幕这两点的位置进行判断，而切换时加载的图片则可以用一个变量对当前图片序号进行保存，动画效果则可以定义四个动画（左进，左出，右进、右出）文件：</p>
 <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--left_in--&gt;</span></div><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">set</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span>&gt;</span></div><div class="line"> <span class="tag">&lt;<span class="name">translate</span></span></div><div class="line">   <span class="attr">android:fromXDelta</span>=<span class="string">"-100%p"</span></div><div class="line">   <span class="attr">android:toXDelta</span>=<span class="string">"0"</span></div><div class="line">   <span class="attr">android:duration</span>=<span class="string">"500"</span>/&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">set</span>&gt;</span></div><div class="line"><span class="comment">&lt;!--left_out--&gt;</span></div><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">set</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span>&gt;</span></div><div class="line"> <span class="tag">&lt;<span class="name">translate</span></span></div><div class="line">   <span class="attr">android:fromXDelta</span>=<span class="string">"0"</span></div><div class="line">   <span class="attr">android:toXDelta</span>=<span class="string">"-100%p"</span></div><div class="line">   <span class="attr">android:duration</span>=<span class="string">"500"</span>/&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">set</span>&gt;</span></div><div class="line"><span class="comment">&lt;!--right_in--&gt;</span></div><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">set</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span>&gt;</span></div><div class="line"> <span class="tag">&lt;<span class="name">translate</span></span></div><div class="line">   <span class="attr">android:fromXDelta</span>=<span class="string">"100%p"</span></div><div class="line">   <span class="attr">android:toXDelta</span>=<span class="string">"0"</span></div><div class="line">   <span class="attr">android:duration</span>=<span class="string">"500"</span>/&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">set</span>&gt;</span></div><div class="line"><span class="comment">&lt;!--right_out--&gt;</span></div><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">set</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span>&gt;</span></div><div class="line"> <span class="tag">&lt;<span class="name">translate</span></span></div><div class="line">   <span class="attr">android:fromXDelta</span>=<span class="string">"0"</span></div><div class="line">   <span class="attr">android:toXDelta</span>=<span class="string">"100%p"</span></div><div class="line">   <span class="attr">android:duration</span>=<span class="string">"500"</span>/&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">set</span>&gt;</span></div></pre></td></tr></table></figure>
<p> ​<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">int</span> mDownX;</div><div class="line"><span class="keyword">private</span> <span class="keyword">int</span> mCurrentPosition = <span class="number">0</span>;</div><div class="line"></div><div class="line">mImageSwitcher.setOnTouchListener(<span class="keyword">new</span> OnTouchListener() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouch</span><span class="params">(View v, MotionEvent event)</span> </span>&#123;</div><div class="line">        <span class="keyword">switch</span> (event.getAction()) &#123;</div><div class="line">            <span class="keyword">case</span> MotionEvent.ACTION_DOWN:</div><div class="line">                mDownX = (<span class="keyword">int</span>) event.getX();</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> MotionEvent.ACTION_UP:</div><div class="line">                <span class="keyword">int</span> upX = (<span class="keyword">int</span>) event.getX();</div><div class="line">                <span class="keyword">if</span> (upX &gt; mDownX) &#123;</div><div class="line">                    <span class="keyword">if</span> (mCurrentPosition &gt; <span class="number">0</span>) &#123;</div><div class="line">                        mImageSwitcher.setInAnimation(ImageSwitcherTest.<span class="keyword">this</span>,</div><div class="line">                            R.anim.left_in);</div><div class="line">                        mImageSwitcher.setOutAnimation(ImageSwitcherTest.<span class="keyword">this</span>,</div><div class="line">                            R.anim.right_out);</div><div class="line">                        mCurrentPosition--;</div><div class="line">                        mImageSwitcher.setImageResource(mImageId[mCurrentPosition]);</div><div class="line">                        setTipsImage(mCurrentPosition);</div><div class="line">                    &#125;</div><div class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (upX &lt; mDownX) &#123;</div><div class="line">                    <span class="keyword">if</span> (mCurrentPosition &lt; mImageId.length - <span class="number">1</span>) &#123;</div><div class="line">                        mImageSwitcher.setInAnimation(ImageSwitcherTest.<span class="keyword">this</span>,</div><div class="line">                            R.anim.right_in);</div><div class="line">                        mImageSwitcher.setOutAnimation(ImageSwitcherTest.<span class="keyword">this</span>,</div><div class="line">                            R.anim.left_out);</div><div class="line">                        mCurrentPosition++;</div><div class="line">                        mImageSwitcher.setImageResource(mImageId[mCurrentPosition]);</div><div class="line">                        setTipsImage(mCurrentPosition);</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line">​</div></pre></td></tr></table></figure></p>
</li>
</ol>
<h4 id="ViewPager-实现"><a href="#ViewPager-实现" class="headerlink" title="ViewPager 实现"></a>ViewPager 实现</h4><ol>
<li><p>ViewPager 的特点</p>
<blockquote>
<p>ViewPager is most often used in conjunction with Fragment, which is a convenient way to supply and manage the lifecycle of each page. There are standard adapters implemented for using fragments with the ViewPager, which cover the most common use cases. These are FragmentPagerAdapter and FragmentStatePagerAdapter; each of these classes have simple code showing how to build a full user interface with them.</p>
</blockquote>
<p> ViewPager 一般结合 Fragment 使用，每个页面就是一个 Fragment，系统提供了 FragmentPagerAdapter 和 FragmentStatePagerAdapter 用于填充 ViewPager。</p>
</li>
<li><p>实现过程<br> 首先向布局文件中添加 ViewPager 控件：</p>
 <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">FrameLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">  <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></div><div class="line">  <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">  <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">  <span class="attr">tools:context</span>=<span class="string">"com.rookieyang.gallerytest.ViewPagerTest"</span>&gt;</div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">android.support.v4.view.ViewPager</span></span></div><div class="line">    <span class="attr">android:id</span>=<span class="string">"@+id/viewPager"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span> /&gt;</div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">RelativeLayout</span></span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_marginBottom</span>=<span class="string">"30dp"</span>&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">LinearLayout</span></span></div><div class="line">      <span class="attr">android:id</span>=<span class="string">"@+id/tipsFragmentLayout"</span></div><div class="line">      <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">      <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">      <span class="attr">android:layout_alignParentBottom</span>=<span class="string">"true"</span></div><div class="line">      <span class="attr">android:gravity</span>=<span class="string">"center_horizontal"</span></div><div class="line">      <span class="attr">android:orientation</span>=<span class="string">"horizontal"</span>/&gt;</div><div class="line">  <span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">FrameLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<p> 布局基本与 ImageSwitcher 一致，只是将 ImageSwitcher 控件替换为 ViewPager。<br> 接下来需要将图片加载到 ViewPager 中去，可以利用 FragmentPagerAdapter 达到这一目的，由于 FragmentPagerAdapter 返回的是 Fragment，所以创建了 ImageFragment 类，用于将 Image 放置到 Fragment中，代码布局如下：</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ImageFragment</span> <span class="keyword">extends</span> <span class="title">Fragment</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="keyword">private</span> View view;</div><div class="line"><span class="keyword">private</span> <span class="keyword">int</span> imageViewRes;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> View <span class="title">onCreateView</span><span class="params">(LayoutInflater inflater, ViewGroup container,</span></span></div><div class="line">    Bundle savedInstanceState) &#123;</div><div class="line">    <span class="comment">// Inflate the layout for this fragment</span></div><div class="line">    view = inflater.inflate(R.layout.fragment_image, container, <span class="keyword">false</span>);</div><div class="line">    <span class="keyword">return</span> view;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onActivityCreated</span><span class="params">(@Nullable Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.onActivityCreated(savedInstanceState);</div><div class="line">    ImageView imageView = (ImageView) view.findViewById(R.id.viewPageImage);</div><div class="line">    imageView.setScaleType(ScaleType.CENTER_CROP);</div><div class="line">    imageView.setImageResource(imageViewRes);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setImageView</span><span class="params">(<span class="keyword">int</span> imageViewRes)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>.imageViewRes = imageViewRes;</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
 <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">FrameLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">  <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></div><div class="line">  <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">  <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">  <span class="attr">tools:context</span>=<span class="string">"com.rookieyang.gallerytest.ImageFragment"</span>&gt;</div><div class="line">  <span class="tag">&lt;<span class="name">ImageView</span></span></div><div class="line">    <span class="attr">android:id</span>=<span class="string">"@+id/viewPageImage"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span> /&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">FrameLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<p> 接下来实现继承自 FragmentPagerAdapter 的 ImagePagerAdapter 类，代码如下：</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ImagePagerAdapter</span> <span class="keyword">extends</span> <span class="title">FragmentPagerAdapter</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> List&lt;ImageFragment&gt; mFragments;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ImagePagerAdapter</span><span class="params">(FragmentManager fm, List&lt;ImageFragment&gt; fragments)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(fm);</div><div class="line">        mFragments = fragments;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> ImageFragment <span class="title">getItem</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</div><div class="line">        Log.i(<span class="string">"getItem"</span>, <span class="string">"getItem: "</span> + mFragments.get(position).getId());</div><div class="line">        <span class="keyword">return</span> mFragments.get(position);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCount</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> mFragments.size();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p> 在完成上述的步骤之后，利用保存图片资源的数组创建对应个数的 ImageFragment 并保存到 List 中，然后创建一个 ImagePagerAdapter 对象，替 ViewPager 设置适配器即可实现图片的加载和滑动。由于 ViewPager 内部处理了滑动方向和下一张图片加载判断的问题，所以只剩下图片与圆点的同步切换需要进行处理，代码如下：</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line">mImageIds = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;R.drawable.pic1, R.drawable.pic2, R.drawable.pic3&#125;;</div><div class="line">mTips = <span class="keyword">new</span> ImageView[mImageIds.length];</div><div class="line">mViewPager = (ViewPager) findViewById(R.id.viewPager);</div><div class="line">ViewGroup viewGroup = (ViewGroup) findViewById(R.id.tipsFragmentLayout);</div><div class="line">LinearLayout.LayoutParams layoutParams = <span class="keyword">new</span> LinearLayout.LayoutParams(</div><div class="line">    <span class="keyword">new</span> ViewGroup.LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT));</div><div class="line">layoutParams.rightMargin = <span class="number">5</span>;</div><div class="line">layoutParams.leftMargin = <span class="number">5</span>;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; mImageIds.length; i++) &#123;</div><div class="line">    ImageFragment imageFragment = <span class="keyword">new</span> ImageFragment();</div><div class="line">    imageFragment.setImageView(mImageIds[i]);</div><div class="line">    mImageFragments.add(imageFragment);</div><div class="line">    <span class="keyword">if</span> (mImageIds.length &gt; <span class="number">1</span>) &#123;</div><div class="line">        mTips[i] = <span class="keyword">new</span> ImageView(<span class="keyword">this</span>);</div><div class="line">        mTips[i].setImageResource(R.drawable.page_indicator_unfocused);</div><div class="line">        viewGroup.addView(mTips[i], layoutParams);</div><div class="line">        mTips[mCurrentPosition].setImageResource(R.drawable.page_indicator_focused);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">ImagePagerAdapter imagePagerAdapter = <span class="keyword">new</span> ImagePagerAdapter(</div><div class="line">    getSupportFragmentManager(), mImageFragments);</div><div class="line">mViewPager.setAdapter(imagePagerAdapter);</div><div class="line">mViewPager.addOnPageChangeListener(<span class="keyword">new</span> OnPageChangeListener() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPageScrolled</span><span class="params">(<span class="keyword">int</span> position, <span class="keyword">float</span> positionOffset,</span></span></div><div class="line">        <span class="keyword">int</span> positionOffsetPixels) &#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPageSelected</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (mImageIds.length &gt; <span class="number">1</span>) &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; mImageIds.length; i++) &#123;</div><div class="line">                <span class="keyword">if</span> (i == position) &#123;</div><div class="line">                    mTips[i].setImageResource(R.drawable.page_indicator_focused);</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    mTips[i].setImageResource(R.drawable.page_indicator_unfocused);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPageScrollStateChanged</span><span class="params">(<span class="keyword">int</span> state)</span> </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
</li>
</ol>
<h4 id="HorizontalScrollView-实现"><a href="#HorizontalScrollView-实现" class="headerlink" title="HorizontalScrollView 实现"></a>HorizontalScrollView 实现</h4><ol>
<li><p>HorizontalScrollView 特点</p>
<blockquote>
<p>A HorizontalScrollView is a FrameLayout, meaning you should place one child in it containing the entire contents to scroll; this child may itself be a layout manager with a complex hierarchy of objects. A child that is often used is a LinearLayout in a horizontal orientation, presenting a horizontal array of top-level items that the user can scroll through.</p>
</blockquote>
<p> 从这里可以了解到如果要实现上面的效果，那么应该在 HorizontalScrollView 放置一个 LinearLayout，然后 LinearLayout 内加载的是要显示的图片，由于是水平滑动，所以 LinearLayout 的方向也要是水平的。</p>
</li>
<li><p>实现过程<br> 依旧是添加了 HorizontalScrollView 控件，把放置 ImageSwwitcher 的部分替换为：</p>
 <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">HorizontalScrollView</span></span></div><div class="line">   <span class="attr">android:id</span>=<span class="string">"@+id/horizontalScrollView"</span></div><div class="line">   <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">   <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">   <span class="attr">android:scrollbars</span>=<span class="string">"none"</span>&gt;</div><div class="line">   <span class="tag">&lt;<span class="name">LinearLayout</span></span></div><div class="line">     <span class="attr">android:id</span>=<span class="string">"@+id/imageLayout"</span></div><div class="line">     <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">     <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">     <span class="attr">android:orientation</span>=<span class="string">"horizontal"</span> /&gt;</div><div class="line"> <span class="tag">&lt;/<span class="name">HorizontalScrollView</span>&gt;</span></div></pre></td></tr></table></figure>
<blockquote>
<p>为了效果一致去掉了滚动条。</p>
</blockquote>
<p> 添加完控件之后，就需要填充 HorizontalScrollView ，为了扩展性，所以创建了一个 HorizontalViewAdapter 类，代码如下：</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HorizontalViewAdapter</span></span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] mImageResIdList;</div><div class="line">    <span class="keyword">private</span> Context mContext;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HorizontalViewAdapter</span><span class="params">(Context context, <span class="keyword">int</span>[] imageResIdList)</span> </span>&#123;</div><div class="line">        mContext = context;</div><div class="line">        mImageResIdList = imageResIdList;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCount</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> mImageResIdList.length;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> ImageView <span class="title">getItem</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</div><div class="line">        ImageView imageView = <span class="keyword">new</span> ImageView(mContext);</div><div class="line"></div><div class="line">        WindowManager wm = (WindowManager) mContext.</div><div class="line">            getSystemService(Context.WINDOW_SERVICE);</div><div class="line">        DisplayMetrics displayMetrics = <span class="keyword">new</span> DisplayMetrics();</div><div class="line">        wm.getDefaultDisplay().getMetrics(displayMetrics);</div><div class="line">        <span class="keyword">int</span> width = displayMetrics.widthPixels;</div><div class="line">        <span class="keyword">int</span> height = displayMetrics.heightPixels;</div><div class="line">        Log.i(<span class="string">"Adpter: "</span>, String.valueOf(width));</div><div class="line"></div><div class="line">        LinearLayout.LayoutParams layoutParams = <span class="keyword">new</span> LayoutParams(</div><div class="line">            <span class="keyword">new</span> ViewGroup.LayoutParams(LayoutParams.MATCH_PARENT,LayoutParams.MATCH_PARENT));</div><div class="line">        layoutParams.width = width;</div><div class="line">        layoutParams.height = height;</div><div class="line"></div><div class="line">        imageView.setLayoutParams(layoutParams);</div><div class="line">        imageView.setScaleType(ScaleType.CENTER_CROP);</div><div class="line">        imageView.setImageResource(mImageResIdList[position]);</div><div class="line">        <span class="keyword">return</span> imageView;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>这里图片的长和宽会根据设备的分辨率进行指定，之所以不用 <code>match_parent</code> 的原因是这样会导致显示效果出问题。</p>
</blockquote>
<p> 在创建完适配器之后，由于 HorizontalScrollView 没有设置适配器的方法，所以需要实现 <code>setAdapter()</code> 方法，代码如下：</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAdapter</span><span class="params">(HorizontalViewAdapter horizontalViewAdapter)</span> </span>&#123;</div><div class="line">        mTips = <span class="keyword">new</span> ImageView[mImageId.length];</div><div class="line">        LinearLayout imageLayout = (LinearLayout) findViewById(R.id.imageLayout);</div><div class="line">        LinearLayout tipsLinearLayout = (LinearLayout) findViewById(R.id.horizontalTipsLayout);</div><div class="line">        <span class="keyword">int</span> size = horizontalViewAdapter.getCount();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</div><div class="line">            ImageView imageView = horizontalViewAdapter.getItem(i);</div><div class="line">            imageLayout.addView(imageView);</div><div class="line"></div><div class="line">            mTips[i] = <span class="keyword">new</span> ImageView(<span class="keyword">this</span>);</div><div class="line">            LinearLayout.LayoutParams layoutParams = <span class="keyword">new</span> LayoutParams(</div><div class="line">                <span class="keyword">new</span> ViewGroup.LayoutParams(ViewGroup.LayoutParams.WRAP_CONTENT,</div><div class="line">                    ViewGroup.LayoutParams.WRAP_CONTENT));</div><div class="line">            layoutParams.leftMargin = <span class="number">5</span>;</div><div class="line">            layoutParams.rightMargin = <span class="number">5</span>;</div><div class="line">            tipsLinearLayout.addView(mTips[i], layoutParams);</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p> 实现 <code>setAdapter()</code> 方法之后，就可以在 <code>onCreate()</code> 方法中调用了，调用之后图片会被加载到布局中，这时候也可以滑动，但是由于滑动距离没有控制，所以并没有达到想要的效果，由于图片的长度取决于设备的分辨率，所以可以获取设备的长度作为滑动距离，为 HorizontalScrollView 设置监听事件，当触摸屏幕之后进行判断，确定实际滑动的方向，具体代码如下：</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//获取图片滑动距离</span></div><div class="line">WindowManager wm = (WindowManager) getApplicationContext().</div><div class="line">    getSystemService(Context.WINDOW_SERVICE);</div><div class="line">DisplayMetrics displayMetrics = <span class="keyword">new</span> DisplayMetrics();</div><div class="line">wm.getDefaultDisplay().getMetrics(displayMetrics);</div><div class="line">mScrollX = displayMetrics.widthPixels;</div><div class="line"><span class="comment">//确定的滑动方向</span></div><div class="line"><span class="keyword">final</span> HorizontalScrollView horizontalScrollView = (HorizontalScrollView) findViewById(</div><div class="line">    R.id.horizontalScrollView);</div><div class="line">horizontalScrollView.setOnTouchListener(<span class="keyword">new</span> OnTouchListener() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouch</span><span class="params">(View v, MotionEvent event)</span> </span>&#123;</div><div class="line">        <span class="keyword">switch</span> (event.getAction()) &#123;</div><div class="line">            <span class="keyword">case</span> MotionEvent.ACTION_DOWN:</div><div class="line">                mDownX = (<span class="keyword">int</span>) event.getX();</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> MotionEvent.ACTION_UP:</div><div class="line">                <span class="keyword">int</span> upX = (<span class="keyword">int</span>) event.getX();</div><div class="line">                <span class="keyword">if</span> (upX &gt; mDownX) &#123;</div><div class="line">                    <span class="keyword">if</span> (mCurrentPosition &gt; <span class="number">0</span>) &#123;</div><div class="line">                        mCurrentPosition--;</div><div class="line">                        horizontalScrollView.smoothScrollBy(-mScrollX, <span class="number">0</span>);</div><div class="line">                        setTipsImage(mCurrentPosition);</div><div class="line">                    &#125;</div><div class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (upX &lt; mDownX) &#123;</div><div class="line">                    <span class="keyword">if</span> (mCurrentPosition &lt; mImageId.length - <span class="number">1</span>) &#123;</div><div class="line">                        mCurrentPosition++;</div><div class="line">                        Log.i(<span class="string">"onTouch: "</span>, <span class="string">"onTouch: "</span> + mCurrentPosition);</div><div class="line">                        horizontalScrollView.smoothScrollBy(mScrollX, <span class="number">0</span>);</div><div class="line">                        setTipsImage(mCurrentPosition);</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>HorizontalScrollView 的实现实际上并不完善，因为 ImageView 是一次性全部添加进去的，并没有做优化处理，在虚拟机上运行时，由于超过了堆内存会导致报错。</p>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Gallery&quot;&gt;&lt;a href=&quot;#Gallery&quot; class=&quot;headerlink&quot; title=&quot;Gallery&quot;&gt;&lt;/a&gt;Gallery&lt;/h3&gt;&lt;p&gt;主要内容：&lt;br&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/-3IROg74w7R0/WRBUvh7PYFI/AAAAAAAAAOg/HI89jtOkwlU-ipkBv1wpqsX_Z7ZHCKHngCHM/I/%255BUNSET%255D&quot; alt=&quot;总结&quot;&gt;
    
    </summary>
    
      <category term="Android基础" scheme="http://www.rookieyang.cn/categories/Android%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Android" scheme="http://www.rookieyang.cn/tags/Android/"/>
    
      <category term="自定义控件" scheme="http://www.rookieyang.cn/tags/%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%A7%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>onOptionsItemSelected() 返回值的理解</title>
    <link href="http://www.rookieyang.cn/2017/05/03/onOptionsItemSelected%E8%BF%94%E5%9B%9E%E5%80%BC%E7%9A%84%E7%90%86%E8%A7%A3/"/>
    <id>http://www.rookieyang.cn/2017/05/03/onOptionsItemSelected返回值的理解/</id>
    <published>2017-05-03T12:21:57.000Z</published>
    <updated>2018-01-15T14:52:02.000Z</updated>
    
    <content type="html"><![CDATA[<p>首先查看官方 API 的解释：</p>
<blockquote>
<p>This hook is called whenever an item in your options menu is selected. The default implementation simply returns false to have the normal processing happen (calling the item’s Runnable or sending a message to its Handler as appropriate). You can use this method for any items for which you would like to do processing without those other facilities.</p>
</blockquote>
<a id="more"></a>
<p>也就是说当点击 OptionsMenu 中的 Item 时，默认会返回 false，这个时候将会处理 item 关联的 Runnable 或发送一条 message 给它的 Handler。<br>为了弄清楚返回 false 时可能会发生什么做了如下测试：</p>
<ol>
<li><p>测试一</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onOptionsItemSelected</span><span class="params">(MenuItem item)</span> </span>&#123;</div><div class="line">    <span class="keyword">switch</span> (item.getItemId()) &#123;</div><div class="line">        <span class="keyword">case</span> R.id.add_item:</div><div class="line">            Toast.makeText(MainActivity.<span class="keyword">this</span>, <span class="string">"Add"</span>, Toast.LENGTH_LONG).show();</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> R.id.remove_item:</div><div class="line">            Toast.makeText(MainActivity.<span class="keyword">this</span>, <span class="string">"Remove"</span>, Toast.LENGTH_LONG).show();</div><div class="line">            item.setActionView(R.layout.progress);</div><div class="line">            Intent intent = <span class="keyword">new</span> Intent(MainActivity.<span class="keyword">this</span>, SecondActivity.class);</div><div class="line">            item.setIntent(intent);</div><div class="line">            Log.i(TAG, <span class="string">"onOptionsItemSelected: Remove"</span>);</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">default</span>:</div><div class="line">            Toast.makeText(MainActivity.<span class="keyword">this</span>, <span class="string">"re"</span>, Toast.LENGTH_LONG).show();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>上述代码中给 item 关联了一个 Intent 用于跳转到 SecondActivity，如果返回为 true 则点击 item 时不会跳转到 SecondActivity，如果返回 false 则会跳转到 SecondActivity。</p>
</blockquote>
</li>
<li><p>测试二</p>
<ul>
<li><p>创建一个 Fragment</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyFragment</span> <span class="keyword">extends</span> <span class="title">Fragment</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreateOptionsMenu</span><span class="params">(Menu menu, MenuInflater inflater)</span> </span>&#123;</div><div class="line">    inflater.inflate(R.menu.main, menu);</div><div class="line">    <span class="keyword">super</span>.onCreateOptionsMenu(menu, inflater);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onOptionsItemSelected</span><span class="params">(MenuItem item)</span> </span>&#123;</div><div class="line">    <span class="keyword">switch</span> (item.getItemId()) &#123;</div><div class="line">      <span class="keyword">case</span> R.id.remove_item:</div><div class="line">        Toast.makeText(getContext(), <span class="string">"Fragment Remove"</span>, Toast.LENGTH_LONG).show();</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">      <span class="keyword">default</span>:</div><div class="line">        Toast.makeText(getContext(), <span class="string">"Fragment"</span>, Toast.LENGTH_LONG).show();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="meta">@Nullable</span></div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> View <span class="title">onCreateView</span><span class="params">(LayoutInflater inflater, @Nullable ViewGroup container,</span></span></div><div class="line">      Bundle savedInstanceState) &#123;</div><div class="line">    setHasOptionsMenu(<span class="keyword">true</span>);</div><div class="line">    <span class="keyword">return</span> inflater.inflate(fragment_layout, container, <span class="keyword">false</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">上述创建了一个自定义的 Fragment 类，并添加了 OptionMenu 的点击事件。</div><div class="line">* 在之前的 Activity 的布局文件中添加 Fragment</div><div class="line"></div><div class="line">​```XML</div><div class="line">&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</div><div class="line">  xmlns:tools=&quot;http://schemas.android.com/tools&quot;</div><div class="line">  android:layout_width=&quot;match_parent&quot;</div><div class="line">  android:layout_height=&quot;match_parent&quot;</div><div class="line">  android:orientation=&quot;vertical&quot;&gt;</div><div class="line"></div><div class="line">  &lt;fragment</div><div class="line">    android:id=&quot;@+id/fragment&quot;</div><div class="line">    android:layout_width=&quot;match_parent&quot;</div><div class="line">    android:layout_height=&quot;match_parent&quot;</div><div class="line">    android:name=&quot;com.rookieyang.demo.MyFragment&quot;</div><div class="line">    tools:layout=&quot;@layout/fragment_layout&quot; /&gt;</div><div class="line"></div><div class="line">&lt;/LinearLayout&gt;</div></pre></td></tr></table></figure>
<p></p></li></ul><p></p>
<blockquote>
<p>在完成上述步骤之后点击 remove 的 item，由于 Activity 中的 onOptionsItemSelected() 返回了false，导致事件没有被消费就会向下传递给 Fragment，进而执行 Fragment 中的 item 的点击事件，所以能够看到屏幕上将会显示 <code>Fragment Remove</code> 而不是 <code>Remove</code>。</p>
</blockquote>
</li>


</ol>
<p>补：OptionMenu 的 Item 自定义的点击事件优先级要高于 onOptionsItemSelected()。</p>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;首先查看官方 API 的解释：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This hook is called whenever an item in your options menu is selected. The default implementation simply returns false to have the normal processing happen (calling the item’s Runnable or sending a message to its Handler as appropriate). You can use this method for any items for which you would like to do processing without those other facilities.&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Android问题记录" scheme="http://www.rookieyang.cn/categories/Android%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/"/>
    
    
      <category term="Android" scheme="http://www.rookieyang.cn/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Activity 学习</title>
    <link href="http://www.rookieyang.cn/2017/05/02/Activity%E5%AD%A6%E4%B9%A0/"/>
    <id>http://www.rookieyang.cn/2017/05/02/Activity学习/</id>
    <published>2017-05-02T11:58:36.000Z</published>
    <updated>2018-01-15T14:47:43.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Activity"><a href="#Activity" class="headerlink" title="Activity"></a>Activity</h3><p>主要内容：<br><img src="https://lh3.googleusercontent.com/-u4OYyZZzSb8/WQh2MXvWjiI/AAAAAAAAAOA/NifbHzkgMfc5NvV-goL-QS_dR3Jt2qgLACHM/I/Activity" alt="Activity导图"><a id="more"></a></p>
<h4 id="Activity-基本使用"><a href="#Activity-基本使用" class="headerlink" title="Activity 基本使用"></a>Activity 基本使用</h4><ol>
<li>创建活动</li>
<li><code>AndroidManifest.xml</code> 的 <code>application</code> 标签内进行声明</li>
<li>载入布局<br>setContentView(R.layout.second_layout)</li>
</ol>
<h4 id="Activity-跳转"><a href="#Activity-跳转" class="headerlink" title="Activity 跳转"></a>Activity 跳转</h4><ol>
<li><p>显式 Intent</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//Intent(Context packageContext, Class&lt;?&gt; cls)</span></div><div class="line">Intent intent = <span class="keyword">new</span> Intent(MainActivity.<span class="keyword">this</span>, SecondActivity.class);</div><div class="line">startActivity(intent);</div></pre></td></tr></table></figure>
<p> 这种指定上下文和目标活动类名的 Intent 称之为显式 Intent。</p>
</li>
<li><p>隐式 Intent<br> ​     </p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">   &lt;activity android:name=&quot;.SecondActivity&quot;&gt;</div><div class="line"> &lt;intent-filter&gt;</div><div class="line">   &lt;action android:name=&quot;com.rookieyang.demo.ACTION_START&quot; /&gt;</div><div class="line"></div><div class="line">   &lt;category android:name=&quot;android.intent.category.DEFAULT&quot; /&gt;</div><div class="line">   &lt;category android:name=&quot;com.rookieyang.demo.MY_CATEGORY&quot; /&gt;</div><div class="line"> &lt;/intent-filter&gt;</div><div class="line">&lt;/activity&gt;</div><div class="line"></div><div class="line">Intent implieIntent = new Intent(&quot;com.rookieyang.demo.ACTION_START&quot;);</div><div class="line">implieIntent.addCategory(&quot;com.rookieyang.demo.MY_CATEGORY&quot;);</div><div class="line">startActivity(implieIntent);</div></pre></td></tr></table></figure>
<p> 隐式 Intent 通过指定一系列更为抽象的 action 和 category 等信息，然后交由系统去分析这个 Intent，并帮我们找出合适的活动去启动。只有活动中的 <code>&lt;action&gt;</code> 和 <code>&lt;category&gt;</code> 标签完全匹配 Intent 中的 action 和 category 时，活动才能响应 Intent。</p>
<blockquote>
<p>在调用 <code>startActivity()</code> 方法时会自动将 <code>android.intent.category.DEFAULT</code> 加入到 Intent 中，所以在给 Activity 指定 category 的时候不能够去掉默认的 <code>android.intent.category.DEFAULT</code>，去掉之后通过隐式 Intent 将无法匹配到该 Activity。</p>
</blockquote>
<p> 隐式 Intent 除了可以启动自己程序内的活动，还可以启动其他程序的活动：</p>
<p> ​<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">btn.setOnClickListener(<span class="keyword">new</span> OnClickListener() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">        Intent intent = <span class="keyword">new</span> Intent(Intent.ACTION_VIEW);</div><div class="line">        intent.setData(Uri.parse(<span class="string">"http://www.baidu.com"</span>));</div><div class="line">        startActivity(intent);</div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line">​</div></pre></td></tr></table></figure></p>
<p> 隐式 Intent 指定了一个系统内置的 action，通过 <code>setData()</code> 设置 Intent 操作的数据用以调用系统浏览器，其中 <code>setData()</code> 对应 <code>&lt;intent-filter&gt;</code> 标签内的 <code>&lt;data&gt;</code> 标签，用于指定当前活动能够响应什么类型的数据。<code>&lt;data&gt;</code> 标签中主要可以配置以下内容：</p>
<ul>
<li><code>android:scheme</code>：用于指定数据的协议部分，如上例的 http 部分。</li>
<li><code>android:host</code>：用于指定数据的主机名部分，如上例的 www.baidu.com 部分。</li>
<li><code>android:port</code>：用于指定数据的端口部分，一般紧随主机名之后。</li>
<li><code>android:path</code>：用于指定主机名和端口之后的部分，如一段网址中跟在域名之后的内容。</li>
<li><code>android:mimeType</code>：用于指定可以处理的数据类型，允许使用通配符方式进行指定。</li>
</ul>
</li>
</ol>
<h4 id="Activity-间数据传递"><a href="#Activity-间数据传递" class="headerlink" title="Activity 间数据传递"></a>Activity 间数据传递</h4><ol>
<li><p>向下一个活动传递数据</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//MainActivity</span></div><div class="line">Intent intent = <span class="keyword">new</span> Intent(MainActivity.<span class="keyword">this</span>, SecondActivity.class);</div><div class="line">intent.putExtra(<span class="string">"data"</span>, <span class="string">"data"</span>);</div><div class="line">startActivity(intent);</div><div class="line"><span class="comment">//SecondActivity</span></div><div class="line">Intent intent = getIntent();</div><div class="line">Toast.makeText(<span class="keyword">this</span>, intent.getStringExtra(<span class="string">"data"</span>), Toast.LENGTH_LONG).show();</div></pre></td></tr></table></figure>
<p> MainActivity 中通过 Intent 的 <code>putExtra()</code> 方法将数据暂存在 Intent 中，然后在 SecondActivity 中通过 <code>getIntent()</code> 获取到启动 SecondActivity 的 Intent，之后通过 <code>getStringExtra()</code> 方法获取到传递的数据。如果传递的是整型数据则使用 <code>getIntExtra()</code> 方法。</p>
</li>
<li><p>返回数据给上一个活动</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//MainActivity</span></div><div class="line">btn.setOnClickListener(<span class="keyword">new</span> OnClickListener() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">        Intent intent = <span class="keyword">new</span> Intent(MainActivity.<span class="keyword">this</span>, SecondActivity.class);</div><div class="line">        startActivityForResult(intent, <span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onActivityResult</span><span class="params">(<span class="keyword">int</span> requestCode, <span class="keyword">int</span> resultCode, Intent data)</span> </span>&#123;</div><div class="line">    <span class="keyword">switch</span> (requestCode) &#123;</div><div class="line">        <span class="keyword">case</span> <span class="number">1</span>:</div><div class="line">            <span class="keyword">if</span> (resultCode == RESULT_OK) &#123;</div><div class="line">                Log.i(<span class="string">"onActivityResult"</span>, data.getStringExtra(<span class="string">"data"</span>));</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">default</span>:</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">//SecondActivity</span></div><div class="line">btn.setOnClickListener(<span class="keyword">new</span> OnClickListener() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">        Intent intent = <span class="keyword">new</span> Intent();</div><div class="line">        intent.putExtra(<span class="string">"data"</span>, <span class="string">"data"</span>);</div><div class="line">        setResult(RESULT_OK, intent);</div><div class="line">        finish();</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<ul>
<li><code>startActivityForResult(Intent intent, int requestCode)</code>：期望在活动销毁的时候能够返回一个结果给上一个活动。</li>
<li><code>setResult(int resultCode, Intent data)</code>：专门用于向上一个活动返回数据，第一个参数用于向上一个活动返回处理结果，一般只使用 <code>RESULT_OK</code> 和 <code>RESULT_CANCELED</code>。第二个参数则是把带有数据的 Intent 传递回去，然后调用 <code>finish()</code> 方法来销毁当前活动。</li>
<li><code>onActivityResult(int requestCode, int resultCode, Intent data)</code>：第一个参数是我们启动活动传入的请求码，第二个参数是返回数据传入的返回结果，第三个参数是返回的携带数据的 Intent，由于一个活动可能调用 <code>startActivityForResult()</code> 启动多个活动，所以首先需要检查 <code>requestCode</code> 来判断数据来源，然后在通过 <code>resultCode</code> 来判断处理结果是否成功。</li>
</ul>
</li>
</ol>
<h4 id="Activity-的生命周期"><a href="#Activity-的生命周期" class="headerlink" title="Activity 的生命周期"></a>Activity 的生命周期</h4><p><img src="http://i.imgur.com/J27l7mI.png" alt="activity_lifecycle"></p>
<ol>
<li><code>onCreate()</code>：活动第一次被创建的时候调用，一般在该方法中完成活动的初始化操作，比如加载布局、绑定事件等。</li>
<li><code>onStart()</code>：在活动由不可见变为可见的时候调用。</li>
<li><code>onResume()</code>：在活动准备好和用户进行交互的时候调用。此时活动一定位于栈顶，并且处于运行状态。</li>
<li><code>onPause()</code>：在系统准备去启动或者恢复另一个活动的时候调用。我们通常会在这个方法中将一些消耗 CPU 的资源释放掉，以及保存一些关键数据，但这个方法的执行速度一定要快，不然会影响到新的栈顶活动的使用。</li>
<li><code>onStop()</code>：在活动完全不可见的时候调用。如果启动的新活动是一个对话框式的活动，则 <code>onPause()</code> 会执行，而 <code>onStop()</code> 不会执行。</li>
<li><code>onDestroy()</code>：在活动被销毁之前调用。</li>
<li><code>onRestart()</code>：在活动由停止状态变为活动状态之前调用。<blockquote>
<p>以上七种方法中除了 onRestart( ) 方法，其他都是两两相对的，从而可以分为三种生存期：onCreate( ) 和 onDestory( ) 为<code>完整生存期</code>、onStart( ) 和 onStop( ) 为<code>可见生存期</code>、onResume( ) 和 onPause( ) 为<code>前台生存期</code>。<br>Activity 最多可能有四种状态，分别为：运行状态、暂停状态、停止状态、销毁状态。系统一般倾向于回收处于后两种状态的 Activity。</p>
</blockquote>
</li>
</ol>
<h4 id="Activity-的数据保存"><a href="#Activity-的数据保存" class="headerlink" title="Activity 的数据保存"></a>Activity 的数据保存</h4><p>由于 Activity 处于停止状态的时候可能被系统回收，那么当用户返回被回收的 Activity 之时会面对一个空数据的 Activity。为了避免这种情况的发生，我们可以利用 <code>onSaveInstanceState()</code> 进行数据的保存工作：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"> <span class="comment">//保存</span></div><div class="line"> <span class="meta">@Override</span></div><div class="line"> <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onSaveInstanceState</span><span class="params">(Bundle outState)</span> </span>&#123;</div><div class="line">   outState.putString(<span class="string">"data"</span>, <span class="string">"outState"</span>);</div><div class="line">   Log.i(TAG, <span class="string">"onSaveInstanceState: "</span>);</div><div class="line">   <span class="keyword">super</span>.onSaveInstanceState(outState);</div><div class="line"> &#125;</div><div class="line"> <span class="comment">//恢复</span></div><div class="line"> <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">   <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">   setContentView(R.layout.activity_first);</div><div class="line">   <span class="keyword">if</span> (savedInstanceState != <span class="keyword">null</span>) &#123;</div><div class="line">     Log.i(TAG, <span class="string">"onCreate: "</span> + savedInstanceState.getString(<span class="string">"data"</span>));</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>主动销毁 Acitivity 不会触发 <code>onSaveInstanceState()</code>，Bundle 也可以和 Intent 结合起来传递数据。</p>
</blockquote>
<h4 id="Activity-启动模式"><a href="#Activity-启动模式" class="headerlink" title="Activity 启动模式"></a>Activity 启动模式</h4><p>Activity 有下列四种启动模式：</p>
<table>
<thead>
<tr>
<th style="text-align:left">启动模式</th>
<th style="text-align:left">作用</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">standard</td>
<td style="text-align:left">每次启动活动都会创建一个活动的实例</td>
</tr>
<tr>
<td style="text-align:left">singleTop</td>
<td style="text-align:left">在启动活动的时候如果发现返回栈的栈顶已经是该活动，则会直接使用它，不会再创建新的活动实例</td>
</tr>
<tr>
<td style="text-align:left">singleTask</td>
<td style="text-align:left">在启动活动的时候如果发现返回栈中已经存在该活动，则直接使用它，并把该活动之上的所有活动统统出栈</td>
</tr>
<tr>
<td style="text-align:left">singleInstance</td>
<td style="text-align:left">在启动活动的时候，启动一个单独的返回栈来管理该活动</td>
</tr>
</tbody>
</table>
<ul>
<li>singleInstance 的意义：假设程序中有一个活动允许其他程序调用，如果我们想实现其他程序和我们的程序可以共享这个活动的实例，就需要使用 singleInstance 模式，因为在这种模式下会有一个单独的返回栈来管理这个活动，不管是哪个应用程序来访问这个活动，都共用同一个返回栈。</li>
</ul>
<h3 id="Intent-的-Flags-属性"><a href="#Intent-的-Flags-属性" class="headerlink" title="Intent 的 Flags 属性"></a>Intent 的 Flags 属性</h3><p>Flags 的作用有很多，有的 Flags 为可以设定 Activity 的启动模式，还有的 Flags 可以影响 Activity 的运行状态，比如 <code>FLAG_ACTIVITY_SINGLE_TOP</code> 和 <code>FLAG_ACTIVITY_CLEAR_TOP</code>。<br>常用的 Flags 如下：</p>
<table>
<thead>
<tr>
<th>Flags</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>FLAG_ACTIVITY_NEW_TASK</td>
<td>When using this flag, if a task is already running for the activity you are now starting, then a new activity will not be started; instead, the current task will simply be brought to the front of the screen with the state it was last in.</td>
</tr>
<tr>
<td>FLAG_ACTIVITY_CLEAR_TOP</td>
<td>设置该标志之后的 Activity，当启动 Activity 时，如果该 Activity 已经存在任务栈中，则不在创建新的实例，并且位于该 Activity 之上的 Activity都需要出栈<br>一般配合 FLAG_ACTIVITY_NEW_TASK 进行使用</td>
</tr>
<tr>
<td>FLAG_ACTIVITY_SINGLE_TOP</td>
<td>设置 Activity 的启动模式为 singleTop</td>
</tr>
<tr>
<td>FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS</td>
<td>具有该标志的 Activity 不会出现在历史 Activity 的列表中</td>
</tr>
<tr>
<td>FLAG_ACTIVITY_LAUNCH_ADJACENT</td>
<td>此标志仅用于分屏多窗口模式，新的活动将显示在上一个 Activity 的附近<br>需要与 FLAG_ACTIVITY_NEW_TASK 结合使用。 另外，如果要创建现有活动的新实例，则应同时设置 FLAG_ACTIVITY_MULTIPLE_TASK</td>
</tr>
<tr>
<td>FLAG_ACTIVITY_NEW_DOCUMENT</td>
<td>该标志用于在一个以目标 Activity 为栈顶的新任务栈中打开文档</td>
</tr>
</tbody>
</table>
<ul>
<li><code>FLAG_ACTIVITY_NEW_TASK</code>：设置此状态，记住以下原则，首先会查找是否存在和被启动的 Activity 具有相同的亲和性的任务栈（即 taskAffinity，注意同一个应用程序中的 activity 的亲和性在没有修改的情况下是一样的），如果有，则直接把这个栈整体移动到前台，并保持栈中的状态不变，即栈中的 activity 顺序不变，如果没有，则新建一个栈来存放被启动的 activity。</li>
<li><code>FLAG_ACTIVITY_LAUNCH_ADJACENT</code>：测试发现在分屏模式下在启动目标 Activity 时，如果没有设置 <code>FLAG_ACTIVITY_MULTIPLE_TASK</code> ，那么当目标 Activity 已经存在于任务栈中，将不会进入分屏模式。</li>
<li><code>FLAG_ACTIVITY_NEW_DOCUMENT</code>： 当单独使用时，它相当于指定 <code>documentLaunchMode =“intoExisting”</code>。当与 <code>FLAG_ACTIVITY_MULTIPLE_TASK</code> 一起使用时，它等同于指定 <code>documentLaunchMode =“always”</code>。</li>
</ul>
<h3 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h3><h4 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h4><p>Intent 的 <code>putExtra()</code> 方法中所支持的数据类型是有限的，当需要传递一些自定义对象的时候，就需要用到序列化了。</p>
<h4 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h4><p>使用 Intent 来传递对象通常有两种实现方式：</p>
<ol>
<li><p>Serializable</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</div><div class="line">    </div><div class="line"> <span class="keyword">private</span> String name;</div><div class="line"> <span class="keyword">private</span> <span class="keyword">int</span> age;</div><div class="line">    </div><div class="line"> <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line">   <span class="keyword">return</span> name;</div><div class="line"> &#125;</div><div class="line">    </div><div class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</div><div class="line">   <span class="keyword">return</span> age;</div><div class="line"> &#125;</div><div class="line">    </div><div class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">   <span class="keyword">this</span>.name = name;</div><div class="line"> &#125;</div><div class="line">    </div><div class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</div><div class="line">   <span class="keyword">this</span>.age = age;</div><div class="line"> &#125;</div><div class="line">&#125;</div><div class="line">    </div><div class="line"><span class="comment">//MainActivity 中</span></div><div class="line">Person person = <span class="keyword">new</span> Person();</div><div class="line">person.setAge(<span class="number">13</span>);</div><div class="line">person.setName(<span class="string">"data"</span>);</div><div class="line">Intent intent = <span class="keyword">new</span> Intent(MainActivity.<span class="keyword">this</span>, SecondActivity.class);</div><div class="line">intent.putExtra(<span class="string">"data_person"</span>, person);</div><div class="line">startActivity(intent);</div><div class="line"><span class="comment">//SecondActivity 中</span></div><div class="line">Person person = (Person) getIntent().getParcelableExtra(<span class="string">"data_person"</span>);</div><div class="line">Log.i(<span class="string">"SecondActivity"</span>, <span class="string">"onCreate: "</span> + person.getName());</div></pre></td></tr></table></figure>
<blockquote>
<p>首先创建了一个 Person 类去实现 Serializable 接口，这样所有的 Person 对象就都是可序列化的了，然后在 MainActivity 中创建了一个 Person 对象，然后将对象传入 SecondActivity 中去，在 SecondActivity 中用 <code>getParcelableExtra()</code> 来获取对象。</p>
</blockquote>
</li>
<li><p>Parcelable</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">implements</span> <span class="title">Parcelable</span> </span>&#123;</div><div class="line">    </div><div class="line"> ...</div><div class="line">    </div><div class="line"> <span class="meta">@Override</span></div><div class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">describeContents</span><span class="params">()</span> </span>&#123;</div><div class="line">   <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line"> &#125;</div><div class="line">    </div><div class="line"> <span class="meta">@Override</span></div><div class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">writeToParcel</span><span class="params">(Parcel dest, <span class="keyword">int</span> flags)</span> </span>&#123;</div><div class="line">     dest.writeString(name);</div><div class="line">     dest.writeInt(age);</div><div class="line"> &#125;</div><div class="line">    </div><div class="line"> <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Parcelable.Creator&lt;Person&gt; CREATOR = <span class="keyword">new</span> Creator&lt;Person&gt;() &#123;</div><div class="line">     <span class="meta">@Override</span></div><div class="line">     <span class="function"><span class="keyword">public</span> Person <span class="title">createFromParcel</span><span class="params">(Parcel source)</span> </span>&#123;</div><div class="line">         Person person = <span class="keyword">new</span> Person();</div><div class="line">         person.name = source.readString();</div><div class="line">         person.age = source.readInt();</div><div class="line">         <span class="keyword">return</span> person;</div><div class="line">     &#125;</div><div class="line">    </div><div class="line">     <span class="meta">@Override</span></div><div class="line">     <span class="keyword">public</span> Person[] newArray(<span class="keyword">int</span> size) &#123;</div><div class="line">         <span class="keyword">return</span> <span class="keyword">new</span> Person[size];</div><div class="line">     &#125;</div><div class="line"> &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>Person 类实现了 Parcelable 接口用于序列化，提供了一个名为 CREATOR 的常量用于反序列化。<code>createFromParcel()</code> 和 <code>writeToParcel()</code> 的顺序需要一致。采用 Parcelable 方式进行序列化，获取对象的方法变为 <code>getParcelableExtra()</code>。</p>
</blockquote>
</li>
</ol>
<h3 id="实用技巧"><a href="#实用技巧" class="headerlink" title="实用技巧"></a>实用技巧</h3><ol>
<li><p>知晓当前是在哪一个活动</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(@Nullable Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">    Log.d(<span class="string">"onCreate: "</span>, getClass().getSimpleName());</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>创建一个 BaseActivity，然后让其他 Activity 继承 BaseAcitivty，那么当启动活动时就会 logcat 中打印出相应的信息。</p>
</blockquote>
</li>
<li><p>随时随地退出程序</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ActivityCollector</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="keyword">private</span> <span class="keyword">static</span> List&lt;Activity&gt; activities = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">addActivity</span><span class="params">(Activity activity)</span> </span>&#123;</div><div class="line">    activities.add(activity);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">removeActivity</span><span class="params">(Activity activity)</span> </span>&#123;</div><div class="line">    activities.remove(activity);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">finishAll</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">for</span> (Activity activity : activities) &#123;</div><div class="line">      <span class="keyword">if</span> (!activity.isFinishing()) &#123;</div><div class="line">        activity.finish();</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>创建一个活动的管理类，在活动的 <code>onCreate()</code> 中调用 <code>addActivity()</code> 方法保存创建的活动，在 <code>onDestroy()</code> 中调用 <code>removeActivity()</code> 方法移除马上要销毁的活动。如果需要随时随地退出程序则只需要调用 <code>finishAll()</code>。</p>
</blockquote>
</li>
<li><p>启动活动的最佳写法</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">actionStart</span><span class="params">(Context context, String param1, String param2)</span> </span>&#123;</div><div class="line">  Intent intent = <span class="keyword">new</span> Intent(context, SecondActivity.class);</div><div class="line">  intent.putExtra(<span class="string">"param1"</span>, param1);</div><div class="line">  intent.putExtra(<span class="string">"param2"</span>, param2);</div><div class="line">  context.startActivity(intent);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>当活动中需要用到一些参数之时，可以采用如上方式去启动活动。那么当其他人来启动活动的时候将会非常方便。</p>
</blockquote>
</li>
</ol>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Activity&quot;&gt;&lt;a href=&quot;#Activity&quot; class=&quot;headerlink&quot; title=&quot;Activity&quot;&gt;&lt;/a&gt;Activity&lt;/h3&gt;&lt;p&gt;主要内容：&lt;br&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/-u4OYyZZzSb8/WQh2MXvWjiI/AAAAAAAAAOA/NifbHzkgMfc5NvV-goL-QS_dR3Jt2qgLACHM/I/Activity&quot; alt=&quot;Activity导图&quot;&gt;
    
    </summary>
    
      <category term="Android基础" scheme="http://www.rookieyang.cn/categories/Android%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Android" scheme="http://www.rookieyang.cn/tags/Android/"/>
    
      <category term="Activity" scheme="http://www.rookieyang.cn/tags/Activity/"/>
    
  </entry>
  
  <entry>
    <title>Python 下 json 模块</title>
    <link href="http://www.rookieyang.cn/2017/04/20/Python%E4%B8%8BJson%E6%A8%A1%E5%9D%97/"/>
    <id>http://www.rookieyang.cn/2017/04/20/Python下Json模块/</id>
    <published>2017-04-20T12:12:47.000Z</published>
    <updated>2018-01-15T14:52:50.000Z</updated>
    
    <content type="html"><![CDATA[<p>Python 下的 json 模块主要有 4 个函数：<a id="more"></a></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#dict 转成 str </span></div><div class="line">json.dump()</div><div class="line"><span class="comment">#将 json 数据保存到文件</span></div><div class="line">json.dumps()</div><div class="line"><span class="comment">#str 转成 dict </span></div><div class="line">json.load()</div><div class="line"><span class="comment">#从文件中读取 json 数据</span></div><div class="line">json.loads()</div></pre></td></tr></table></figure>
<p>将 Json 数据写入文件：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">try</span>:</div><div class="line">  data_result_file = <span class="string">"data_result.json"</span></div><div class="line">  <span class="keyword">with</span> open(data_result_file, <span class="string">'w'</span>) <span class="keyword">as</span> f:</div><div class="line">      data_json = json.loads(results.data)</div><div class="line">      json.dump(data_json, f, indent=<span class="number">4</span>)</div><div class="line"><span class="keyword">except</span> IOError:</div><div class="line">  print(<span class="string">"文件不存在"</span>)</div></pre></td></tr></table></figure>
<p>由于 <code>json.dump()</code> 产生的是 <code>str</code> 对象，不是 <code>bytes</code> 对象，所以写入时文件权限不能设置为 <code>wb</code>，否则会出现 <code>TypeError: a bytes-like object is required, not ‘str&#39;</code>。</p>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Python 下的 json 模块主要有 4 个函数：
    
    </summary>
    
      <category term="Python基础" scheme="http://www.rookieyang.cn/categories/Python%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Python" scheme="http://www.rookieyang.cn/tags/Python/"/>
    
      <category term="Json" scheme="http://www.rookieyang.cn/tags/Json/"/>
    
  </entry>
  
  <entry>
    <title>BootStrap-FileInput 的基本使用</title>
    <link href="http://www.rookieyang.cn/2017/04/20/bootstrap-fileinput%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"/>
    <id>http://www.rookieyang.cn/2017/04/20/bootstrap-fileinput的基本使用/</id>
    <published>2017-04-20T11:13:02.000Z</published>
    <updated>2018-01-15T14:50:43.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="安装与引入"><a href="#安装与引入" class="headerlink" title="安装与引入"></a>安装与引入</h4><p>在引入 File Input 之前首先需要下载下列文件：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">bootstrap-fileinput/css/fileinput.min.css</div><div class="line">bootstrap-fileinput/js/fileinput_locale_zh.js</div><div class="line">bootstrap-fileinput/js/fileinput.min.js</div></pre></td></tr></table></figure>
<p>上述文件可以在 <a href="https://github.com/kartik-v/bootstrap-fileinput" target="_blank" rel="external">File Input 的项目地址</a>找到。<a id="more"></a><br>在下载好之后就需要添加如下代码进行引入：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;link href=<span class="string">"/static/css/fileinput.min.css"</span> rel=<span class="string">"stylesheet"</span>&gt;</div><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"/static/js/fileinput.min.js"</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div><div class="line">&lt;script src=<span class="string">"/static/js/fileinput-zh.js"</span> type=<span class="string">"text/javascript"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div></pre></td></tr></table></figure>
<h4 id="File-Input-的使用"><a href="#File-Input-的使用" class="headerlink" title="File Input 的使用"></a>File Input 的使用</h4><p>首先需要在页面添加一个 File Input 控件：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"form-group"</span>&gt;</div><div class="line">    <span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"import_file"</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">multiple</span> <span class="attr">class</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"userfile"</span></span></span></div><div class="line">           <span class="attr">data-overwrite-initial</span>=<span class="string">"false"</span> <span class="attr">data-min-file-count</span>=<span class="string">"1"</span>&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li><code>data-min-file-count</code> 可以设定最少上传的文件数</li>
</ul>
<p>在添加完之后就需要对控件进行初始化：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">"#import_file"</span>).fileinput(&#123;</div><div class="line">    <span class="attr">uploadUrl</span>: <span class="string">"/upload_file"</span>, <span class="comment">//设置上传的地址</span></div><div class="line">    allowedFileExtensions: [<span class="string">'xls'</span>, <span class="string">'xlsx'</span>], <span class="comment">//设置允许上传的文件格式</span></div><div class="line">    overwriteInitial: <span class="literal">false</span>,</div><div class="line">    <span class="attr">language</span>: <span class="string">'zh'</span>, <span class="comment">//设置语言</span></div><div class="line">    maxFileSize: <span class="number">6000</span>,</div><div class="line">    <span class="attr">maxFilesNum</span>: <span class="number">10</span>, <span class="comment">//允许上传的最大文件数</span></div><div class="line">    uploadAsync: <span class="literal">true</span>, <span class="comment">//默认异步上传</span></div><div class="line">    <span class="comment">//allowedFileTypes: ['image', 'video', 'flash'],</span></div><div class="line">    allowedPreviewTypes: <span class="literal">null</span>,</div><div class="line">    <span class="attr">previewFileIconSettings</span>: &#123;</div><div class="line">        <span class="string">'xls'</span>: <span class="string">'&lt;i class="fa fa-file-excel-o text-success"&gt;&lt;/i&gt;'</span></div><div class="line">    &#125;, <span class="comment">//预览文件的图标设置</span></div><div class="line">    previewFileExtSettings: &#123;</div><div class="line">        <span class="string">'xls'</span>: <span class="function"><span class="keyword">function</span> (<span class="params">ext</span>) </span>&#123;</div><div class="line">            <span class="keyword">return</span> ext.match(<span class="regexp">/(xls|xlsx)$/i</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;, <span class="comment">//xls 和 xlsx 使用同一预览</span></div><div class="line">    slugCallback: <span class="function"><span class="keyword">function</span> (<span class="params">filename</span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> filename.replace(<span class="string">'('</span>, <span class="string">'_'</span>).replace(<span class="string">']'</span>, <span class="string">'_'</span>);</div><div class="line">    &#125; <span class="comment">//使用回调功能将文件名转换成处理之后的文件名。</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>后台处理：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@app.route('/upload_file', methods=['POST'])</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">upload_file</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        file = request.files.get(<span class="string">'userfile'</span>)</div><div class="line">        save_file_name = file.filename</div><div class="line">        file.save(save_file_name)</div><div class="line">    <span class="keyword">except</span> KeyError:</div><div class="line">        <span class="keyword">return</span> []</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">return</span> jsonify(&#123;<span class="string">'info'</span>: <span class="string">"上传成功"</span>&#125;)</div></pre></td></tr></table></figure>
<ul>
<li>这里对上传的 Excel 文件进行了保存，返回上传成功的信息。</li>
</ul>
<h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h4><ol>
<li>在对 Excel 文件进行预览图标设置之前，如果通过按钮选择文件而不是拖拽，则会出现由预览文件所导致卡顿，在将 Excel 文件的预览设置为图标之后解决。</li>
<li>从后端直接返回字符串出现错误，改为返回 Json 格式数据后解决。</li>
</ol>
<hr>
<h4 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h4><ol>
<li><a href="http://plugins.krajee.com/file-input" target="_blank" rel="external">File Input 开发文档</a></li>
<li><a href="http://plugins.krajee.com/file-basic-usage-demo" target="_blank" rel="external">File Input Demo</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;安装与引入&quot;&gt;&lt;a href=&quot;#安装与引入&quot; class=&quot;headerlink&quot; title=&quot;安装与引入&quot;&gt;&lt;/a&gt;安装与引入&lt;/h4&gt;&lt;p&gt;在引入 File Input 之前首先需要下载下列文件：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;bootstrap-fileinput/css/fileinput.min.css&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;bootstrap-fileinput/js/fileinput_locale_zh.js&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;bootstrap-fileinput/js/fileinput.min.js&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;上述文件可以在 &lt;a href=&quot;https://github.com/kartik-v/bootstrap-fileinput&quot;&gt;File Input 的项目地址&lt;/a&gt;找到。
    
    </summary>
    
      <category term="杂记" scheme="http://www.rookieyang.cn/categories/%E6%9D%82%E8%AE%B0/"/>
    
    
      <category term="BootStrap" scheme="http://www.rookieyang.cn/tags/BootStrap/"/>
    
      <category term="Web" scheme="http://www.rookieyang.cn/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>Android 自定义 View 和 ViewGroup 简要总结</title>
    <link href="http://www.rookieyang.cn/2017/04/17/Android%E8%87%AA%E5%AE%9A%E4%B9%89View%E5%92%8CViewGroup%E7%AE%80%E8%A6%81%E6%80%BB%E7%BB%93/"/>
    <id>http://www.rookieyang.cn/2017/04/17/Android自定义View和ViewGroup简要总结/</id>
    <published>2017-04-17T11:47:43.000Z</published>
    <updated>2018-01-15T14:49:20.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="主要方法及作用"><a href="#主要方法及作用" class="headerlink" title="主要方法及作用"></a>主要方法及作用</h4><ol>
<li>自定义 ViewGroup 主要涉及的方法如下：<ul>
<li><code>onMeasure()</code> 计算 childView 的测量值以及模式，以及设置自己的宽和高。</li>
<li><code>onLayout()</code> 对所有 childView 进行定位。</li>
</ul>
</li>
<li>自定义 View 主要涉及的方法如下：<ul>
<li><code>onMeasure()</code> 测量 View 的宽和高。</li>
<li><code>onDraw()</code> 将 View 绘制到屏幕上。</li>
</ul>
</li>
</ol>
<a id="more"></a>
<h4 id="测量模式"><a href="#测量模式" class="headerlink" title="测量模式"></a>测量模式</h4><p><code>onMeasure()</code> 过程和测量模式相关，而测量模式分为三种：</p>
<ol>
<li>UNSPECIFIED：父容器不对 View 有任何限制，要多大给多大。这种情况一般用于系统内部。</li>
<li>EXACTLY：父容器已经检测出 View 所需要的精确大小，这个时候 View 的最终大小就是 SpecSize 所指定的值。它对应 LayoutParams 中的 mactch_parent 和具体数值这两种模式。</li>
<li>AT_MOST 父容器指定了一个可用大小即 SpecSize，View 的大小不能大于这个值，具体值看不同 View 的具体实现。它对应于 LayoutParams 中的 wrap_content。</li>
</ol>
<h4 id="LayoutParams-和-generateLayoutParams"><a href="#LayoutParams-和-generateLayoutParams" class="headerlink" title="LayoutParams 和 generateLayoutParams"></a>LayoutParams 和 generateLayoutParams</h4><p>LayoutParams的官方文档解释如下：</p>
<blockquote>
<p>1.LayoutParams are used by views to tell their parents how they want to be laid out.<br>– LayoutParams 是 View 用来告诉它的父控件如何放置自己的。</p>
<p>2.The base LayoutParams class just describes how big the view wants to be for both width and height.<br>– 基类 LayoutParams（也就是 ViewGroup.LayoutParams）仅仅描述了这个 View 想要的宽度和高度。</p>
<p>3.There are subclasses of LayoutParams for different subclasses of ViewGroup.<br>– 不同 ViewGroup 的继承类对应着不同的 ViewGroup.LayoutParams 的子类。</p>
</blockquote>
<p>generateLayoutParams官方文档解释如下：</p>
<blockquote>
<p>Returns a new set of layout parameters based on the supplied attributes set.<br>– 根据提供的属性集返回一组新的布局参数。</p>
</blockquote>
<p>在 <code>addView()</code> 执行的过程中，如果 <code>checkLayoutParams()</code> 检测到传递过来的 <code>LayoutParams</code> 不是对应布局的 LayoutParam，则会通过 <code>generateLayoutParams()</code> 根据你传递的 LayoutParams 的属性构造一个对应布局的 LayoutParams。</p>
<hr>
<h4 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h4><ol>
<li><a href="http://blog.csdn.net/lmj623565791/article/details/38339817/" target="_blank" rel="external"> Android 手把手教您自定义ViewGroup（一）</a></li>
<li><a href="http://www.jianshu.com/p/2a938e598ec8" target="_blank" rel="external">自定义控件知识储备-LayoutParams的那些事</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;主要方法及作用&quot;&gt;&lt;a href=&quot;#主要方法及作用&quot; class=&quot;headerlink&quot; title=&quot;主要方法及作用&quot;&gt;&lt;/a&gt;主要方法及作用&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;自定义 ViewGroup 主要涉及的方法如下：&lt;ul&gt;
&lt;li&gt;&lt;code&gt;onMeasure()&lt;/code&gt; 计算 childView 的测量值以及模式，以及设置自己的宽和高。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;onLayout()&lt;/code&gt; 对所有 childView 进行定位。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;自定义 View 主要涉及的方法如下：&lt;ul&gt;
&lt;li&gt;&lt;code&gt;onMeasure()&lt;/code&gt; 测量 View 的宽和高。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;onDraw()&lt;/code&gt; 将 View 绘制到屏幕上。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="Android基础" scheme="http://www.rookieyang.cn/categories/Android%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Android" scheme="http://www.rookieyang.cn/tags/Android/"/>
    
      <category term="自定义控件" scheme="http://www.rookieyang.cn/tags/%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%A7%E4%BB%B6/"/>
    
  </entry>
  
</feed>
